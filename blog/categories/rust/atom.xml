<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rust | In Pursuit of Laziness]]></title>
  <link href="http://manishearth.github.io/blog_staging/blog/categories/rust/atom.xml" rel="self"/>
  <link href="http://manishearth.github.io/blog_staging/"/>
  <updated>2017-05-19T01:40:15+00:00</updated>
  <id>http://manishearth.github.io/blog_staging/</id>
  <author>
    <name><![CDATA[Manish Goregaokar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Teaching Programming: Proactive vs Reactive]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/05/18/teaching-programming-proactive-vs-reactive/"/>
    <updated>2017-05-18T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/05/18/teaching-programming-proactive-vs-reactive</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been thinking about this a lot these days. In part because of <a href="https://github.com/Manishearth/rust-clippy/issues/1737">an idea I had</a>
but also due to <a href="https://twitter.com/sehurlburt/status/863829482645340160">this twitter discussion</a>.</p>

<p>When teaching most things, there are two non-mutually-exclusive ways of approaching the problem. One
is &ldquo;proactive&rdquo;<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, which is where the teacher decide a learning path beforehand, and executes it. The
other is &ldquo;reactive&rdquo;, where the teacher reacts to the student trying things out and dynamically
tailors the teaching experience.</p>

<p>Most in-person teaching experiences are a mix of both. Planning beforehand is very important whilst teaching,
but tailoring the experience to the student&rsquo;s reception of the things being taught is important too.</p>

<p>In person, you <em>can</em> mix these two, and in doing so you get a &ldquo;best of both worlds&rdquo; situation. Yay!</p>

<p>But &hellip; we don&rsquo;t really learn much programming in person in a classroom setup.
Sure, some folks learn the basics in college for a few years, but everything
they learn after that isn&rsquo;t in a classroom situation where this can work<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.
I&rsquo;m an autodidact,
and while I have taken a few programming courses for random interesting things, I&rsquo;ve taught myself most of what I know
using various sources. I care a lot about improving the situation here.</p>

<p>With self-driven learning we have a similar divide. The &ldquo;proactive&rdquo; model corresponds to reading books
and docs. Various people have proactively put forward a path for learning in the form of a book
or tutorial. It&rsquo;s up to you to pick one, and follow it.</p>

<p>The &ldquo;reactive&rdquo; model is not so well-developed. In the context of self-driven learning in programming,
it&rsquo;s basically &ldquo;do things, make mistakes, hope that google/stackoverflow help&rdquo;. It&rsquo;s how
a lot of people learn programming; and it&rsquo;s how I prefer to learn programming.</p>

<p>It&rsquo;s very nice to be able to &ldquo;learn along the way&rdquo;. And while this is a long and arduous process,
involving many false starts and a lack of a sense of progress, it can be worth it in terms of
the kind of experience this gets you.</p>

<p>But as I mentioned, this isn&rsquo;t as well-developed. With the proactive approach, there still
is a teacher &ndash; the author of the book! That teacher may not be able to respond in real time,
but they&rsquo;re able to set forth a path for you to work through.</p>

<p>On the other hand, with the &ldquo;reactive&rdquo; approach, there is no teacher. Sure, there are
Random Answers on the Internet, which are great, but they don&rsquo;t form a coherent story.
Neither can you really be your own teacher for a topic you do not understand.</p>

<p>Yet plenty of folks do this. Plenty of folks approach things like learning a new language by reading
at most two pages of docs and then just diving straight in and trying stuff out. The only language I
have not done this for is the first language I learned<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>&nbsp;<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>I think it&rsquo;s unfortunate that folks who prefer this approach don&rsquo;t get the benefit of a teacher.
In the reactive approach, teachers can still tell you what you&rsquo;re doing wrong and steer you away from
tarpits of misunderstanding. They can get you immediate answers and guidance. When we look
for answers on stackoverflow, we get some of this, but it also involves a lot of pattern-matching
on the part of the student, and we end up with a bad facsimile of what a teacher can do for you.</p>

<p>But it&rsquo;s possible to construct a better teacher for this!</p>

<p>In fact, examples of this exist in the wild already!</p>

<p>The Elm compiler is my favorite example of this. <a href="http://elm-lang.org/blog/compilers-as-assistants">It has amazing error messages</a></p>

<p><img class="center" src="/images/post/elm-error.png">
<img class="center" src="/images/post/elm-error2.png"></p>

<p>The error messages tell you what you did wrong, sometimes suggest fixes, and help
correct potential misunderstandings.</p>

<p>Rust does this too. Many compilers do. (Elm is exceptionally good at it)</p>

<p><img class="center" src="/images/post/rust-error.png" width="700"></p>

<p>One thing I particularly like about Rust is that from that error you can
try <code>rustc --explain E0373</code> and get a terminal-friendly version
of <a href="https://doc.rust-lang.org/nightly/error-index.html#E0373">this help text</a>.</p>

<p>Anyway, diagnostics basically provide a reactive component to learning programming. I&rsquo;ve cared about
diagnostics in Rust for a long time, and I often remind folks that many things taught through the
docs can/should be taught through diagnostics too. Especially because diagnostics are a kind of soapbox
for compiler writers &mdash; you can&rsquo;t guarantee that your docs will be read, but you can guarantee
that your error messages will. These days, while I don&rsquo;t have much time to work on stuff myself I&rsquo;m
very happy to mentor others working on improving diagnostics in Rust.</p>

<p>Only recently did I realize <em>why</em> I care about them so much &ndash; they cater exactly to my approach
to learning programming languages! If I&rsquo;m not going to read the docs when I get started and try the
reactive approach, having help from the compiler is invaluable.</p>

<p>I think this space is relatively unexplored. Elm might have the best diagnostics out there,
and as diagnostics (helping all users of a language &ndash; new and experienced), they&rsquo;re great,
but as a teaching tool for newcomers; they still have a long way to go. Of course, compilers
like Rust are even further behind.</p>

<p>One thing I&rsquo;d like to experiment with is a first-class tool for reactive teaching. In a sense,
<a href="https://github.com/Manishearth/rust-clippy">clippy</a> is already something like this. Clippy looks out for antipatterns, and tries to help
teach. But it also does many other things, and not all are teaching moments are antipatterns.</p>

<p>For example, in C, this isn&rsquo;t necessarily an antipattern:</p>

<pre><code class="c">struct thingy *result;
if (result = do_the_thing()) {
    frob(*result)
}
</code></pre>

<p>Many C codebases use <code>if (foo = bar())</code>. It is a potential footgun if you confuse it with <code>==</code>,
but there&rsquo;s no way to be sure. Many compilers now have a warning for this that you can silence by
doubling the parentheses, though.</p>

<p>In Rust, this isn&rsquo;t an antipattern either:</p>

<pre><code class="rust">fn add_one(mut x: u8) {
    x += 1;
}

let num = 0;
add_one(num);
// num is still 0
</code></pre>

<p>For someone new to Rust, they may feel that the way to have a function mutate arguments (like <code>num</code>) passed to it
is to use something like <code>mut x: u8</code>. What this actually does is copies <code>num</code> (because <code>u8</code> is a <code>Copy</code> type),
and allows you to mutate the copy within the scope of the function. The right way to make a function that
mutates arguments passed to it by-reference would be to do something like <code>fn add_one(x: &amp;mut u8)</code>.
If you try the <code>mut x</code> thing for non-Copy values, you&rsquo;d get a &ldquo;reading out of moved value&rdquo; error
when you try to access <code>num</code> after calling <code>add_one</code>. This would help you figure out what you did wrong,
and potentially that error could detect this situation and provide more specific help.</p>

<p>But for <code>Copy</code> types, this will just compile. And it&rsquo;s not an antipattern &ndash; the way this works
makes complete sense in the context of how Rust variables work, and is something that you do need
to use at times.</p>

<p>So we can&rsquo;t even warn on this. Perhaps in &ldquo;pedantic clippy&rdquo; mode, but really, it&rsquo;s not
a pattern we want to discourage. (At least in the C example that pattern is one
that many people prefer to forbid from their codebase)</p>

<p>But it would be nice if we could tell a learning programmer &ldquo;hey, btw, this is what this syntax
means, are you sure you want to do this?&rdquo;. With explanations and the ability to dismiss the error.</p>

<p>In fact, you don&rsquo;t even need to restrict this to potential footguns!</p>

<p>You can detect various things the learner is trying to do. Are they probably mixing up <code>String</code>
and <code>&amp;str</code>? Help them! Are they writing a trait? Give a little tooltip explaining the feature.</p>

<p>This is beginning to remind me of the original &ldquo;office assistant&rdquo; <a href="https://en.wikipedia.org/wiki/Office_Assistant">Clippy</a>, which was super annoying.
But an opt-in tool or IDE feature which gives helpful suggestions could still be nice, especially
if you can strike a balance between being so dense it is annoying and so sparse it is useless.</p>

<p>It also reminds me of well-designed tutorial modes in games. Some games have a tutorial mode that guides you
through a set path of doing things. Other games, however, have a tutorial mode that will give you hints even
if you stray off the beaten path.</p>

<p>This really feels like it fits the &ldquo;reactive&rdquo; model I prefer. The student gets to mold their own
journey, but gets enough helpful hints and nudges from the &ldquo;teacher&rdquo; (the tool) so that they
don&rsquo;t end up wasting too much time and can make informed decisions on how to proceed learning.</p>

<p>Now, rust-clippy isn&rsquo;t exactly the place for this kind of tool. This tool needs the ability to globally
&ldquo;silence&rdquo; a hint once you&rsquo;ve learned it. rust-clippy is a linter, and while you can silence lints in
your code, you can&rsquo;t silence them globally for the current user. Nor does that really make sense.</p>

<p>But rust-clippy does have the infrastructure for writing stuff like this, so it&rsquo;s an ideal prototyping
point. I&rsquo;ve filed <a href="https://github.com/Manishearth/rust-clippy/issues/1737">this issue</a> to discuss this topic.</p>

<p>Ultimately, I&rsquo;d love to see this as an IDE feature.</p>

<p>I&rsquo;d also like to see more experimentation in the department of &ldquo;reactive&rdquo; teaching &mdash; not just tools like this.</p>

<p>Thoughts? Ideas? Let me know!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This is how I&rsquo;m using these terms. There seems to be precedent in pedagogy for the proactive/reactive classification, but it might not be exactly the same as the way I&rsquo;m using it.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>This is true for everything, but I&rsquo;m focusing on programming (in particular programming <em>languages</em>) here.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>And when I learned Rust, it only <em>had</em> two pages of docs, aka &ldquo;The Tutorial&rdquo;. Good times.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>I do eventually get around to doing a full read of the docs or a book but this is after I&rsquo;m already able to write nontrivial things in the language, and it takes a lot of time to get there.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mentally Modelling Modules]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/05/14/mentally-modelling-modules/"/>
    <updated>2017-05-14T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/05/14/mentally-modelling-modules</id>
    <content type="html"><![CDATA[<p>The module and import system in Rust is sadly one of the many confusing things you have to deal with whilst
learning the language. A lot of these confusions stem from a misunderstanding of how it works.
In explaining this I&rsquo;ve seen that it&rsquo;s usually a common set of misunderstandings.</p>

<p>In the spirit of <a href="http://manishearth.github.io/blog/2017/04/05/youre-doing-it-wrong/">&ldquo;You&rsquo;re doing it wrong&rdquo;</a>, I want to try and explain one
&ldquo;right&rdquo; way of looking at it. You can go pretty far<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> without knowing this, but it&rsquo;s useful
and helps avoid confusion.</p>

<hr />

<p><br></p>

<p>First off, just to get this out of the way, <code>mod foo;</code> is basically a way of saying
&ldquo;look for <code>foo.rs</code> or <code>foo/mod.rs</code> and make a module named <code>foo</code> with its contents&rdquo;.
It&rsquo;s the same as <code>mod foo { ... }</code> except the contents are in a different file. This
itself can be confusing at first, but it&rsquo;s not what I wish to focus on here. The Rust book explains this more
in <a href="https://doc.rust-lang.org/book/crates-and-modules.html#multiple-file-crates">the chapter on modules</a>.</p>

<p>In the examples here I will just be using <code>mod foo { ... }</code> since multi-file examples are annoying,
but keep in mind that the stuff here applies equally to multi-file crates.</p>

<h3>Motivating examples</h3>

<p>To start off, I&rsquo;m going to provide some examples of Rust code which compiles. Some of these may be
counterintuitive, based on your existing model.</p>

<pre><code class="rust">pub mod foo {
    extern crate regex;

    mod bar {
        use foo::regex::Regex;
    }
}
</code></pre>

<p>(<a href="http://play.integer32.com/?gist=7673736a57fe99092446ec73f8b8f555&amp;version=undefined">playpen</a>)</p>

<pre><code class="rust">use std::mem;


pub mod foo {
    // not std::mem::transmute!
    use mem::transmute;

    pub mod bar {
        use foo::transmute;
    }
}
</code></pre>

<p>(<a href="http://play.integer32.com/?gist=49415d74214b07b13c236ce88bdf54aa&amp;version=undefined">playpen</a>)</p>

<pre><code class="rust">pub mod foo {
    use bar;
    use bar::bar_inner;

    fn foo() {
        // this works!
        bar_inner();
        bar::bar_inner();
        // this doesn't
        // baz::baz_inner();

        // but these do!
        ::baz::baz_inner();
        super::baz::baz_inner();

        // these do too!
        ::bar::bar_inner();
        super::bar::bar_inner();
        self::bar::bar_inner();

    }
}

pub mod bar {
    pub fn bar_inner() {}
}
pub mod baz {
    pub fn baz_inner() {}
}
</code></pre>

<p>(<a href="http://play.integer32.com/?gist=547fea76590b6c5dbbb04ccbc89cf8d2&amp;version=undefined">playpen</a>)</p>

<pre><code class="rust">pub mod foo {
    use bar::baz;
    // this won't work
    // use baz::inner();

    // this will
    use self::baz::inner;
    // or
    // use bar::baz::inner

    pub fn foo() {
        // but this will work!
        baz::inner();
    }
}

pub mod bar {
    pub mod baz {
        pub fn inner() {}
    }
}
</code></pre>

<p>(<a href="http://play.integer32.com/?gist=e553e52d1cbf0d38fd0b42c09ccafe44&amp;version=undefined">playpen</a>)</p>

<p>These examples remind me of the &ldquo;point at infinity&rdquo; in elliptic curve crypto or fake particles in
physics or fake lattice elements in various fields of CS<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. Sometimes, for something to make sense,
you add in things that don&rsquo;t normally exist. Similarly, these examples may contain code which
is not traditional Rust style, but the import system
still makes more sense when you include them.</p>

<h3>Imports</h3>

<p>The core confusion behind how imports work can really be resolved by remembering two rules:</p>

<ul>
<li><code>use foo::bar::baz</code> resolves <code>foo</code> relative to the root module (<code>lib.rs</code> or <code>main.rs</code>)

<ul>
<li>You can resolve relative to the current module by explicily trying <code>use self::foo::bar::baz</code></li>
</ul>
</li>
<li><code>foo::bar::baz</code> within your code<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> resolves <code>foo</code> relative to the current module

<ul>
<li>You can resolve relative to the root by explicitly using <code>::foo::bar::baz</code></li>
</ul>
</li>
</ul>


<p>That&rsquo;s actually &hellip; it. There are no further caveats. The rest of this is modelling what
constitutes as &ldquo;being within a module&rdquo;.</p>

<p>Let&rsquo;s take a pretty standard setup, where <code>extern crate</code> declarations are placed in the the root
module:</p>

<pre><code class="rust">extern crate regex;

mod foo {
    use regex::Regex;

    fn foo() {
        // won't work
        // let ex = regex::Regex::new("");
        let ex = Regex::new("");
    }
}
</code></pre>

<p>When we say <code>extern crate regex</code>, we pull in the <code>regex</code> crate into the crate root. This behaves
pretty similar to <code>mod regex { /* contents of regex crate */}</code>. Basically, we&rsquo;ve imported
the crate into the crate root, and since all <code>use</code> paths are relative to the crate root,
<code>use regex::Regex</code> works fine inside the module.</p>

<p>Inline in code, <code>regex::Regex</code> won&rsquo;t work because as mentioned before inline paths are relative
to the current module. However, you can try <code>::regex::Regex::new("")</code>.</p>

<p>Since we&rsquo;ve imported <code>regex::Regex</code> in <code>mod foo</code>, that name is now accessible to everything inside
the module directly, so the code can just say <code>Regex::new()</code>.</p>

<p>The way you can view this is that <code>use blah</code> and <code>extern crate blah</code> create an item named
<code>blah</code> &ldquo;within the module&rdquo;, which is basically something like a symbolic link, saying
&ldquo;yes this item named <code>blah</code> is actually elsewhere but we&rsquo;ll pretend it&rsquo;s within the module&rdquo;</p>

<p>The error message from this code may further drive this home:</p>

<pre><code class="rust">use foo::replace;

pub mod foo {
    use std::mem::replace;
}
</code></pre>

<p>(<a href="http://play.integer32.com/?gist=07527a61153519fbf218ffb93f13b3cd&amp;version=undefined">playpen</a>)</p>

<p>The error I get is</p>

<pre><code>error: function `replace` is private
 --&gt; src/main.rs:3:5
  |
3 | use foo::replace;
  |     ^^^^^^^^^^^^
</code></pre>

<p>There&rsquo;s no function named <code>replace</code> in the module <code>foo</code>! But the compiler seems to think there is?</p>

<p>That&rsquo;s because <code>use std::mem::replace</code> basically is equivalent to there being something like:</p>

<pre><code class="rust">pub mod foo {
    fn replace(...) -&gt; ... {
        ...
    }

    // here we can refer to `replace` freely (in inline paths)
    fn whatever() {
        // ...
        let something = replace(blah);
        // ...
    }
}
</code></pre>

<p>except it&rsquo;s actually like a symlink to the function defined in <code>std::mem</code>. Because inline paths
are relative to the current module, saying <code>use std::mem::replace</code> works as if you had defined
a function <code>replace</code> in the same module, and you can refer to <code>replace()</code> without needing
any extra qualification in inline paths.</p>

<p>This also makes <code>pub use</code> fit perfectly in our model. <code>pub use</code> says &ldquo;make this symlink, but let
others see it too&rdquo;:</p>

<pre><code class="rust">// works now!
use foo::replace;

pub mod foo {
    pub use std::mem::replace;
}
</code></pre>

<hr />

<p><br></p>

<p>Folks often get annoyed when this doesn&rsquo;t work:</p>

<pre><code class="rust">mod foo {
    use std::mem;
    // nope
    // use mem::replace;
}
</code></pre>

<p>As mentioned before, <code>use</code> paths are relative to the root module. There is no <code>mem</code>
in the root module, so this won&rsquo;t work. We can make it work via <code>self</code>, which I mentioned
before:</p>

<pre><code class="rust">mod foo {
    use std::mem;
    // yep!
    use self::mem::replace;
}
</code></pre>

<p>Note that this brings overloading of the <code>self</code> keyword up to a grand total of <em>four</em>! Two cases
which occur in the import/path system:</p>

<ul>
<li><code>use self::foo</code> means &ldquo;find me <code>foo</code> within the current module&rdquo;</li>
<li><code>use foo::bar::{self, baz}</code> is equivalent to <code>use foo::bar; use foo::bar::baz;</code></li>
<li><code>fn foo(&amp;self)</code> lets you define methods and specify if the receiver is by-move, borrowed, mutably borrowed, or other</li>
<li><code>Self</code> within implementations lets you refer to the type being implemented on</li>
</ul>


<p>Oh well, at least it&rsquo;s not <code>static</code>.</p>

<hr />

<p><br><br></p>

<p>Going back to one of the examples I gave at the beginning:</p>

<pre><code class="rust">use std::mem;


pub mod foo {
    use mem::transmute;

    pub mod bar {
        use foo::transmute;
    }
}
</code></pre>

<p>(<a href="http://play.integer32.com/?gist=49415d74214b07b13c236ce88bdf54aa&amp;version=undefined">playpen</a>)</p>

<p>It should be clearer now why this works. The root module imports <code>mem</code>. Now, from everyone&rsquo;s point
of view, there&rsquo;s an item called <code>mem</code> in the root.</p>

<p>Within <code>mod foo</code>, <code>use mem::transmute</code> works because <code>use</code> is relative to the root, and <code>mem</code>
already exists in the root! When you <code>use</code> something, all child modules will see it as if it were
actually belonging to the module. (Non-child modules won&rsquo;t see it because of privacy, we
saw an example of this already)</p>

<p>This is why <code>use foo::transmute</code> works from <code>mod bar</code>, too. <code>bar</code> can refer to the contents
of <code>foo</code> via <code>use foo::whatever</code>, since <code>foo</code> is a child of the root module, and <code>use</code> is relative
to the root. <code>foo</code> already has an item named <code>transmute</code> inside it because it imported one.
Nothing in the parent module is private from the child, so we can <code>use foo::transmute</code> from
<code>bar</code>.</p>

<p>Generally, the standard way of doing things is to either not use modules (just a single lib.rs),
or, if you do use modules, put nothing other than <code>extern crate</code>s and <code>mod</code>s in the root.
This is why we rarely see shenanigans like the above; there&rsquo;s nothing in the root crate
to import, aside from other crates specified by <code>extern crate</code>. The trick of
&ldquo;reimport something from the parent module&rdquo; is also pretty rare because there&rsquo;s basically no
point to using that (just import it directly!). So this is not the kind of code
you&rsquo;ll see in the wild.</p>

<hr />

<p><br></p>

<p>Basically, the way the import system works can be summed up as:</p>

<ul>
<li><code>extern crate</code> and <code>use</code> will act as if they were defining the imported item in the current module, like a symbolic link</li>
<li><code>use foo::bar::baz</code> resolves the path relative to the root module</li>
<li><code>foo::bar::baz</code> in an inline path (i.e. not in a <code>use</code>) will resolve relative to the current module</li>
<li><code>::foo::bar::baz</code> will <em>always</em> resolve relative to the root module</li>
<li><code>self::foo::bar::baz</code> will <em>always</em> resolve relative to the current module</li>
<li><code>super::foo::bar::baz</code> will <em>always</em> resolve relative to the parent module</li>
</ul>


<p>Alright, on to the other half of this. Privacy.</p>

<h3>Privacy</h3>

<p>So how does privacy work?</p>

<p>Privacy, too, follows some basic rules:</p>

<ul>
<li>If you can access a module, you can access all of its <code>pub</code> contents</li>
<li>A module can always access its child modules, but not recursively

<ul>
<li>This means that a module cannot access private items in its children, nor can it access private grandchildren modules</li>
</ul>
</li>
<li>A child can always access its parent modules (and their parents), and <em>all</em> their contents</li>
<li><code>pub(restricted)</code> <a href="https://github.com/rust-lang/rfcs/blob/master/text/1422-pub-restricted.md">is a proposal</a> which extends this a bit, but it&rsquo;s experimental so we won&rsquo;t deal with it here</li>
</ul>


<p>Giving some examples,</p>

<pre><code class="rust">mod foo {
    mod bar {
        // can access `foo::foofunc`, even though `foofunc` is private

        pub fn barfunc() {}

    }
    // can access `foo::bar::barfunc()`, even though `bar` is private
    fn foofunc() {}
}
</code></pre>

<pre><code class="rust">mod foo {
    mod bar {
        // We can access our parent and _all_ its contents,
        // so we have access to `foo::baz`. We can access
        // all pub contents of modules we have access to, so we
        // can access `foo::baz::bazfunc`
        use foo::baz::bazfunc;
    }
    mod baz {
        pub fn bazfunc() {}
    }
}
</code></pre>

<p>It&rsquo;s important to note that this is all contextual; whether or not a particular
path works is a function of where you are. For example, this works<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>:</p>

<pre><code class="rust">pub mod foo {
    /* not pub */ mod bar {
        pub mod baz {
            pub fn bazfunc() {}
        }
        pub mod quux {
            use foo::bar::baz::bazfunc;
        }
    }
}
</code></pre>

<p>We are able to write the path <code>foo::bar::baz::bazfunc</code> even though <code>bar</code> is private!</p>

<p>This is because we still have <em>access</em> to the module <code>bar</code>, by being a descendent module.</p>

<hr />

<p><br></p>

<p>Hopefully this is helpful to some of you. I&rsquo;m not really sure how this can fit into the official
docs, but if you have ideas, feel free to adapt it<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This is because most of these misunderstandings lead to a model where you think fewer things compile, which is fine as long as it isn&rsquo;t too restrictive. Having a mental model where you feel more things will compile than actually do is what leads to frustration; the opposite can just be restrictive.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>One example closer to home is how Rust does lifetime resolution. Lifetimes form a lattice with <code>'static</code> being the bottom element. There is no top element for lifetimes in Rust syntax, but internally <a href="http://manishearth.github.io/rust-internals-docs/rustc/ty/enum.Region.html#variant.ReEmpty">there is the &ldquo;empty lifetime&rdquo;</a> which is used during borrow checking. If something resolves to have an empty lifetime, it can&rsquo;t exist, so we get a lifetime error.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>When I say &ldquo;within your code&rdquo;, I mean &ldquo;anywhere but a <code>use</code> statement&rdquo;. I may also term these as &ldquo;inline paths&rdquo;.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Example adapted from <a href="https://www.reddit.com/r/rust/comments/5m4w95/the_rust_module_system_is_too_confusing/dc1df2z/">this discussion</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Contact me if you have licensing issues; I still have to figure out the licensing situation for the blog, but am more than happy to grant exceptions for content being uplifted into official or semi-official docs.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prolonging Temporaries in Rust]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/04/13/prolonging-temporaries-in-rust/"/>
    <updated>2017-04-13T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/04/13/prolonging-temporaries-in-rust</id>
    <content type="html"><![CDATA[<p>A colleague of mine learning Rust had an interesting type / borrow checker error. The solution needs
a less-used feature of Rust (which basically exists precisely for this kind of thing), so I thought
I&rsquo;d document it.</p>

<p>The code was like this:</p>

<pre><code class="rust">let maybe_foo = if some_condition {
    thing.get_ref() // returns Option&lt;&amp;Foo&gt;, borrowed from `thing`
} else {
    thing.get_owned() // returns Option&lt;Foo&gt;
};

use(maybe_foo);
</code></pre>

<p>If you want to follow along, here is a full program that does this (<a href="https://play.rust-lang.org/?gist=e09a79b511e347fe786e4689d282b806&amp;version=stable&amp;backtrace=0">playpen</a>):</p>

<pre><code class="rust">#[derive(Debug)]
struct Foo;

struct Thingy {
    foo: Foo
}

impl Thingy {
    pub fn get_ref(&amp;self) -&gt; Option&lt;&amp;Foo&gt; {
        Some(&amp;self.foo)
    }
    pub fn get_owned(&amp;self) -&gt; Option&lt;Foo&gt; {
        Some(Foo)
    }
    pub fn new() -&gt; Self {
        Thingy {
            foo: Foo
        }
    }
}



pub fn main() {
    let some_condition = true;
    let thing = Thingy::new();

    let maybe_foo = if some_condition {
        thing.get_ref() // returns Option&lt;&amp;Foo&gt;, borrowed from `thing`
    } else {
        thing.get_owned() // returns Option&lt;Foo&gt;
    };

    println!("{:?}", maybe_foo);
}
</code></pre>

<p>I&rsquo;m only going to be changing the contents of <code>main()</code> here.</p>

<p>What&rsquo;s happening here is that a non-<code>Copy</code> type, <code>Foo</code>, is returned in an <code>Option</code>. In one case,
we have a reference to the <code>Foo</code>, and in another case an owned copy.</p>

<p>We want to set a variable to these, but of course we can&rsquo;t because they&rsquo;re different types.</p>

<p>In one case, we have an owned <code>Foo</code>, and we can usually obtain a borrow from an owned type. For
<code>Option</code>, there&rsquo;s a convenience method <code>.as_ref()</code> that does this<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Let&rsquo;s try using that (<a href="https://play.rust-lang.org/?gist=41c3f836b9485c216ccb05c257ae5326&amp;version=stable&amp;backtrace=0">playpen</a>):</p>

<pre><code class="rust">let maybe_foo = if some_condition {
    thing.get_ref()
} else {
    thing.get_owned().as_ref()
};
</code></pre>

<p>This will give us an error.</p>

<pre><code>error: borrowed value does not live long enough
  --&gt; &lt;anon&gt;:32:5
   |
31 |         thing.get_owned().as_ref()
   |         ----------------- temporary value created here
32 |     };
   |     ^ temporary value dropped here while still borrowed
...
35 | }
   | - temporary value needs to live until here

error: aborting due to previous error
</code></pre>

<p>The problem is, <code>thing.get_owned()</code> returns an owned value. There&rsquo;s nothing that it gets anchored to
(we don&rsquo;t set its value to a variable), so it is just a temporary &ndash; we can call methods on it, but
once we&rsquo;re done the value will go out of scope.</p>

<p>What we want is something like</p>

<pre><code class="rust">let maybe_foo = if some_condition {
    thing.get_ref()
} else {
    let owned = thing.get_owned();
    owned.as_ref()
};
</code></pre>

<p>but this will still give a borrow error &ndash; <code>owned</code> will still go out of scope within the <code>if</code> block,
and we need the reference to it last as long as <code>maybe_foo</code> (outside the block) is supposed to last.</p>

<p>So this is no good.</p>

<p>An alternate solution here <em>can</em> be copying/cloning the <code>Foo</code> in the <em>first</em> case by calling <code>.map(|x|
x.clone())</code> or <code>.cloned()</code> or something. Sometimes you don&rsquo;t want to clone, so this isn&rsquo;t great.</p>

<p>Another solution here &ndash; the generic advice for dealing with values which may be owned or borrow &ndash;
is to use <code>Cow</code>. It does incur a runtime check, though; one which can be optimized out if things are
inlined enough.</p>

<p>What we need to do here is to extend the lifetime of the temporary returned by <code>thing.get_owned()</code>.
We need to extend it <em>past</em> the scope of the <code>if</code>.</p>

<p>One way to do this is to have an <code>Option</code> outside that scope which we mutate (<a href="https://play.rust-lang.org/?gist=7868045f2cebec6d23e7a065f5823767&amp;version=stable&amp;backtrace=0">playpen</a>).</p>

<pre><code class="rust">let mut owned = None;
let maybe_foo = if some_condition {
    thing.get_ref()
} else {
    owned = thing.get_owned();
    owned.as_ref()
};
</code></pre>

<p>This works in this case, but in this case we already had an <code>Option</code>. If <code>get_ref()</code> and <code>get_owned()</code>
returned <code>&amp;Foo</code> and <code>Foo</code> respectively, then we&rsquo;d need to do something like:</p>

<pre><code class="rust">let mut owned = None;
let maybe_foo = if some_condition {
    thing.get_ref()
} else {
    owned = Some(thing.get_owned());
    owned.as_ref().unwrap()
};
</code></pre>

<p>which is icky since it introduces an unwrap.</p>

<p>What we really need is a way to signal to the compiler that it needs to hold on to that temporary
for the scope of the enclosing block.</p>

<p>We can do that! (<a href="https://play.rust-lang.org/?gist=1ddf2a428e73b01baa72acdad7cbbf2b&amp;version=stable&amp;backtrace=0">playpen</a>)</p>

<pre><code class="rust">let owned; // 😯😯😯😯😯
let maybe_foo = if some_condition {
    thing.get_ref()
} else {
    owned = thing.get_owned();
    owned.as_ref()
};
</code></pre>

<p>We know that Rust doesn&rsquo;t do &ldquo;uninitialized&rdquo; variables. If you want to name a variable, you have to
initialize it. <code>let foo;</code> feels rather like magic in this context, because it looks like we&rsquo;ve declared
an uninitialized variable.</p>

<p>What&rsquo;s less well known is that Rust <em>can</em> do &ldquo;deferred&rdquo; initialization. Here, you declare a variable
and can initialize it later, but expressions involving the variable can only exist in branches
where the compiler knows it has been initialized.</p>

<p>This is the case here. We declared the <code>owned</code> variable beforehand. It now lives in the outer scope
and won&rsquo;t be destroyed until the end of the outer scope. However, the variable cannot be used directly
in an expression in the first branch, or after the <code>if</code>. Doing so will give a compile time error
saying <code>use of possibly uninitialized variable: `owned`</code>. We can only use it in the <code>else</code> branch
because the compiler can see that it is unconditionally initialized in that branch.</p>

<p>We can still read the value of <code>owned</code> indirectly through <code>maybe_foo</code> from outside the branch.
This is okay because the storage of <code>owned</code> is guaranteed to live as long as the outer scope,
and <code>maybe_foo</code> borrows from it. The only time <code>maybe_foo</code> is set to a value inside <code>owned</code> is when
<code>owned</code> has been initialized, so it is safe.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>In my experience <code>.as_ref()</code> is the solution to many, many borrow check issues newcomers come across, especially those involving <code>.map()</code><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Never Hear the Phrase 'INHTPAMA' Anymore]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/03/18/inhtpinhtpamaa/"/>
    <updated>2017-03-18T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/03/18/inhtpinhtpamaa</id>
    <content type="html"><![CDATA[<p>Imagine never hearing the phrase &lsquo;INHTPAMA&rsquo; again.</p>

<p>Oh, that&rsquo;s already the case? Bummer.</p>

<p>Often, when talking about Rust, folks refer to the core aliasing rule as &ldquo;that <code>&amp;mut</code> thing&rdquo;,
&ldquo;compile-time <code>RWLock</code>&rdquo; (or &ldquo;compile-time <code>RefCell</code>&rdquo;), or something similar. Basically, referring to
the fact that you can&rsquo;t mutate the data that is currently held via an <code>&amp;</code> reference, and that you
can&rsquo;t mutate or read the data currently held via an <code>&amp;mut</code> reference except through that reference
itself.</p>

<p>It&rsquo;s always bugged me that we really don&rsquo;t have a name for this thing. It&rsquo;s one of the core
bits of Rust, and crops up often in discussions.</p>

<p>But we did have a name for it! It was &ldquo;INHTPAMA&rdquo; (which was later butchered into &ldquo;INHTWAMA&rdquo;).</p>

<p>This is a reference to <a href="http://smallcultfollowing.com/babysteps/blog/2012/11/18/imagine-never-hearing-the-phrase-aliasable/">Niko&rsquo;s 2012 blog post</a>, titled
&ldquo;Imagine Never Hearing The Phrase &lsquo;aliasable, mutable&rsquo; again&rdquo;. It&rsquo;s where the aliasing
rules came from. Go read it, it&rsquo;s great. It talks about this weird language with at symbols
and purity, but I assure you, that language is Baby Rust. Or maybe Teenage Rust. The
<a href="https://www.ars.usda.gov/images/docs/9910_10104/Pg-lifecycle.jpg">lifecycle of rusts is complex and interesting</a> and I don&rsquo;t know how to categorize it.</p>

<p>The point of this post isn&rsquo;t really to encourage reviving the use of &ldquo;INHTWAMA&rdquo;; it&rsquo;s
a rather weird acronym that will probably confuse folks. I would like to have a better
way of refering to &ldquo;that <code>&amp;mut</code> thing&rdquo;, but I&rsquo;d prefer if it wasn&rsquo;t a confusing acronym
that carries no meaning of its own if you don&rsquo;t know the history of it. That&rsquo;s a recipe for
making new community members feel like outsiders.</p>

<p>But that post is amazing and I&rsquo;d hate to see it drop out of the collective
memory of the Rust community.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Are Sum, Product, and Pi Types?]]></title>
    <link href="http://manishearth.github.io/blog_staging/blog/2017/03/04/what-are-sum-product-and-pi-types/"/>
    <updated>2017-03-04T00:00:00+00:00</updated>
    <id>http://manishearth.github.io/blog_staging/blog/2017/03/04/what-are-sum-product-and-pi-types</id>
    <content type="html"><![CDATA[<p><em>See also: <a href="https://tonyarcieri.com/a-quick-tour-of-rusts-type-system-part-1-sum-types-a-k-a-tagged-unions">Tony&rsquo;s post on the same topic</a></em></p>

<p>You often hear people saying &ldquo;Language X<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> has sum types&rdquo; or &ldquo;I wish language X had sum types&rdquo;<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>,
or &ldquo;Sum types are cool&rdquo;.</p>

<p>Much like fezzes and bow ties, sum types are indeed cool.</p>

<p><img class="center" src="/images/post/memes/sum-types-are-cool.jpg" width="400"></p>

<p>These days, I&rsquo;ve also seen people asking about &ldquo;Pi types&rdquo;, because of <a href="https://github.com/ticki/rfcs/blob/pi-types-2/text/0000-pi-types.md">this Rust RFC</a>.</p>

<p>But what does &ldquo;sum type&rdquo; mean? And why is it called that? And what, in the name of sanity, is
a Pi type?</p>

<p>Before I start, I&rsquo;ll mention that while I will be covering some type theory to explain the names
&ldquo;sum&rdquo; and &ldquo;product&rdquo;, you don&rsquo;t need to understand these names to use these things! Far too often
do people have trouble understanding relatively straightforward concepts in languages because
they have confusing names with confusing mathematical backgrounds<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<h2>So what&rsquo;s a sum type? (the no-type-theory version)</h2>

<p>In it&rsquo;s essence, a sum type is basically an &ldquo;or&rdquo; type. Let&rsquo;s first look at structs.</p>

<pre><code class="rust">struct Foo {
    x: bool,
    y: String,
}
</code></pre>

<p><code>Foo</code> is a <code>bool</code> AND a <code>String</code>. You need one of each to make one.
This is an &ldquo;and&rdquo; type, or a &ldquo;product&rdquo; type (I&rsquo;ll explain the name later).</p>

<p>So what would an &ldquo;or&rdquo; type be? It would be one where the value can be a
<code>bool</code> OR a <code>String</code>. You can achieve this with C++ with a union:</p>

<pre><code class="cpp">union Foo {
    bool x;
    string y;
}

foo.x = true; // set it to a bool
foo.y = "blah"; // set it to a string
</code></pre>

<p>However, this isn&rsquo;t <em>exactly</em> right, since the value doesn&rsquo;t store the information
of which variant it is. You could store <code>false</code> and the reader wouldn&rsquo;t know
if you had stored an empty <code>string</code> or a <code>false</code> <code>bool</code>.</p>

<p>There&rsquo;s a pattern called &ldquo;tagged union&rdquo; (or &ldquo;discriminated union&rdquo;) in C++ which bridges this gap.</p>

<pre><code class="cpp">union FooUnion {
    bool x;
    string y;
}

enum FooTag {
    BOOL, STRING
}

struct Foo {
    FooUnion data;
    FooTag tag;
}

// set it to a bool
foo.data.x = true;
foo.tag = BOOL;

// set it to a string
foo.data.y = "blah";
foo.tag = STRING;
</code></pre>

<p>Here, you manually set the tag when setting the value. C++ also has <code>std::variant</code> (or
<code>boost::variant</code>) that encapsulates this pattern with a better API.</p>

<p>While I&rsquo;m calling these &ldquo;or&rdquo; types here, the technical term for such types is &ldquo;sum&rdquo; types.
Other languages have built-in sum types.</p>

<p>Rust has them and calls them &ldquo;enums&rdquo;. These are a more generalized version of the
enums you see in other languages.</p>

<pre><code class="rust">enum Foo {
    Str(String),
    Bool(bool)
}

let foo = Foo::Bool(true);

// "pattern matching"
match foo {
    Str(s) =&gt; /* do something with string `s` */,
    Bool(b) =&gt; /* do something with bool `b` */,
}
</code></pre>

<p>Swift is similar, and also calls them enums
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">enum</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">str</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">boolean</span><span class="p">(</span><span class="kt">bool</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">.</span><span class="n">boolean</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span><span class='line'><span class="k">switch</span> <span class="n">foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">str</span><span class="p">(</span><span class="k">let</span> <span class="n">s</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// do something with string &lt;code&gt;s&lt;/code&gt;</span>
</span><span class='line'>    <span class="k">case</span> <span class="p">.</span><span class="n">boolean</span><span class="p">(</span><span class="k">let</span> <span class="n">b</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// do something with boolean &lt;code&gt;b&lt;/code&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>You can fake these in Go using interfaces, as well. Typescript has built-in
unions which can be typechecked without any special effort, but you need
to add a tag (like in C++) to pattern match on them.</p>

<p>Of course, Haskell has them:</p>

<pre><code class="haskell">data Foo = B Bool | S String

-- define a function
doThing :: Foo -&gt; SomeReturnType
doThing (B b) = -- do something with boolean b
doThing (S s) = -- do something with string s

-- call it
doThing (S "blah")
doThing (B True)
</code></pre>

<p>One of the very common things that languages with sum types do is express nullability
as a sum type;</p>

<pre><code class="rust">// an Option is either "something", containing a type, or "nothing"
enum Option&lt;T&gt; {
    Some(T),
    None
}

let x = Some("hello");
match x {
    Some(s) =&gt; println!("{}", s),
    None =&gt; println!("no string for you"),
}
</code></pre>

<p>Generally, these languages have &ldquo;pattern matching&rdquo;, which is like a <code>switch</code>
statement on steroids. It lets you match on and destructure all kinds of things,
sum types being one of them. Usually, these are &ldquo;exhaustive&rdquo;, which means that
you are forced to handle all possible cases. In Rust, if you remove that <code>None</code>
branch, the program won&rsquo;t compile. So you&rsquo;re forced to deal with the none case,
<em>somehow</em>.</p>

<p>In general sum types are a pretty neat and powerful tool. Languages with them built-in
tend to make heavy use of them, almost as much as they use structs.</p>

<h2>Why do we call it a sum type?</h2>

<p><em>Here be (type theory) <a href="https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools">dragons</a></em></p>

<p>Let&rsquo;s step back a bit and figure out what a type is.</p>

<p>It&rsquo;s really a restriction on the values allowed. It can have things like methods and whatnot
dangling off it, but that&rsquo;s not so important here.</p>

<p></p>

<p>In other words, it&rsquo;s like<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> a <a href="https://en.wikipedia.org/wiki/Set_(mathematics)">set</a>. A boolean is the set &#92;(\{\mathtt{true}, \mathtt{false}\}&#92;). An 8-bit unsigned integer
(<code>u8</code> in Rust) is the set &#92;(\{0, 1, 2, 3, &hellip;. 254, 255\}&#92;). A string is a set with
infinite elements, containing all possible valid strings<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>.</p>

<p>What&rsquo;s a struct? A struct with two fields contains every possible combination of elements from the two sets.</p>

<pre><code class="rust">struct Foo {
    x: bool,
    y: u8,
}
</code></pre>

<p>The set of possible values of <code>Foo</code> is</p>

<p>&#92;[\{(\mathtt{x}, \mathtt{y}): \mathtt{x} \in \mathtt{bool}, \mathtt y \in \mathtt{u8}\}&#92;]</p>

<p>(Read as &ldquo;The set of all &#92;((\mathtt{x}, \mathtt{y})&#92;) where &#92;(\tt x&#92;) is in &#92;(\mathtt{bool}&#92;) and &#92;(\tt y&#92;) is in &#92;(\mathtt{u8}&#92;)&rdquo;)</p>

<p>This is called a <em>Cartesian product</em>, and is often represented as &#92;(\tt Foo = bool \times u8&#92;).
An easy way to view this as a product is to count the possible values: The number of possible values
of <code>Foo</code> is the number of possible values of <code>bool</code> (2) <em>times</em> the number of possible values of <code>u8</code> (256).</p>

<p>A general struct would be a &ldquo;product&rdquo; of the types of each field, so something like</p>

<pre><code class="rust">struct Bar {
    x: bool,
    y: u8,
    z: bool,
    w: String
}
</code></pre>

<p>is &#92;(\mathtt{Bar = bool \times u8 \times bool \times String}&#92;)</p>

<p>This is why structs are called &ldquo;product types&rdquo;<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>.</p>

<p>You can probably guess what comes next &ndash; Rust/Swift enums are &ldquo;sum types&rdquo;, because they are the
<em>sum</em> of the two sets.</p>

<pre><code class="rust">enum Foo {
    Bool(bool),
    Integer(u8),
}
</code></pre>

<p>is a set of all values which are valid booleans, <em>and</em> all values which are valid integers. This
is a sum of sets, &#92;(\tt Foo = bool + u8&#92;). More accurately, it&rsquo;s a <em>disjoint union</em>, where if the input
sets have overlap, the overlap is &ldquo;discriminated&rdquo; out.</p>

<p>An example of this being a disjoint union is:</p>

<pre><code class="rust">enum Bar {
    Bool1(bool),
    Bool2(bool),
    Integer(u8).
}
</code></pre>

<p>This is not &#92;(\tt Bar = bool + bool + u8&#92;), because &#92;(\tt bool + bool = bool&#92;), (regular set addition doesn&rsquo;t duplicate the overlap).</p>

<p>Instead, it&rsquo;s something like</p>

<p>&#92;[\tt Bar = bool + otherbool + u8&#92;]</p>

<p>where &#92;(\tt otherbool&#92;) is also a set &#92;(\tt \{true, false\}&#92;),
except that these elements are <em>different</em> from those in &#92;(\tt bool&#92;). You can look at it as if</p>

<p>&#92;[\tt otherbool = \{true_2, false_2\}&#92;]</p>

<p>so that</p>

<p>&#92;[\mathtt{bool + otherbool} = \{\mathtt{true, false, true_2, false_2}\}&#92;]</p>

<p>For sum types, the number of possible values is the sum of the number of possible values of
each of its component types.</p>

<p>So, Rust/Swift enums are &ldquo;sum types&rdquo;.</p>

<p>You may often notice the terminology &ldquo;algebraic datatypes&rdquo; (ADT) being used, usually that&rsquo;s just
talking about sum and product types together &ndash; a language with ADTs will have both.</p>

<p>In fact, you can even have <em>exponential</em> types! The notation A<sup>B</sup> in set theory does mean something,
it&rsquo;s the set of all possible mappings from &#92;(B&#92;) to &#92;(A&#92;). The number of elements is &#92;(N_A^{N_B}&#92;). So
basically, the type of a function (which is a mapping) is an &ldquo;exponential&rdquo; type. You can also view it as
an iterated product type, a function from type <code>B</code> to <code>A</code> is really a struct like this:</p>

<pre><code class="rust">// the type
fn my_func(b: B) -&gt; A;

// is conceptually (each possible my_func can be written as an instance of)

struct my_func {
    b1: A, // value for first element in B
    b2: A, // value for second element in B
    b3: A,
    // ... 
}
</code></pre>

<p>given a value of the input <code>b</code>, the function will find the right field of <code>my_func</code> and return
the mapping. Since a struct is a product type, this is</p>

<p>&#92;[\mathtt{A}^{N_\mathtt{B}} = \tt A \times A \times A \times \dots&#92;]</p>

<p>making it an exponential type.</p>

<p><a href="http://strictlypositive.org/diff.pdf">You can even take <em>derivatives</em> of types!</a> (h/t Sam Tobin-Hochstadt for pointing this out to me)</p>

<p></p>

<h2>What, in the name of sanity, is a Pi type?</h2>

<p><img class="center" src="/images/post/memes/what-in-the-name-of-sanity.jpg" width="400"></p>

<p>It&rsquo;s essentially a form of dependent type. A dependent type is when your type
can depend on a value. An example of this is integer generics, where you
can do things like <code>Array&lt;bool, 5&gt;</code>, or <code>template&lt;unsigned int N, typename T&gt; Array&lt;T, N&gt; ...</code> (in C++).</p>

<p>Note that the type signature contains a <em>type</em> dependent on an integer, being generic over multiple
different array lengths.</p>

<p>The name comes from how a constructor for these types would look:</p>

<pre><code class="rust">// create an array of booleans from a given integer
// I made up this syntax, this is _not_ from the Rust Pi type RFC
fn make_array(x: u8) -&gt; Array&lt;bool, x&gt; {
    // ...
}

// or
// (the proposed rust syntax)
fn make_array&lt;const x: u8&gt;() -&gt; Array&lt;bool, x&gt; {
   // ... 
}
</code></pre>

<p>What&rsquo;s the type of <code>make_array</code> here? It&rsquo;s a function which can accept any integer
and return a different type in each case. You can view it as a set of functions,
where each function corresponds to a different integer input. It&rsquo;s basically:</p>

<pre><code class="rust">struct make_array {
    make_array_0: fn() -&gt; Array&lt;bool, 0&gt;,
    make_array_1: fn() -&gt; Array&lt;bool, 1&gt;,
    make_array_2: fn() -&gt; Array&lt;bool, 2&gt;,
    make_array_3: fn() -&gt; Array&lt;bool, 3&gt;,
    make_array_4: fn() -&gt; Array&lt;bool, 4&gt;,
    make_array_5: fn() -&gt; Array&lt;bool, 5&gt;,
    // ... 
}
</code></pre>

<p>Given an input, the function chooses the right child function here, and calls it.</p>

<p></p>

<p>This is a struct, or a product type! But it&rsquo;s a product of an infinite number of types<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>.</p>

<p>We can look at it as</p>

<p>&#92;[\texttt{make_array} = \prod\limits_{x = 0}^\infty\left( \texttt{fn()} \mathtt\to \texttt{Array&lt;bool, x&gt;}\right)&#92;]</p>

<p>The usage of the &#92;(\Pi&#92;) symbol to denote an iterative product gives this the name &ldquo;Pi type&rdquo;.</p>

<p>In languages with lazy evaluation (like Haskell), there is no difference between having a function
that can give you a value, and actually having the value. So, the type of <code>make_array</code> is the type
of <code>Array&lt;bool, N&gt;</code> itself in languages with lazy evaluation.</p>

<p>There&rsquo;s also a notion of a &ldquo;sigma&rdquo; type, which is basically</p>

<p>&#92;[\sum\limits_{x = 0}^\infty \left(\texttt{fn()} \mathtt\to \texttt{Array&lt;bool, x&gt;}\right)&#92;]</p>

<p>With the Pi type, we had &ldquo;for all N we can
construct an array&rdquo;, with the sigma type we have &ldquo;there exists some N for which we can construct this array&rdquo;.
As you can expect, this type can be expressed with a possibly-infinite enum, and instances of this type
are basically instances of <code>Array&lt;bool, N&gt;</code> for some specific <code>N</code> where the <code>N</code> is only known at runtime.
(much like how regular sum types are instances of one amongst multiple types, where the exact type
is only known at runtime). <code>Vec&lt;bool&gt;</code> is conceptually similar to the sigma type <code>Array&lt;bool, ?&gt;</code>,
as is <code>&amp;[bool]</code>.</p>

<p></p>

<h2>Wrapping up</h2>

<p>Types are sets, and we can do set-theory things on them to make cooler types.</p>

<p>Let&rsquo;s try to avoid using confusing terminology, however. If Rust <em>does</em> get &ldquo;pi types&rdquo;,
let&rsquo;s just call them &ldquo;dependent types&rdquo; or &ldquo;const generics&rdquo; :)</p>

<p><em>Thanks to Zaki, Avi Weinstock, Corey Richardson, and Peter Atashian for reviewing drafts of this post.</em></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Rust, Swift, <em>sort of</em> Typescript, and all the functional languages who had it before it was cool.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Lookin&#8217; at you, Go.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Moooooooooooooooonads<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Types are not exactly sets due to some differences, but for the purposes of this post we can think of them like sets.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>Though you can argue that strings often have their length bounded by the pointer size of the platform, so it&rsquo;s still a finite set.<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>This even holds for zero-sized types, for more examples, check out <a href="http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/">this blog post</a><a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>Like with strings, in practice this would probably be bounded by the integer type chosen<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
